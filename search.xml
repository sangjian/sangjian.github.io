<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java7 中的try-with-resources]]></title>
      <url>http://www.ideabuffer.cn/2016/12/02/Java7%E4%B8%AD%E7%9A%84try-with-resources/</url>
      <content type="html"><![CDATA[<p>今天调试了一下Tomcat关闭代码，在执行关闭时会调用<code>Catalina</code>对象的<code>stopServer</code>方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopServer</span><span class="params">(String[] arguments)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (arguments != <span class="keyword">null</span>) &#123;</div><div class="line">        arguments(arguments);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Server s = getServer();</div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Create and execute our Digester</span></div><div class="line">        Digester digester = createStopDigester();</div><div class="line">        File file = configFile();</div><div class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(file)) &#123;</div><div class="line">            InputSource is =</div><div class="line">                <span class="keyword">new</span> InputSource(file.toURI().toURL().toString());</div><div class="line">            is.setByteStream(fis);</div><div class="line">            digester.push(<span class="keyword">this</span>);</div><div class="line">            digester.parse(is);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"Catalina.stop: "</span>, e);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Server object already present. Must be running as a service</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            s.stop();</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">            log.error(<span class="string">"Catalina.stop: "</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Stop the existing server</span></div><div class="line">    s = getServer();</div><div class="line">    <span class="keyword">if</span> (s.getPort()&gt;<span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 注意这段代码，并没有对资源进行close</div><div class="line">         */</div><div class="line">        <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(s.getAddress(), s.getPort());</div><div class="line">                OutputStream stream = socket.getOutputStream()) &#123;</div><div class="line">            String shutdown = s.getShutdown();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shutdown.length(); i++) &#123;</div><div class="line">                stream.write(shutdown.charAt(i));</div><div class="line">            &#125;</div><div class="line">            stream.flush();</div><div class="line">        &#125; <span class="keyword">catch</span> (ConnectException ce) &#123;</div><div class="line">            log.error(sm.getString(<span class="string">"catalina.stopServer.connectException"</span>,</div><div class="line">                                   s.getAddress(),</div><div class="line">                                   String.valueOf(s.getPort())));</div><div class="line">            log.error(<span class="string">"Catalina.stop: "</span>, ce);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            log.error(<span class="string">"Catalina.stop: "</span>, e);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        log.error(sm.getString(<span class="string">"catalina.stopServer"</span>));</div><div class="line">        System.exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>啥意思呢，就是在执行<code>stopServer</code>方法时通过<code>Socket</code>来发送一个<code>SHUTDOWN</code>字符串到指定Tomcat的Server监听端口（默认为8005），来告诉Tomcat要执行关闭操作。</p>
<p>接收这个字符串的代码在<code>StandardServer</code>的<code>await</code>方法中，代码如下：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    InputStream stream;</div><div class="line">    <span class="keyword">long</span> acceptStartTime = System.currentTimeMillis();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 接收socket</span></div><div class="line">        socket = serverSocket.accept();</div><div class="line">        <span class="comment">// 设置超时时间为10妙</span></div><div class="line">        socket.setSoTimeout(<span class="number">10</span> * <span class="number">1000</span>);  <span class="comment">// Ten seconds</span></div><div class="line">        <span class="comment">// 获取输入流</span></div><div class="line">        stream = socket.getInputStream();</div><div class="line">    &#125; <span class="keyword">catch</span> (SocketTimeoutException ste) &#123;</div><div class="line">        <span class="comment">// This should never happen but bug 56684 suggests that</span></div><div class="line">        <span class="comment">// it does.</span></div><div class="line">        log.warn(sm.getString(<span class="string">"standardServer.accept.timeout"</span>,</div><div class="line">                Long.valueOf(System.currentTimeMillis() - acceptStartTime)), ste);</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (AccessControlException ace) &#123;</div><div class="line">        log.warn(<span class="string">"StandardServer.accept security exception: "</span></div><div class="line">                + ace.getMessage(), ace);</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        <span class="keyword">if</span> (stopAwait) &#123;</div><div class="line">            <span class="comment">// Wait was aborted with socket.close()</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        log.error(<span class="string">"StandardServer.await: accept: "</span>, e);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Read a set of characters from the socket</span></div><div class="line">    <span class="keyword">int</span> expected = <span class="number">1024</span>; <span class="comment">// Cut off to avoid DoS attack</span></div><div class="line">    <span class="keyword">while</span> (expected &lt; shutdown.length()) &#123;</div><div class="line">        <span class="keyword">if</span> (random == <span class="keyword">null</span>)</div><div class="line">            random = <span class="keyword">new</span> Random();</div><div class="line">        expected += (random.nextInt() % <span class="number">1024</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (expected &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">int</span> ch = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 接收字符</span></div><div class="line">            ch = stream.read();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            log.warn(<span class="string">"StandardServer.await: read: "</span>, e);</div><div class="line">            ch = -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ch &lt; <span class="number">32</span>)  <span class="comment">// Control character or EOF terminates loop</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        command.append((<span class="keyword">char</span>) ch);</div><div class="line">        expected--;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">// Close the socket now that we are done with it</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</div><div class="line">            socket.close();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        <span class="comment">// Ignore</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意看下第41行的代码<code>ch = stream.read()</code>，这个用来接收一个字符。再看下第46行，说明已经接收完毕，通常应该<code>ch</code>应该是-1，然后break。</p>
<p>但在关闭时断点如果执行完<code>stream.flush()</code>后，<code>await</code>方法在接收最后一个字符的时候会一直等待，直到timeOut指定的时间，然后会报如下异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">警告: StandardServer.await: read: </div><div class="line">java.net.SocketTimeoutException: Read timed out</div><div class="line">	at java.net.SocketInputStream.socketRead0(Native Method)</div><div class="line">	at java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class="number">116</span>)</div><div class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">170</span>)</div><div class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">141</span>)</div><div class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">223</span>)</div><div class="line">	at org.apache.catalina.core.StandardServer.await(StandardServer.java:<span class="number">498</span>)</div><div class="line">	at org.apache.catalina.startup.Catalina.await(Catalina.java:<span class="number">739</span>)</div><div class="line">	at org.apache.catalina.startup.Catalina.start(Catalina.java:<span class="number">685</span>)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">497</span>)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:<span class="number">355</span>)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:<span class="number">495</span>)</div></pre></td></tr></table></figure>
<p>这说明这个socket并未关闭，回过头来看<code>stopServer</code>中的代码，发现在<code>try-catch</code>中并未显式关闭<code>socket</code>和<code>stream</code>，如果断点再走一步的话，在<code>await</code>中的接收就变的正常了，说明在<code>try</code>语句块中执行完毕后自动关闭了<code>socket</code>和<code>stream</code>。</p>
<p>这种写法还真是第一次见，孤陋寡闻了。。。</p>
<p>其实，这是Java7中提供的一个新的异常处理机制，它能够很容易地关闭在try-catch语句块中使用的资源。</p>
<p>还有一个名字，叫做<em>try-with-resources</em></p>
<h2 id="旧的代码风格"><a href="#旧的代码风格" class="headerlink" title="旧的代码风格"></a>旧的代码风格</h2><p>在Java7以前，代码中使用的资源需要被明确地关闭，这个在写的时候就会有些繁琐，例如下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    InputStream in = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        in = <span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> c = in.read();</div><div class="line">            <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            System.out.println((<span class="keyword">char</span>) c);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (in != <span class="keyword">null</span>)</div><div class="line">            in.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，上面代码在执行<code>new FileInputStream(&quot;test.txt&quot;)</code>、<code>in.read()</code>和<code>in.close()</code>时都可能抛出异常。</p>
<p>那么到这里可以分析一下，如果在<code>try</code>语句块中抛出了异常，<code>finally</code>语句块仍然会执行，然而<code>finally</code>语句块在执行<code>in.close()</code>时也可能会抛出异常。</p>
<p>这时问题来了，如果<code>try</code>语句块中抛出了异常，<code>finally</code>语句块也抛出了异常，那么到底是哪个异常会在方法返回时向外传播？</p>
<p>其实在上面的代码中，如果都抛出异常，则在<code>finally</code>语句块中抛出的异常会向外传播，<code>try</code>语句块中的异常被抑制了。</p>
<h2 id="try-with-resources代码风格"><a href="#try-with-resources代码风格" class="headerlink" title="try-with-resources代码风格"></a>try-with-resources代码风格</h2><p>在Java7之后，上面的代码还可以这么写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>);) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> c = in.read();</div><div class="line">            <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            System.out.println((<span class="keyword">char</span>) c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码只是把InputStream放到了<code>try</code>语句后面的小括号中来声明创建一个<code>FileInputStream</code>对象，在<code>try</code>语句块运行结束时会对<code>FileInputStream</code>对象自动进行关闭。</p>
<p>为什么会这样？</p>
<p>因为<code>FileInputStream</code>实现了<code>java.lang.AutoCloseable</code>接口，可以看下对应的类结构：</p>
<img src="/2016/12/02/Java7中的try-with-resources/屏幕快照%202016-12-01%20下午11.56.07.png" alt="屏幕快照 2016-12-01 下午11.56.07.png" title="">
<p>所有实现了<code>java.lang.AutoCloseable</code>接口的类都可以在<code>try-with-resources</code>结构中使用。</p>
<p>那么再考虑一下之前提到过的问题，如果这时对<code>FileInputStream</code>对象自动关闭（会调用close方法）时抛出了异常，并且<code>in.read()</code>也抛出了异常，那么在方法执行完毕时，<code>in.read()</code>抛出的异常会向外传播，<code>FileInputStream</code>对象关闭时抛出的异常将被抑制。这与之前旧的代码风格的异常抛出方式正好相反。</p>
<h2 id="try-with-resources使用多个资源"><a href="#try-with-resources使用多个资源" class="headerlink" title="try-with-resources使用多个资源"></a>try-with-resources使用多个资源</h2><p>在<code>try-with-resources</code>中可以使用多个资源，而且多个资源都能被自动关闭，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> (</div><div class="line">            FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>);</div><div class="line">            BufferedInputStream bfIn = <span class="keyword">new</span> BufferedInputStream((in));</div><div class="line">    ) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> c = bfIn.read();</div><div class="line">            <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            System.out.println((<span class="keyword">char</span>) c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里创建了两个资源：<code>FileInputStream</code>和<code>BufferedInputStream</code>。当<code>try</code>语句块运行结束时，这两个资源都会被自动关闭，而且关闭的顺序与创建的顺序相反（先关闭<code>BufferedInputStream</code>，后关闭<code>FileInputStream</code>），稍后会验证。</p>
<h2 id="AutoCloseable接口"><a href="#AutoCloseable接口" class="headerlink" title="AutoCloseable接口"></a>AutoCloseable接口</h2><p>先来查看一下<code>java.lang.AutoCloseable</code>接口的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，只有一个<code>close()</code>方法。</p>
<h2 id="AutoCloseable接口的实现"><a href="#AutoCloseable接口的实现" class="headerlink" title="AutoCloseable接口的实现"></a>AutoCloseable接口的实现</h2><p>下面自定义一个类，来实现这个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm closing..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类实现了<code>AutoCloseable</code>接口，下面来使用这个类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">try</span> (</div><div class="line">            AutoCloseableTest test = <span class="keyword">new</span> AutoCloseableTest();</div><div class="line">    ) &#123;</div><div class="line">        test.say();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行查看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hello World</div><div class="line">I&apos;m closing...</div></pre></td></tr></table></figure>
<h2 id="验证多个资源的关闭"><a href="#验证多个资源的关闭" class="headerlink" title="验证多个资源的关闭"></a>验证多个资源的关闭</h2><p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">try</span> (</div><div class="line">                AutoCloseableTest test = <span class="keyword">new</span> AutoCloseableTest();</div><div class="line">                AutoCloseableTest2 test2 = <span class="keyword">new</span> AutoCloseableTest2();</div><div class="line">        ) &#123;</div><div class="line">            test.say();</div><div class="line">            test2.say();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm in AutoCloseableTest"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"AutoCloseableTest is closing..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest2</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm in AutoCloseableTest2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"AutoCloseableTest2 is closing..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后的输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">I&apos;m in AutoCloseableTest</div><div class="line">I&apos;m in AutoCloseableTest2</div><div class="line">AutoCloseableTest2 is closing...</div><div class="line">AutoCloseableTest is closing...</div></pre></td></tr></table></figure>
<p>可以看到，两个资源都被自动关闭了，而且顺序与创建的顺序相反。</p>
<h2 id="验证被抑制的异常"><a href="#验证被抑制的异常" class="headerlink" title="验证被抑制的异常"></a>验证被抑制的异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            call();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> (</div><div class="line">                AutoCloseableTest test = <span class="keyword">new</span> AutoCloseableTest();</div><div class="line">        ) &#123;</div><div class="line">            test.say();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            System.out.println(<span class="string">"I'm in finally"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> <span class="keyword">throws</span> MyException1 </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException1(<span class="string">"I'm MyException1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2(<span class="string">"I'm MyException2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException1</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException1</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException2</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码定义了两个异常，在<code>main</code>方法中捕获并输出异常栈，结果如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">MyException1: I'm MyException1</div><div class="line">	at AutoCloseableTest.say(Test.java:31)</div><div class="line">	at Test.call(Test.java:21)</div><div class="line">	at Test.main(Test.java:9)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:497)</div><div class="line">	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)</div><div class="line">	Suppressed: MyException2: I'm MyException2</div><div class="line">		at AutoCloseableTest.close(Test.java:36)</div><div class="line">		at Test.call(Test.java:22)</div><div class="line">		... 6 more</div><div class="line">I'm in finally</div></pre></td></tr></table></figure>
<p>可见，<code>try-with-resources</code>中自动关闭时调用<code>close()</code>方法抛出的异常被抑制了，捕获到的是<code>say()</code>方法抛出的异常<code>MyException1</code>。</p>
<h2 id="验证自动关闭和finally的执行顺序"><a href="#验证自动关闭和finally的执行顺序" class="headerlink" title="验证自动关闭和finally的执行顺序"></a>验证自动关闭和finally的执行顺序</h2><p>从上面代码可以看出，先输出了异常的信息，然后才输出<code>I&#39;m in finally</code>，可见，在<code>finally</code>语句块执行之前自动关闭就已经被执行了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从以上的分析可以看出，<code>try-with-resources</code>风格可以实现以下几种情况：</p>
<ul>
<li>任何实现了AutoCloseable接口的类，在<code>try()</code>里声明该类实例的时候，在<code>try</code>语句块结束时，都会调用该实例的<code>close()</code>方法</li>
<li>调用<code>close</code>方法时抛出的异常会被<code>try</code>语句块中抛出的异常抑制</li>
<li>在<code>finally</code>语句块执行前，<code>try()</code>中声明实例的<code>close()</code>方法总被调用</li>
<li><code>try()</code>中声明实例的<code>close()</code>方法总会被调用，即使<code>try</code>语句块中出现了异常</li>
<li><code>try()</code>中声明实例的关闭顺序与创建顺序相反</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码：Catalina启动流程]]></title>
      <url>http://www.ideabuffer.cn/2016/11/27/Tomcat%E6%BA%90%E7%A0%81%EF%BC%9ACatalina%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>上篇文章分析了<code>Bootstrap</code>类的启动流程，可以知道，<code>Bootstrap</code>实际上是调用了<code>Catalina</code>类的对象来实现Tomcat的启动的，这篇文章来介绍一下<code>Catalina</code>类的启动流程。</p>
<p>回顾一下<code>Bootstrap</code>中main方法执行启动时的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</div><div class="line">    daemon.setAwait(<span class="keyword">true</span>);</div><div class="line">    daemon.load(args);</div><div class="line">    daemon.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面介绍Catalina类中的方法。</p>
<a id="more"></a>
<h2 id="await方法"><a href="#await方法" class="headerlink" title="await方法"></a>await方法</h2><p><code>daemon.setAwait(true);</code>表示该Tomcat已经执行了启动，也是调用了<code>Catalina</code>中的<code>setAwait</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Await and shutdown.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    getServer().await();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里又调用的<code>Server</code>的<code>await</code>方法，<code>await</code>方法的作用就是判断当前启动的Server所要绑定的端口（默认是8005）是否被占用，如果被占用，则会抛出以下异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">严重: StandardServer.await: create[localhost:8005]: </div><div class="line">java.net.BindException: Address already in use</div><div class="line">	at java.net.PlainSocketImpl.socketBind(Native Method)</div><div class="line">	at java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:387)</div><div class="line">	at java.net.ServerSocket.bind(ServerSocket.java:375)</div><div class="line">	at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:237)</div><div class="line">	at org.apache.catalina.core.StandardServer.await(StandardServer.java:441)</div><div class="line">	at org.apache.catalina.startup.Catalina.await(Catalina.java:743)</div><div class="line">	at org.apache.catalina.startup.Catalina.start(Catalina.java:689)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:497)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:355)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:495)</div></pre></td></tr></table></figure>
<h2 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h2><p><code>Bootstrap</code>类中的<code>load</code>方法会调用<code>Catalina</code>中的<code>load</code>方法，<code>Catalina</code>中的<code>load</code>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Start a new server instance.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line"></div><div class="line">    initDirs();</div><div class="line"></div><div class="line">    <span class="comment">// Before digester - it may be needed</span></div><div class="line">    initNaming();</div><div class="line"></div><div class="line">    <span class="comment">//使用Digester创建server.xml文件的对象，生成相应的处理规则</span></div><div class="line">    <span class="comment">// Create and execute our Digester</span></div><div class="line">    Digester digester = createStartDigester();</div><div class="line"></div><div class="line">    InputSource inputSource = <span class="keyword">null</span>;</div><div class="line">    InputStream inputStream = <span class="keyword">null</span>;</div><div class="line">    File file = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 获取配置文件，server.xml</span></div><div class="line">            file = configFile();</div><div class="line">            inputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">            inputSource = <span class="keyword">new</span> InputSource(file.toURI().toURL().toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                log.debug(sm.getString(<span class="string">"catalina.configFail"</span>, file), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                inputStream = getClass().getClassLoader()</div><div class="line">                    .getResourceAsStream(getConfigFile());</div><div class="line">                inputSource = <span class="keyword">new</span> InputSource</div><div class="line">                    (getClass().getClassLoader()</div><div class="line">                     .getResource(getConfigFile()).toString());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                    log.debug(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                            getConfigFile()), e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This should be included in catalina.jar</span></div><div class="line">        <span class="comment">// Alternative: don't bother with xml, just create it manually.</span></div><div class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                inputStream = getClass().getClassLoader()</div><div class="line">                        .getResourceAsStream(<span class="string">"server-embed.xml"</span>);</div><div class="line">                inputSource = <span class="keyword">new</span> InputSource</div><div class="line">                (getClass().getClassLoader()</div><div class="line">                        .getResource(<span class="string">"server-embed.xml"</span>).toString());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                    log.debug(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                            <span class="string">"server-embed.xml"</span>), e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span> || inputSource == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span>  (file == <span class="keyword">null</span>) &#123;</div><div class="line">                log.warn(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                        getConfigFile() + <span class="string">"] or [server-embed.xml]"</span>));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.warn(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                        file.getAbsolutePath()));</div><div class="line">                <span class="keyword">if</span> (file.exists() &amp;&amp; !file.canRead()) &#123;</div><div class="line">                    log.warn(<span class="string">"Permissions incorrect, read permission is not allowed on the file."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inputSource.setByteStream(inputStream);</div><div class="line">            </div><div class="line">            <span class="comment">//将Catalina对象压入栈底，server对象生成之后会调用当前对象的setServer方法来设置server对象</span></div><div class="line">            digester.push(<span class="keyword">this</span>);</div><div class="line">            digester.parse(inputSource);</div><div class="line">        &#125; <span class="keyword">catch</span> (SAXParseException spe) &#123;</div><div class="line">            log.warn(<span class="string">"Catalina.start using "</span> + getConfigFile() + <span class="string">": "</span> +</div><div class="line">                    spe.getMessage());</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.warn(<span class="string">"Catalina.start using "</span> + getConfigFile() + <span class="string">": "</span> , e);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                inputStream.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getServer().setCatalina(<span class="keyword">this</span>);</div><div class="line">    getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</div><div class="line">    getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</div><div class="line"></div><div class="line">    <span class="comment">// Stream redirection</span></div><div class="line">    initStreams();</div><div class="line"></div><div class="line">    <span class="comment">// Start the new server</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 初始化server</span></div><div class="line">        getServer().init();</div><div class="line">    &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">        <span class="keyword">if</span> (Boolean.getBoolean(<span class="string">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span>)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.Error(e);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            log.error(<span class="string">"Catalina.start"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">    <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</div><div class="line">        log.info(<span class="string">"Initialization processed in "</span> + ((t2 - t1) / <span class="number">1000000</span>) + <span class="string">" ms"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法主要的工作是：</p>
<ol>
<li>解析server.xml配置文件</li>
<li>根据server.xml文件创建对象，包括server，listener，service，connector，container等等</li>
<li>初始化上面创建的对象</li>
</ol>
<h2 id="server-xml文件结构"><a href="#server-xml文件结构" class="headerlink" title="server.xml文件结构"></a>server.xml文件结构</h2><p>在往下看之前，还是说一下<code>server.xml</code>的文件结构吧，也好参考的代码做对比，结构如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"UserDatabase"</span> <span class="attr">auth</span>=<span class="string">"Container"</span></span></div><div class="line">              <span class="attr">type</span>=<span class="string">"org.apache.catalina.UserDatabase"</span></div><div class="line">              <span class="attr">description</span>=<span class="string">"User database that can be updated and saved"</span></div><div class="line">              <span class="attr">factory</span>=<span class="string">"org.apache.catalina.users.MemoryUserDatabaseFactory"</span></div><div class="line">              <span class="attr">pathname</span>=<span class="string">"conf/tomcat-users.xml"</span> /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></div><div class="line"></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span></span></div><div class="line">        <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">minSpareThreads</span>=<span class="string">"4"</span>/&gt;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></div><div class="line">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</div><div class="line">   ...</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></div><div class="line"></div><div class="line">     </div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords</span></div><div class="line">           via a brute-force attack --&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span></div><div class="line">               <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span>/&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></div><div class="line">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.authenticator.SingleSignOn"</span> /&gt;</span></div><div class="line">        ...</div><div class="line">        <span class="tag">&lt;<span class="name">Context</span>&gt;</span>...<span class="tag">&lt;/<span class="name">Context</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里列出了大概的结构，接下来说明是解析<code>server.xml</code>的流程。</p>
<h2 id="createStartDigester方法"><a href="#createStartDigester方法" class="headerlink" title="createStartDigester方法"></a>createStartDigester方法</h2><p>该方法负责创建一个<code>Digester</code>对象，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Create and configure the Digester we will be using for startup.</div><div class="line"> * <span class="doctag">@return</span> the main digester to parse server.xml</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> Digester <span class="title">createStartDigester</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> t1=System.currentTimeMillis();</div><div class="line">    <span class="comment">// Initialize the digester</span></div><div class="line">    Digester digester = <span class="keyword">new</span> Digester();</div><div class="line">    digester.setValidating(<span class="keyword">false</span>);</div><div class="line">    digester.setRulesValidation(<span class="keyword">true</span>);</div><div class="line">    HashMap&lt;Class&lt;?&gt;, List&lt;String&gt;&gt; fakeAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    ArrayList&lt;String&gt; attrs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    attrs.add(<span class="string">"className"</span>);</div><div class="line">    fakeAttributes.put(Object.class, attrs);</div><div class="line">    digester.setFakeAttributes(fakeAttributes);</div><div class="line">    digester.setUseContextClassLoader(<span class="keyword">true</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 增加创建server对象的规则</span></div><div class="line">    <span class="comment">// Configure the actions we will be using</span></div><div class="line">    digester.addObjectCreate(<span class="string">"Server"</span>,</div><div class="line">                             <span class="string">"org.apache.catalina.core.StandardServer"</span>,</div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    <span class="comment">// 增加设置Server属性的规则，用户在Server对象创建完之后设置Server对象的属性值</span></div><div class="line">    digester.addSetProperties(<span class="string">"Server"</span>);</div><div class="line">    <span class="comment">// Server对象创建完成后，会调用它前一个对象的setServer方法，并把自己作为参数</span></div><div class="line">    digester.addSetNext(<span class="string">"Server"</span>,</div><div class="line">                        <span class="string">"setServer"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.Server"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/GlobalNamingResources"</span>,</div><div class="line">                             <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/GlobalNamingResources"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/GlobalNamingResources"</span>,</div><div class="line">                        <span class="string">"setGlobalNamingResources"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//创建listener，其中第二个参数为空，表示必须在配置文件中指定className</span></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Listener"</span>,</div><div class="line">                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Listener"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Listener"</span>,</div><div class="line">                        <span class="string">"addLifecycleListener"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service"</span>,</div><div class="line">                             <span class="string">"org.apache.catalina.core.StandardService"</span>,</div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service"</span>,</div><div class="line">                        <span class="string">"addService"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.Service"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Listener"</span>,</div><div class="line">                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Listener"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Listener"</span>,</div><div class="line">                        <span class="string">"addLifecycleListener"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//Executor</span></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Executor"</span>,</div><div class="line">                     <span class="string">"org.apache.catalina.core.StandardThreadExecutor"</span>,</div><div class="line">                     <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Executor"</span>);</div><div class="line"></div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Executor"</span>,</div><div class="line">                        <span class="string">"addExecutor"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.Executor"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    digester.addRule(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                     <span class="keyword">new</span> ConnectorCreateRule());</div><div class="line">    digester.addRule(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                     <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> String[]&#123;<span class="string">"executor"</span>, <span class="string">"sslImplementationName"</span>&#125;));</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                        <span class="string">"addConnector"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.connector.Connector"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>,</div><div class="line">                             <span class="string">"org.apache.tomcat.util.net.SSLHostConfig"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>,</div><div class="line">            <span class="string">"addSslHostConfig"</span>,</div><div class="line">            <span class="string">"org.apache.tomcat.util.net.SSLHostConfig"</span>);</div><div class="line"></div><div class="line">    digester.addRule(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,</div><div class="line">                     <span class="keyword">new</span> CertificateCreateRule());</div><div class="line">    digester.addRule(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,</div><div class="line">                     <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> String[]&#123;<span class="string">"type"</span>&#125;));</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,</div><div class="line">                        <span class="string">"addCertificate"</span>,</div><div class="line">                        <span class="string">"org.apache.tomcat.util.net.SSLHostConfigCertificate"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Connector/Listener"</span>,</div><div class="line">                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Connector/Listener"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/Listener"</span>,</div><div class="line">                        <span class="string">"addLifecycleListener"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>,</div><div class="line">                              <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                              <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>,</div><div class="line">                        <span class="string">"addUpgradeProtocol"</span>,</div><div class="line">                        <span class="string">"org.apache.coyote.UpgradeProtocol"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Add RuleSets for nested elements</span></div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/GlobalNamingResources/"</span>));</div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> EngineRuleSet(<span class="string">"Server/Service/"</span>));</div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">"Server/Service/Engine/"</span>));</div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> ContextRuleSet(<span class="string">"Server/Service/Engine/Host/"</span>));</div><div class="line">    addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Host/Cluster/"</span>);</div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/Service/Engine/Host/Context/"</span>));</div><div class="line"></div><div class="line">    <span class="comment">// When the 'engine' is found, set the parentClassLoader.</span></div><div class="line">    digester.addRule(<span class="string">"Server/Service/Engine"</span>,</div><div class="line">                     <span class="keyword">new</span> SetParentClassLoaderRule(parentClassLoader));</div><div class="line">    addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Cluster/"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2=System.currentTimeMillis();</div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">        log.debug(<span class="string">"Digester for server.xml created "</span> + ( t2-t1 ));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (digester);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面我只注释了创建Server对象的部分，其他的原理都类似，就不多说了，这里要注意一个地方：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server对象创建完成后，会调用它前一个对象的setServer方法，并把自己作为参数</span></div><div class="line">digester.addSetNext(<span class="string">"Server"</span>, <span class="string">"setServer"</span>, <span class="string">"org.apache.catalina.Server"</span>);</div></pre></td></tr></table></figure>
<p>回顾一下<code>load</code>方法中的这段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将Catalina对象压入栈底，server对象生成之后会调用当前对象的setServer方法来设置server对象</span></div><div class="line">digester.push(<span class="keyword">this</span>);</div><div class="line">digester.parse(inputSource);</div></pre></td></tr></table></figure>
<p>意思就是把当前的<code>Catalina</code>对象压入栈底，然后解析配置文件。所以在Server对象创建完成后，会调用<code>Catalina</code>对象的setServer方法。</p>
<p>这里简单介绍一下<code>Digester</code>解析的原理：</p>
<ul>
<li>Digester实例有一个内部栈用来临时存储对象。当addObjectCreate方法实例化一个类时，就将结果放到栈中。</li>
<li>当调用两个addObjectCreate方法时，第一个对象首先放入栈中，接着是第二个对象。</li>
<li>addSetNext方法用于创建两个对象之间的关系，其通过调用第一个对象指定的方法并以第二个对象作为参数传递给这个方法。</li>
</ul>
<p>有关<code>Digester</code>库的更详细的用法，请自行查找相关资料。</p>
<h2 id="start方法"><a href="#start方法" class="headerlink" title="start方法"></a>start方法</h2><p>这里才是真正启动tomcat的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Start a new server instance.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</div><div class="line">        load();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</div><div class="line">        log.fatal(<span class="string">"Cannot start server. Server instance is not configured."</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line"></div><div class="line">    <span class="comment">// Start the new server</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 启动server</span></div><div class="line">        getServer().start();</div><div class="line">    &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">        log.fatal(sm.getString(<span class="string">"catalina.serverStartFail"</span>), e);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            getServer().destroy();</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e1) &#123;</div><div class="line">            log.debug(<span class="string">"destroy() failed for failed Server "</span>, e1);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">    <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</div><div class="line">        log.info(<span class="string">"Server startup in "</span> + ((t2 - t1) / <span class="number">1000000</span>) + <span class="string">" ms"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Register shutdown hook</span></div><div class="line">    <span class="keyword">if</span> (useShutdownHook) &#123;</div><div class="line">        <span class="keyword">if</span> (shutdownHook == <span class="keyword">null</span>) &#123;</div><div class="line">            shutdownHook = <span class="keyword">new</span> CatalinaShutdownHook();</div><div class="line">        &#125;</div><div class="line">        Runtime.getRuntime().addShutdownHook(shutdownHook);</div><div class="line"></div><div class="line">        <span class="comment">// If JULI is being used, disable JULI's shutdown hook since</span></div><div class="line">        <span class="comment">// shutdown hooks run in parallel and log messages may be lost</span></div><div class="line">        <span class="comment">// if JULI's hook completes before the CatalinaShutdownHook()</span></div><div class="line">        LogManager logManager = LogManager.getLogManager();</div><div class="line">        <span class="keyword">if</span> (logManager <span class="keyword">instanceof</span> ClassLoaderLogManager) &#123;</div><div class="line">            ((ClassLoaderLogManager) logManager).setUseShutdownHook(</div><div class="line">                    <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (await) &#123;</div><div class="line">        await();</div><div class="line">        stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>await</code>在开头已经讨论过，就不说了。这里的<code>getServer().start()</code>是负责启动server对象的，其实server对象需要做的只是启动<code>globalNamingResources</code>和<code>service</code>，进而会启动整个tomcat，通过上面给出的<code>server.xml</code>文件的结构也可以知道，因为<code>GlobalNamingResources</code>和<code>Service</code>是<code>Server</code>的子元素。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，<code>Catalina</code>的初始化和启动工作流程算是完成了。</p>
<p>由<a href="/2016/11/26/Tomcat源码：Bootstrap启动流程/">上一篇：Tomcat源码：Bootstrap启动流程</a>和这篇文章来看，我们已经大概了解了tomcat的启动过程，所以可以总结出来tomcat的各个组件的层次关系大概如下图所示：</p>
<img src="/2016/11/27/Tomcat源码：Catalina启动流程/tomcat-components.png" alt="tomcat-components.png" title="">
<p>层次结构还算比较清晰的，接下来就是各个组件的初始化和启动的工作流程，这些流程后续有时间也会详细讨论。</p>
<p>睡觉。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码：Bootstrap启动流程]]></title>
      <url>http://www.ideabuffer.cn/2016/11/26/Tomcat%E6%BA%90%E7%A0%81%EF%BC%9ABootstrap%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>Tomcat的启动流程从整体上来说并不算复杂，启动的入口就是从Bootstrap类的main方法开始的，这篇文章就让我们来看一下Bootstrap这个类都干了些什么。</p>
<h2 id="Bootstrap类中的变量"><a href="#Bootstrap类中的变量" class="headerlink" title="Bootstrap类中的变量"></a>Bootstrap类中的变量</h2><p>首先看下Bootstrap都定义了哪些变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bootstrap类的引用</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Bootstrap daemon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// 这两个路径一般都是tomcat的根目录，即webapp的父目录</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> File catalinaBaseFile;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> File catalinaHomeFile;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATH_PATTERN = Pattern.compile(<span class="string">"(\".*?\")|(([^,])*)"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 这个其实就是`org.apache.catalina.startup.Catalina`对象，它是真正负责启动server的对象</span></div><div class="line"><span class="keyword">private</span> Object catalinaDaemon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// tomcat涉及到的类加载器</span></div><div class="line">ClassLoader commonLoader = <span class="keyword">null</span>;</div><div class="line">ClassLoader catalinaLoader = <span class="keyword">null</span>;</div><div class="line">ClassLoader sharedLoader = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Tomcat的类加载器"><a href="#Tomcat的类加载器" class="headerlink" title="Tomcat的类加载器"></a>Tomcat的类加载器</h2><p>首先看下JVM的类加载器的结构：</p>
<img src="/2016/11/26/Tomcat源码：Bootstrap启动流程/jvm-class-loader.png" alt="jvm-class-loader.png" title="">
<ul>
<li>Bootstrap：引导类加载器，负责加载<code>rt.jar</code></li>
<li>Extension：扩展类加载器，负责加载<code>jre/lib/ext</code>中的jar</li>
<li>System：系统类加载器，负责加载指定classpath中的jar</li>
</ul>
<p>下面来看一下tomcat的类加载器的结构：</p>
<img src="/2016/11/26/Tomcat源码：Bootstrap启动流程/tomcat-class-loader.png" alt="tomcat-class-loader.png" title="">
<ul>
<li>Bootstrap：负责加载JVM启动时所需要的类以及<code>$JAVA_HOME/jre/lib/ext</code>目录中的类。相当于Java类加载器的Bootstrap和Extension。</li>
<li>System：负责加载<code>$CATALINA_HOME/bin</code>目录下的类，比如<code>bootstrap.jar</code></li>
<li>Common：负责加载tomcat使用以及应用通用的一些类，位于<code>$CATALINA_HOME/lib</code>或<code>$CATALINA_BASE/lib</code>下的jar，比如<code>servlet-api.jar</code></li>
<li>WebappX：每个应用在部署后，都会创建一个唯一的类加载器。该类加载器会加载位于该应用下的<code>WEB-INF/lib</code>中的jar文件和<code>WEB-INF/classes</code>中的class文件</li>
</ul>
<p>在tomcat中，如果要加载一个类，那么他的加载顺序为：</p>
<ol>
<li><p>使用bootstrap引导类加载器加载</p>
</li>
<li><p>使用system系统类加载器加载</p>
</li>
<li><p>使用应用类加载器在<code>WEB-INF/classes</code>中加载</p>
</li>
<li><p>使用应用类加载器在<code>WEB-INF/lib</code>中加载</p>
</li>
<li><p>使用common类加载器在<code>$CATALINA_HOME/lib</code>或<code>$CATALINA_BASE/lib</code>中加载</p>
</li>
</ol>
<p>参考：<a href="http://tomcat.apache.org/tomcat-8.5-doc/class-loader-howto.html" target="_blank" rel="external">tomcat-8.5-doc</a></p>
<h2 id="static代码块"><a href="#static代码块" class="headerlink" title="static代码块"></a>static代码块</h2><p>在static代码块中，主要是对一些路径进行初始化。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    <span class="comment">//当前tomcat的路径，其实就是tomcat所在的目录的路径</span></div><div class="line">    <span class="comment">// Will always be non-null</span></div><div class="line">    String userDir = System.getProperty(<span class="string">"user.dir"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 该路径是设置的catalina.home指定的路径</span></div><div class="line">    <span class="comment">// Home first</span></div><div class="line">    String home = System.getProperty(Globals.CATALINA_HOME_PROP);</div><div class="line">    File homeFile = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (home != <span class="keyword">null</span>) &#123;</div><div class="line">        File f = <span class="keyword">new</span> File(home);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            homeFile = f.getCanonicalFile();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">            homeFile = f.getAbsoluteFile();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (homeFile == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// First fall-back. See if current directory is a bin directory</span></div><div class="line">        <span class="comment">// in a normal Tomcat install</span></div><div class="line">        File bootstrapJar = <span class="keyword">new</span> File(userDir, <span class="string">"bootstrap.jar"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bootstrapJar.exists()) &#123;</div><div class="line">            File f = <span class="keyword">new</span> File(userDir, <span class="string">".."</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                homeFile = f.getCanonicalFile();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">                homeFile = f.getAbsoluteFile();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (homeFile == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Second fall-back. Use current directory</span></div><div class="line">        File f = <span class="keyword">new</span> File(userDir);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            homeFile = f.getCanonicalFile();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">            homeFile = f.getAbsoluteFile();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    catalinaHomeFile = homeFile;</div><div class="line">    System.setProperty(</div><div class="line">            Globals.CATALINA_HOME_PROP, catalinaHomeFile.getPath());</div><div class="line"></div><div class="line">    <span class="comment">// Then base</span></div><div class="line">    String base = System.getProperty(Globals.CATALINA_BASE_PROP);</div><div class="line">    </div><div class="line">    <span class="comment">// 可见，如果没有设置base路径，默认就是catalina.home指定的路径</span></div><div class="line">    <span class="keyword">if</span> (base == <span class="keyword">null</span>) &#123;</div><div class="line">        catalinaBaseFile = catalinaHomeFile;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        File baseFile = <span class="keyword">new</span> File(base);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            baseFile = baseFile.getCanonicalFile();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">            baseFile = baseFile.getAbsoluteFile();</div><div class="line">        &#125;</div><div class="line">        catalinaBaseFile = baseFile;</div><div class="line">    &#125;</div><div class="line">    System.setProperty(</div><div class="line">            Globals.CATALINA_BASE_PROP, catalinaBaseFile.getPath());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上可见，主要是设置了一些运行时所需要的路径，例如要设置catalina.home，如果你要运行tomcat源码的话，可以在启动选项的VM options中设置<code>-Dcatalina.home=&quot;/Users/sangjian/dev/source-files/apache-tomcat-8.5.4-src/output/build&quot;</code>来指定。例如：</p>
<img src="/2016/11/26/Tomcat源码：Bootstrap启动流程/B2439EFA-6276-425A-A807-C66B975E59F6.png" alt="B2439EFA-6276-425A-A807-C66B975E59F6.png" title="">
<h2 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Main method and entry point when starting Tomcat via the provided</div><div class="line"> * scripts.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> args Command line arguments to be processed</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//创建Bootstarp类型的对象  </span></div><div class="line">        <span class="comment">// Don't set daemon until init() has completed</span></div><div class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bootstrap.init();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            handleThrowable(t);</div><div class="line">            t.printStackTrace();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        daemon = bootstrap;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// When running as a service the call to stop will be on a new</span></div><div class="line">        <span class="comment">// thread so make sure the correct class loader is used to prevent</span></div><div class="line">        <span class="comment">// a range of class not found exceptions.</span></div><div class="line">        Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String command = <span class="string">"start"</span>;</div><div class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            command = args[args.length - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (command.equals(<span class="string">"startd"</span>)) &#123;</div><div class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"start"</span>;</div><div class="line">            daemon.load(args);</div><div class="line">            daemon.start();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stopd"</span>)) &#123;</div><div class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"stop"</span>;</div><div class="line">            daemon.stop();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</div><div class="line">            daemon.setAwait(<span class="keyword">true</span>);</div><div class="line">            daemon.load(args);</div><div class="line">            daemon.start();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stop"</span>)) &#123;</div><div class="line">            daemon.stopServer(args);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"configtest"</span>)) &#123;</div><div class="line">            daemon.load(args);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span>==daemon.getServer()) &#123;</div><div class="line">                System.exit(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            System.exit(<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            log.warn(<span class="string">"Bootstrap: command \""</span> + command + <span class="string">"\" does not exist."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        <span class="comment">// Unwrap the Exception for clearer error reporting</span></div><div class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</div><div class="line">                t.getCause() != <span class="keyword">null</span>) &#123;</div><div class="line">            t = t.getCause();</div><div class="line">        &#125;</div><div class="line">        handleThrowable(t);</div><div class="line">        t.printStackTrace();</div><div class="line">        System.exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实整个流程很简单，总结如下：</p>
<ol>
<li>创建一个自身对象并调用<code>init</code>方法初始化，赋值给daemon</li>
<li>判断参数，默认是start</li>
<li>执行<code>daemon.load</code>方法，判断参数类型，反射调用<code>org.apache.catalina.startup.Catalina</code>对象的<code>load</code>方法</li>
<li>执行<code>daemon.start</code>方法，反射调用<code>org.apache.catalina.startup.Catalina</code>对象的<code>start</code>方法</li>
</ol>
<h2 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize daemon.</div><div class="line"> * <span class="doctag">@throws</span> Exception Fatal initialization error</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 初始化类加载器</span></div><div class="line">    initClassLoaders();</div><div class="line"></div><div class="line">    <span class="comment">// 设置当前线程的类加载器</span></div><div class="line">    Thread.currentThread().setContextClassLoader(catalinaLoader);</div><div class="line"></div><div class="line">    SecurityClassLoad.securityClassLoad(catalinaLoader);</div><div class="line"></div><div class="line">    <span class="comment">// Load our startup class and call its process() method</span></div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">        log.debug(<span class="string">"Loading startup class"</span>);</div><div class="line">    Class&lt;?&gt; startupClass =</div><div class="line">        catalinaLoader.loadClass</div><div class="line">        (<span class="string">"org.apache.catalina.startup.Catalina"</span>);</div><div class="line">    Object startupInstance = startupClass.newInstance();</div><div class="line"></div><div class="line">    <span class="comment">// Set the shared extensions class loader</span></div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">        log.debug(<span class="string">"Setting startup class properties"</span>);</div><div class="line">    String methodName = <span class="string">"setParentClassLoader"</span>;</div><div class="line">    Class&lt;?&gt; paramTypes[] = <span class="keyword">new</span> Class[<span class="number">1</span>];</div><div class="line">    paramTypes[<span class="number">0</span>] = Class.forName(<span class="string">"java.lang.ClassLoader"</span>);</div><div class="line">    Object paramValues[] = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="comment">/* </span></div><div class="line">     * sharedLoader为加载$CATALINA_HOME/lib目录的类加载器</div><div class="line">     * 其实在Tomcat5之后，并取消了catalinaLoader和sharedLoader，而默认只设置了commonLoader</div><div class="line">     * 在默认配置的情况下，这里使用sharedLoader的来加载class时，还是会通过commonLoader来加载</div><div class="line">     * 因为sharedLoader的parentClassLoader是catalinaLoader，catalinaLoder的parentClassLoader是commonLoader</div><div class="line">     * 但在这里，这3个加载器都是commonLoader这个对象，这个稍后会说到</div><div class="line">     */</div><div class="line">    paramValues[<span class="number">0</span>] = sharedLoader;</div><div class="line">    Method method =</div><div class="line">        startupInstance.getClass().getMethod(methodName, paramTypes);</div><div class="line">    </div><div class="line">    <span class="comment">// 设置org.apache.catalina.startup.Catalina对象的parentClassloader</span></div><div class="line">    method.invoke(startupInstance, paramValues);</div><div class="line"></div><div class="line">    catalinaDaemon = startupInstance;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>init方法主要做了以下几件事：</p>
<ol>
<li>初始化类加载器</li>
<li>设置当前线程的类加载器</li>
<li>创建<code>org.apache.catalina.startup.Catalina</code>对象<code>startupInstance</code></li>
<li>反射调用<code>org.apache.catalina.startup.Catalina</code>对象的<code>setParentClassLoader</code>方法，设置父加载器为<code>sharedLoader</code></li>
<li>将<code>startupInstance</code>赋值给<code>catalinaDaemon</code></li>
</ol>
<h2 id="initClassLoaders和createClassLoader方法"><a href="#initClassLoaders和createClassLoader方法" class="headerlink" title="initClassLoaders和createClassLoader方法"></a>initClassLoaders和createClassLoader方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initClassLoaders</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        commonLoader = createClassLoader(<span class="string">"common"</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span>( commonLoader == <span class="keyword">null</span> ) &#123;</div><div class="line">            <span class="comment">// no config file, default to this loader - we might be in a 'single' env.</span></div><div class="line">            commonLoader=<span class="keyword">this</span>.getClass().getClassLoader();</div><div class="line">        &#125;</div><div class="line">        catalinaLoader = createClassLoader(<span class="string">"server"</span>, commonLoader);</div><div class="line">        sharedLoader = createClassLoader(<span class="string">"shared"</span>, commonLoader);</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        handleThrowable(t);</div><div class="line">        log.error(<span class="string">"Class loader creation threw exception"</span>, t);</div><div class="line">        System.exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> ClassLoader <span class="title">createClassLoader</span><span class="params">(String name, ClassLoader parent)</span></span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    String value = CatalinaProperties.getProperty(name + <span class="string">".loader"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 如果catalina.properties文件中没有值，则返回parent</span></div><div class="line">    <span class="keyword">if</span> ((value == <span class="keyword">null</span>) || (value.equals(<span class="string">""</span>)))</div><div class="line">        <span class="keyword">return</span> parent;</div><div class="line"></div><div class="line">    value = replace(value);</div><div class="line"></div><div class="line">    List&lt;Repository&gt; repositories = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    String[] repositoryPaths = getPaths(value);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (String repository : repositoryPaths) &#123;</div><div class="line">        <span class="comment">// Check for a JAR URL repository</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">            URL url = <span class="keyword">new</span> URL(repository);</div><div class="line">            repositories.add(</div><div class="line">                    <span class="keyword">new</span> Repository(repository, RepositoryType.URL));</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">            <span class="comment">// Ignore</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Local repository</span></div><div class="line">        <span class="keyword">if</span> (repository.endsWith(<span class="string">"*.jar"</span>)) &#123;</div><div class="line">            repository = repository.substring</div><div class="line">                (<span class="number">0</span>, repository.length() - <span class="string">"*.jar"</span>.length());</div><div class="line">            repositories.add(</div><div class="line">                    <span class="keyword">new</span> Repository(repository, RepositoryType.GLOB));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (repository.endsWith(<span class="string">".jar"</span>)) &#123;</div><div class="line">            repositories.add(</div><div class="line">                    <span class="keyword">new</span> Repository(repository, RepositoryType.JAR));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            repositories.add(</div><div class="line">                    <span class="keyword">new</span> Repository(repository, RepositoryType.DIR));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ClassLoaderFactory.createClassLoader(repositories, parent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基于之前介绍的tomcat的类加载器，这两个方法应该比较好理解了，这里需要注意的是，在Tomcat5之后，Tomcat的类加载器发生了变化，默认是没有catalinaLoader和sharedLoader的路径了，这个可以通过查看<code>catalina.properties</code>文件来说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">common.loader=&quot;$&#123;catalina.base&#125;/lib&quot;,&quot;$&#123;catalina.base&#125;/lib/*.jar&quot;,&quot;$&#123;catalina.home&#125;/lib&quot;,&quot;$&#123;catalina.home&#125;/lib/*.jar&quot;</div><div class="line"></div><div class="line">server.loader=</div><div class="line"></div><div class="line">shared.loader=</div></pre></td></tr></table></figure>
<p>可见，默认只设置了commonLoader。从<code>createClassLoader</code>方法可以看出，后两个loader的值是空的，所以commonLoader,catalinaLoader和sharedLoader都是同一个对象。</p>
<h2 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Load daemon.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String[] arguments)</span></span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Call the load() method</span></div><div class="line">    String methodName = <span class="string">"load"</span>;</div><div class="line">    Object param[];</div><div class="line">    Class&lt;?&gt; paramTypes[];</div><div class="line">    <span class="keyword">if</span> (arguments==<span class="keyword">null</span> || arguments.length==<span class="number">0</span>) &#123;</div><div class="line">        paramTypes = <span class="keyword">null</span>;</div><div class="line">        param = <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        paramTypes = <span class="keyword">new</span> Class[<span class="number">1</span>];</div><div class="line">        paramTypes[<span class="number">0</span>] = arguments.getClass();</div><div class="line">        param = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">        param[<span class="number">0</span>] = arguments;</div><div class="line">    &#125;</div><div class="line">    Method method =</div><div class="line">        catalinaDaemon.getClass().getMethod(methodName, paramTypes);</div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">        log.debug(<span class="string">"Calling startup class "</span> + method);</div><div class="line">    method.invoke(catalinaDaemon, param);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这不用多说了吧，还是调用<code>org.apache.catalina.startup.Catalina</code>对象的<code>load</code>方法。</p>
<h2 id="start方法"><a href="#start方法" class="headerlink" title="start方法"></a>start方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Start the Catalina daemon.</div><div class="line"> * <span class="doctag">@throws</span> Exception Fatal start error</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="keyword">if</span>( catalinaDaemon==<span class="keyword">null</span> ) init();</div><div class="line"></div><div class="line">    Method method = catalinaDaemon.getClass().getMethod(<span class="string">"start"</span>, (Class [] )<span class="keyword">null</span>);</div><div class="line">    method.invoke(catalinaDaemon, (Object [])<span class="keyword">null</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更简单是不是？</p>
<p>以上就是Bootstrap类的工作，接下来就是Catalina需要做的事了，所以从这个流程来看，Bootstrap所做的工作还是很简单的。关于Catalina的分析下一篇文章继续吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>http://www.ideabuffer.cn/2016/11/25/test/</url>
      <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><span id="encrypt-message">Welcome to my blog, enter password to read.</span><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+bZ9pIzvkwam5zOwOfAf40gUA1Qd0BNy7MbxffrF0XZ8aI3i+1yKBZo8xIqlbuqvaQFQqfq/DGgt7z6vQ8/vfUMOSSN7/TqkREU7v6wbe0qj0fB/6ILLqx </div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux配置调优：最大打开文件描述符个数]]></title>
      <url>http://www.ideabuffer.cn/2016/11/20/Linux%E9%85%8D%E7%BD%AE%E8%B0%83%E4%BC%98%EF%BC%9A%E6%9C%80%E5%A4%A7%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%AA%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>一般情况下，Linux默认的最大文件描述符数量是1024，对于一般的程序来说1024应该是足够使用的（Nginx、系统进程等）。但是像mysql、java等单进程处理大量请求的应用来说就未必了。如果单个进程打开的文件描述符数量超过了系统定义的值，就会提到“too many files open”的错误提示。</p>
<p>如果想查看当前进程打开了多少个文件，可以执行如下命令查看：</p>
<p><code>lsof -n | awk &#39;{print $2}&#39; | sort | uniq -c | sort -nr | more</code></p>
<p>执行后可以看到，第一列是打开的文件描述符数量，第二列是进程id。</p>
<h2 id="限制级别"><a href="#限制级别" class="headerlink" title="限制级别"></a>限制级别</h2><p>最大文件描述符数的限制可以分为3种：</p>
<ul>
<li>shell级别的限制</li>
<li>用户级别的限制</li>
<li>系统级别的限制</li>
</ul>
<a id="more"></a>
<h3 id="shell级别的限制"><a href="#shell级别的限制" class="headerlink" title="shell级别的限制"></a>shell级别的限制</h3><p>如果在shell中执行<code>ulimit -n 4096</code>后，表示将当前用户所有进程能打开的最大文件数量设置为4096.但只是在当前shell中有效，退出后再登录则又恢复成之前的限制。</p>
<h3 id="用户级别的限制"><a href="#用户级别的限制" class="headerlink" title="用户级别的限制"></a>用户级别的限制</h3><p>用户级别的限制是针对具体的用户，一个用户可以通过多个shell打开，这里不针对每一个shell限制。</p>
<h3 id="系统级别的限制"><a href="#系统级别的限制" class="headerlink" title="系统级别的限制"></a>系统级别的限制</h3><p>这一级别的限制是对整个系统的所有用户的限制，可以执行<code>cat /proc/sys/fs/file-max</code>来查看。</p>
<h2 id="ulimit命令"><a href="#ulimit命令" class="headerlink" title="ulimit命令"></a>ulimit命令</h2><h3 id="ulimit功能介绍"><a href="#ulimit功能介绍" class="headerlink" title="ulimit功能介绍"></a>ulimit功能介绍</h3><p>考虑一下如下情况：</p>
<p>一台Linux主机上同时通过ssh登录了20个人，如果在系统资源无限制的情况下，这20个人同时打开了100个文档，并且每个文档的大小大概有20M，这时系统的内存资源就会力不从心了。</p>
<p>ulimit用于限制shell启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、shell进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU时间、单个用户的最大线程数、shell进程所能使用的最大虚拟内存。同时，它支持对资源的硬限制和软限制。</p>
<p>ulimit可以作用于用户登录的当前shell会话，是一种临时限制。在会话终止时便结束限制，在shell中执行该命令不会影响其他shell会话。</p>
<p>如果想要使限制永久生效，则需要设置<code>/etc/security/limits.conf</code>文件，这个文件稍后会讲到。</p>
<h3 id="ulimit的使用说明"><a href="#ulimit的使用说明" class="headerlink" title="ulimit的使用说明"></a>ulimit的使用说明</h3><p>执行<code>help ulimit</code>命令可以查看一下该命令的使用说明：</p>
<img src="/2016/11/20/Linux配置调优：最大打开文件描述符个数/2016-11-20%201.18.23.png" alt="2016-11-20 1.18.23.png" title="">
<h3 id="ulimit限制最大打开文件描述符个数"><a href="#ulimit限制最大打开文件描述符个数" class="headerlink" title="ulimit限制最大打开文件描述符个数"></a>ulimit限制最大打开文件描述符个数</h3><p>由上可知，如果要限制最大打开文件描述符的个数可以执行以下命令：</p>
<p><code>ulimit -n 1000</code></p>
<p>该命令表示将最大打开文件描述符的个数限制为1000（只在当前shell中有效）。</p>
<p>这里需要注意的地方是，linux资源限制的方式可分为<em>软限制</em>和<em>硬限制</em>。</p>
<p>从<code>ulimit</code>的使用说明来看，<code>ulimit</code>的参数已经包含了软限制和硬限制，<code>-H</code>代表硬限制，<code>-S</code>代表软限制。</p>
<p>例如，执行<code>ulimit -Hn 1000</code>表示将硬限制设置为1000，同样<code>ulimit -Sn 1000</code>表示将软限制设置为1000，如果不指定<code>-H</code>或是<code>-S</code>，则相当于把软限制和硬限制都设置为1000。</p>
<p>它们之间的关系是：</p>
<ul>
<li>软限制起实际限制作用，但不能超过硬限制（除非有root权限）。</li>
<li>普通用户可以在硬限制范围内，更改自己的软限制</li>
<li>普通用户都可以缩小硬限制,但不能扩大硬限制，而root缩小扩大都可以。</li>
</ul>
<p>下面通过几个例子来说明<code>ulimit</code>命令的使用。</p>
<h3 id="ulimit-n的使用"><a href="#ulimit-n的使用" class="headerlink" title="ulimit -n的使用"></a><code>ulimit -n</code>的使用</h3><p>如果你没有配置过，则默认的限制为1024</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -n</div><div class="line">1024</div></pre></td></tr></table></figure>
<p>将限制设置为2048</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -n 2048</div></pre></td></tr></table></figure>
<p>查看软限制和硬限制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -Sn</div><div class="line">2048</div><div class="line">[root@localhost ~]# ulimit -Hn</div><div class="line">2048</div></pre></td></tr></table></figure>
<p>对于root用户，可以将增加硬限制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -n 2049</div><div class="line">[root@localhost ~]#</div></pre></td></tr></table></figure>
<p>对于普通用户，通过<code>ulimit -n</code>来查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -n</div><div class="line">1024</div></pre></td></tr></table></figure>
<p>将限制改为1023，执行成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -n 1023</div><div class="line">[sangjian@localhost ~]$</div></pre></td></tr></table></figure>
<p>将限制改为1025，执行失败</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -n 1025</div><div class="line">-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作</div></pre></td></tr></table></figure>
<p>可见，普通用户只能缩小限制，而不能扩大限制。</p>
<p>刚才说到执行<code>ulimit -n</code>是同时对软限制和硬限制都生效的，现在将软限制改为1000，执行成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -Sn 1000</div><div class="line">[sangjian@localhost ~]$</div></pre></td></tr></table></figure>
<p>将软限制改为1024，执行失败，因为硬限制的值为1023</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -Sn 1024</div><div class="line">-bash: ulimit: open files: 无法修改 limit 值: 无效的参数</div></pre></td></tr></table></figure>
<h2 id="修改最大文件限制数量的方式"><a href="#修改最大文件限制数量的方式" class="headerlink" title="修改最大文件限制数量的方式"></a>修改最大文件限制数量的方式</h2><ul>
<li>通过<code>ulimit -n</code>修改</li>
<li>通过<code>/etc/security/limits.conf</code>文件来修改</li>
<li>通过<code>/proc/sys/fs/file-max</code>文件来修改</li>
</ul>
<h2 id="etc-security-limits-conf"><a href="#etc-security-limits-conf" class="headerlink" title="/etc/security/limits.conf"></a>/etc/security/limits.conf</h2><p>limits.conf文件实际是Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 pam_limits.so 的配置文件，突破系统的默认限制，对系统访问资源有一定保护作用。 limits.conf 和sysctl.conf区别在于limits.conf是针对用户，而sysctl.conf是针对整个系统参数配置。</p>
<p>limits.conf的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username|@groupname type resource limit</div></pre></td></tr></table></figure>
<p><em>username|@groupname</em>：设置需要被限制的用户名，组名前面加@和用户名区别。也可以用通配符*来做所有用户的限制。</p>
<p><em>type</em>：有 soft，hard 和 -，soft 指的是当前系统生效的设置值。hard 表明系统中所能设定的最大值。soft 的限制不能比har 限制高。用 - 就表明同时设置了 soft 和 hard 的值。</p>
<p><em>resource</em>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">　　core			- 限制内核文件的大小</div><div class="line">　　date 			- 最大数据大小</div><div class="line">　　fsize 		- 最大文件大小</div><div class="line">　　memlock 		- 最大锁定内存地址空间</div><div class="line">　　nofile 		- 打开文件的最大数目</div><div class="line">　　rss 			- 最大持久设置大小</div><div class="line">　　stack 		- 最大栈大小</div><div class="line">　　cpu 			- 以分钟为单位的最多 CPU 时间</div><div class="line">　　noproc 		- 进程的最大数目</div><div class="line">　　as 			- 地址空间限制</div><div class="line">　　maxlogins 	- 此用户允许登录的最大数目</div><div class="line">　　maxsyslogins	- 系统所有登录的最大数量</div></pre></td></tr></table></figure>
<p>例如，如果想把最大文件描述符数设置为4096，且对所有用户生效，则在该文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* soft nofile 4096</div><div class="line">* hard nofile 4096</div></pre></td></tr></table></figure>
<h2 id="proc-sys-fs-file-max"><a href="#proc-sys-fs-file-max" class="headerlink" title="/proc/sys/fs/file-max"></a>/proc/sys/fs/file-max</h2><p>该文件是系统级别的限制，可以查看该文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /proc/sys/fs/file-max</div><div class="line">185983</div></pre></td></tr></table></figure>
<p>可以看到，系统级别的最大文件描述符数是185983，该限制是对整个系统的所有用户生效。但是不是就不可以设置更大的限制数量呢？答案是否定的。对于root来说，可以设置大于这个数量的限制，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -n 185984</div><div class="line">[root@localhost ~]#</div></pre></td></tr></table></figure>
<p>发现执行成功了，说明root是可以修改为更大的限制数量的。</p>
<p>其实，/proc/sys/fs/file-max是系统给出的建议值，系统会计算资源给出一个和合理值，一般跟内存有关系，内存越大，改值越大，但是仅仅是一个建议值，limits.conf的设定完全可以超过/proc/sys/fs/file-max。通过limits.conf文件来配置也是可以的。</p>
<h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><h3 id="ulimit-n设置的是当前用户单个进程能够打开的文件描述符个数还是所有进程的文件描述符个数？"><a href="#ulimit-n设置的是当前用户单个进程能够打开的文件描述符个数还是所有进程的文件描述符个数？" class="headerlink" title="ulimit -n设置的是当前用户单个进程能够打开的文件描述符个数还是所有进程的文件描述符个数？"></a><code>ulimit -n</code>设置的是当前用户单个进程能够打开的文件描述符个数还是所有进程的文件描述符个数？</h3><p>对于第一点，网上这两种说法都有，具体我也做了一些试验，例如，当用<code>vim</code>查看一个文件时，通过另一个shell登录后，查看vim进程的pid：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ps -ef | grep vim</div><div class="line">sangjian  6099  6036  0 23:39 pts/0    00:00:00 vim test.sh</div><div class="line">sangjian  6101  5986  0 23:39 pts/3    00:00:00 grep --color=auto vim</div></pre></td></tr></table></figure>
<p>可知，pid是6099，查看<code>/proc/6099/fd</code>中的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ll /proc/6099/fd</div><div class="line">总用量 0</div><div class="line">lrwx------. 1 sangjian sangjian 64 11月 19 23:41 0 -&gt; /dev/pts/0</div><div class="line">lrwx------. 1 sangjian sangjian 64 11月 19 23:41 1 -&gt; /dev/pts/0</div><div class="line">lrwx------. 1 sangjian sangjian 64 11月 19 23:39 2 -&gt; /dev/pts/0</div><div class="line">lrwx------. 1 sangjian sangjian 64 11月 19 23:41 4 -&gt; /home/sangjian/.test.sh.swp</div></pre></td></tr></table></figure>
<p>每个进程的信息都会在/proc目录中保存，fd目录为打开的文件描述符，可以看到当前打开了4个文件描述符。</p>
<p>修改<code>/etc/security/limits.conf</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sangjian soft nofile 20</div><div class="line">sangjian hard nofile 20</div></pre></td></tr></table></figure>
<p>将<code>sangjian</code>这个用户的最大打开文件描述符个数设置为20，因为设置太小的话shell登录都不成功。然后新开了6个shell以<code>sangjian</code>这个用户来登录，并且每个都用<code>vim</code>打开一个文件，结果是都可以打开，这也就是说使用<code>ulimit -n</code>限制的是每个进程最大打开文件描述符的数量。</p>
<h3 id="lsof-p-pid查看的结果是否都是该进程打开的文件描述符？"><a href="#lsof-p-pid查看的结果是否都是该进程打开的文件描述符？" class="headerlink" title="lsof -p pid查看的结果是否都是该进程打开的文件描述符？"></a><code>lsof -p pid</code>查看的结果是否都是该进程打开的文件描述符？</h3><p>不都是。</p>
<p><code>lsof</code>命令列出的是一个进程及其子进程与哪些文件有关联。</p>
<p><em>请注意</em>：关联文件和打开文件描述符是不同的，关联文件的数量可能远远大于打开的文件描述符的数量。</p>
<p>比如刚刚查看的vim命令执行后，在<code>/proc</code>目录下查看了打开的文件描述符是4个，那么我们再通过<code>lsof</code>来看一下：</p>
<img src="/2016/11/20/Linux配置调优：最大打开文件描述符个数/2016-11-20%2012.50.44.png" alt="2016-11-20 12.50.44.png" title="">
<p>可以看到，这个数量已经远远大于4了，这是为什么呢？</p>
<p>google找了一些资料，大概原因是<code>lsof</code>会列出系统中所占用的资源,但是这些资源不一定会占用打开的文件描述符(比如共享内存,信号量,消息队列,内存映射等，虽然占用了这些资源但不占用打开文件号)，因此有可能出现<code>cat /proc/sys/fs/file-max</code>的值小于<code>lsof | wc -l</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx配置：虚拟主机（1）]]></title>
      <url>http://www.ideabuffer.cn/2016/11/12/Nginx%E9%85%8D%E7%BD%AE%EF%BC%9A%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="什么是虚拟主机"><a href="#什么是虚拟主机" class="headerlink" title="什么是虚拟主机"></a>什么是虚拟主机</h2><p>虚拟主机使用的是特殊的软硬件技术，它把一台运行在因特网上的服务器主机分成一台台“虚拟”的主机，每<br>台虚拟主机都可以是一个独立的网站，可以具有独立的域名，具有完整的Intemet服务器功能（WWW、FTP、Email等），同一台主机上的虚拟主机之间是完全独立的。从网站访问者来看，每一台虚拟主机和一台独立的主机完全一样。</p>
<p>利用虚拟主机，不用为每个要运行的网站提供一台单独的Nginx服务器或单独运行一组Nginx进程。虚拟主机提供了在同一台服务器、同一组Nginx进程上运行多个网站的功能。</p>
<p>在Nginx下，一个server标签就是一个虚拟主机，有一下3种：</p>
<ul>
<li>基于域名的虚拟主机，通过域名来区分虚拟主机</li>
<li>基于端口的虚拟主机，通过端口来区分虚拟主机</li>
<li>基于IP的虚拟主机，通过IP地址来区分虚拟主机</li>
</ul>
<a id="more"></a>
<h2 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h2><p>该虚拟主机主要应用在外部网站，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">   listen 80;</div><div class="line">   server_name www.abc.com;</div><div class="line">   index index.html;</div><div class="line">   ...</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">   listen 80;</div><div class="line">   server_name blog.abc.com;</div><div class="line">   index index.html;</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h2><p>该虚拟主机主要应用在公司的内部网站或者网站的后台，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 8080;</div><div class="line">    server_name www.abc.com;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 8011;</div><div class="line">    server_name blog.abc.com;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于IP的虚拟主机"><a href="#基于IP的虚拟主机" class="headerlink" title="基于IP的虚拟主机"></a>基于IP的虚拟主机</h2><p>配置该虚拟主机主要是用来通过IP进行访问，一般配置多个IP。配置基于IP的虚拟主机，就是为Nginx服务器提供的每台虚拟主机配置一个不同的IP，所以需要将网卡设置为同时能够监听多个IP地址。</p>
<p>Linux支持IP别名的添加，可以使用<code>ifconfig</code>命令来为同一块网卡添加多个IP别名。</p>
<p>例如，我当前的网络配置如下：</p>
<img src="/2016/11/12/Nginx配置：虚拟主机（1）/2016-11-12%204.14.33.png" alt="2016-11-12 4.14.33.png" title="">
<p>可见，我当前的网卡为enp0s3，ip为192.168.1.125.</p>
<p>接下来需要为enp0s3添加两个IP别名：192.168.1.30和192.168.1.31，作为Nginx基于IP的虚拟主机的IP地址，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ifconfig enp0s3:0 192.168.1.30 netmask 255.255.255.0 up</div><div class="line">sudo ifconfig enp0s3:1 192.168.1.31 netmask 255.255.255.0 up</div></pre></td></tr></table></figure>
<p>命令中up表示立即启用该别名。</p>
<p>这时再次查看一下网络配置：</p>
<img src="/2016/11/12/Nginx配置：虚拟主机（1）/2016-11-12%204.22.15.png" alt="2016-11-12 4.22.15.png" title="">
<p>可以看到，enp0s3增加了两个别名，enp0s3:0和enp0s3:1，IP分别为192.168.1.30,192.168.1.31。</p>
<p><em>注意：</em></p>
<ul>
<li><p>如果你使用Centos7最小化安装会提示找不到<code>ifconfig</code>命令，这是需要安装net-tools:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum -y install net-tools</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>按照如上方法为enp0s3设置的别名在重启后将会失效，需要重新设置。如果需要永久生效的话可以执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo <span class="built_in">echo</span> <span class="string">"ifconfig enp0s3:0 192.168.1.30 netmask 255.255.255.0 up"</span> &gt;&gt; /etc/rc.local</div><div class="line">sudo <span class="built_in">echo</span> <span class="string">"ifconfig enp0s3:1 192.168.1.31 netmask 255.255.255.0 up"</span> &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure>
</li>
</ul>
<p>设置好别名之后就可以使用IP地址来配置Nginx的虚拟主机了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name 192.168.1.30;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name 192.168.1.31;</div><div class="line">    ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过以上配置后，来自192.168.1.30的请求将由第一个虚拟主机接收和处理，来自192.168.1.31的请求将由第二个虚拟主机接收和处理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决mysql5.6占用内存过大]]></title>
      <url>http://www.ideabuffer.cn/2016/10/27/%E8%A7%A3%E5%86%B3mysql5-6%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E8%BF%87%E5%A4%A7/</url>
      <content type="html"><![CDATA[<p>虚拟机的内存设置成了1G，跑了两个tomcat和rabbitmq以及redis,mysql启动失败。再次启动有时会成功，但过一会看进程又没有了。</p>
<p>使用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure></p>
<p>后提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR! MySQL server PID file could not be found!</div><div class="line">Starting MySQL..................................... ERROR! The server quit without updating PID file (/opt/mysql/data/localhost.localdomain.pid).</div></pre></td></tr></table></figure></p>
<p>查看mysql配置文件<code>/etc/my.cnf</code>，查看错误日志文件，是内存太小了的原因。</p>
<a id="more"></a>
<p>调整my.cnf 参数,重新配置即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">performance_schema_max_table_instances=200</div><div class="line">table_definition_cache=200</div><div class="line">table_open_cache=128</div></pre></td></tr></table></figure>
<p>下面附一个相关的my.cnf配置文件的说明<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">port = 3306</div><div class="line">socket = /tmp/mysql.sock</div><div class="line"> </div><div class="line">[mysqld]</div><div class="line">port = 3306</div><div class="line">socket = /tmp/mysql.sock</div><div class="line"> </div><div class="line">basedir = /usr/local/mysql</div><div class="line">datadir = /data/mysql</div><div class="line">pid-file = /data/mysql/mysql.pid</div><div class="line">user = mysql</div><div class="line">bind-address = 0.0.0.0</div><div class="line">server-id = 1 #表示是本机的序号为1,一般来讲就是master的意思</div><div class="line"> </div><div class="line">skip-name-resolve</div><div class="line"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，</div><div class="line"># 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求</div><div class="line"> </div><div class="line">#skip-networking</div><div class="line"> </div><div class="line">back_log = 600</div><div class="line"># MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，</div><div class="line"># 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。</div><div class="line"># 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，</div><div class="line"># 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。</div><div class="line"># 另外，这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小。</div><div class="line"># 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。</div><div class="line"> </div><div class="line">max_connections = 1000</div><div class="line"># MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过'conn%'通配符查看当前状态的连接数量，以定夺该值的大小。</div><div class="line"> </div><div class="line">max_connect_errors = 6000</div><div class="line"># 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。</div><div class="line"> </div><div class="line">open_files_limit = 65535</div><div class="line"># MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，</div><div class="line"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</div><div class="line"> </div><div class="line">table_open_cache = 128</div><div class="line"># MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64</div><div class="line"># 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；</div><div class="line"># 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</div><div class="line"> </div><div class="line">max_allowed_packet = 4M</div><div class="line"># 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。</div><div class="line"># 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。</div><div class="line"> </div><div class="line">binlog_cache_size = 1M</div><div class="line"># 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K</div><div class="line"> </div><div class="line">max_heap_table_size = 8M</div><div class="line"># 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变</div><div class="line"> </div><div class="line">tmp_table_size = 16M</div><div class="line"># MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。</div><div class="line"># 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。</div><div class="line"># 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果</div><div class="line"> </div><div class="line">read_buffer_size = 2M</div><div class="line"># MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。</div><div class="line"># 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能</div><div class="line"> </div><div class="line">read_rnd_buffer_size = 8M</div><div class="line"># MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，</div><div class="line"># MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大</div><div class="line"> </div><div class="line">sort_buffer_size = 8M</div><div class="line"># MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。</div><div class="line"># 如果不能，可以尝试增加sort_buffer_size变量的大小</div><div class="line"> </div><div class="line">join_buffer_size = 8M</div><div class="line"># 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享</div><div class="line"> </div><div class="line">thread_cache_size = 8</div><div class="line"># 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，</div><div class="line"># 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，</div><div class="line"># 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)</div><div class="line"># 根据物理内存设置规则如下：</div><div class="line"># 1G  —&gt; 8</div><div class="line"># 2G  —&gt; 16</div><div class="line"># 3G  —&gt; 32</div><div class="line"># 大于3G  —&gt; 64</div><div class="line"> </div><div class="line">query_cache_size = 8M</div><div class="line">#MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，</div><div class="line"># 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。</div><div class="line"># 通过检查状态值'Qcache_%'，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，</div><div class="line"># 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，</div><div class="line"># 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲</div><div class="line"> </div><div class="line">query_cache_limit = 2M</div><div class="line">#指定单个查询能够使用的缓冲区大小，默认1M</div><div class="line"> </div><div class="line">key_buffer_size = 4M</div><div class="line">#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，</div><div class="line"># 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，</div><div class="line"># 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，</div><div class="line"># 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE 'key_read%'获得)。注意：该参数值设置的过大反而会是服务器整体效率降低</div><div class="line"> </div><div class="line">ft_min_word_len = 4</div><div class="line"># 分词词汇最小长度，默认4</div><div class="line"> </div><div class="line">transaction_isolation = REPEATABLE-READ</div><div class="line"># MySQL支持4种事务隔离级别，他们分别是：</div><div class="line"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.</div><div class="line"># 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED</div><div class="line"> </div><div class="line">log_bin = mysql-bin</div><div class="line">binlog_format = mixed</div><div class="line">expire_logs_days = 30 #超过30天的binlog删除</div><div class="line"> </div><div class="line">log_error = /data/mysql/mysql-error.log #错误日志路径</div><div class="line">slow_query_log = 1</div><div class="line">long_query_time = 1 #慢查询时间 超过1秒则为慢查询</div><div class="line">slow_query_log_file = /data/mysql/mysql-slow.log</div><div class="line"> </div><div class="line">performance_schema = 0</div><div class="line">explicit_defaults_for_timestamp</div><div class="line"> </div><div class="line">#lower_case_table_names = 1 #不区分大小写</div><div class="line"> </div><div class="line">skip-external-locking #MySQL选项以避免外部锁定。该选项默认开启</div><div class="line"> </div><div class="line">default-storage-engine = InnoDB #默认存储引擎</div><div class="line"> </div><div class="line">innodb_file_per_table = 1</div><div class="line"># InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间</div><div class="line"># 独立表空间优点：</div><div class="line"># 1．每个表都有自已独立的表空间。</div><div class="line"># 2．每个表的数据和索引都会存在自已的表空间中。</div><div class="line"># 3．可以实现单表在不同的数据库中移动。</div><div class="line"># 4．空间可以回收（除drop table操作处，表空不能自已回收）</div><div class="line"># 缺点：</div><div class="line"># 单表增加过大，如超过100G</div><div class="line"># 结论：</div><div class="line"># 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files</div><div class="line"> </div><div class="line">innodb_open_files = 500</div><div class="line"># 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</div><div class="line"> </div><div class="line">innodb_buffer_pool_size = 64M</div><div class="line"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.</div><div class="line"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.</div><div class="line"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</div><div class="line"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</div><div class="line"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</div><div class="line"># 所以不要设置的太高.</div><div class="line"> </div><div class="line">innodb_write_io_threads = 4</div><div class="line">innodb_read_io_threads = 4</div><div class="line"># innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4</div><div class="line"># 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</div><div class="line"> </div><div class="line">innodb_thread_concurrency = 0</div><div class="line"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量</div><div class="line"> </div><div class="line">innodb_purge_threads = 1</div><div class="line"># InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。</div><div class="line"># 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单</div><div class="line"># 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1</div><div class="line"> </div><div class="line">innodb_flush_log_at_trx_commit = 2</div><div class="line"># 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。</div><div class="line"># 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1</div><div class="line"># 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。</div><div class="line"># 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。</div><div class="line"># 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘</div><div class="line"># 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。</div><div class="line"># 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。</div><div class="line"># 总结</div><div class="line"># 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能</div><div class="line"> </div><div class="line">innodb_log_buffer_size = 2M</div><div class="line"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</div><div class="line"> </div><div class="line">innodb_log_file_size = 32M</div><div class="line"># 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</div><div class="line"> </div><div class="line">innodb_log_files_in_group = 3</div><div class="line"># 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</div><div class="line"> </div><div class="line">innodb_max_dirty_pages_pct = 90</div><div class="line"># innodb主线程刷新缓存池中的数据，使脏数据比例小于90%</div><div class="line"> </div><div class="line">innodb_lock_wait_timeout = 120 </div><div class="line"># InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒</div><div class="line"> </div><div class="line">bulk_insert_buffer_size = 8M</div><div class="line"># 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。</div><div class="line"> </div><div class="line">myisam_sort_buffer_size = 8M</div><div class="line"># MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区</div><div class="line"> </div><div class="line">myisam_max_sort_file_size = 10G</div><div class="line"># 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出</div><div class="line"> </div><div class="line">myisam_repair_threads = 1</div><div class="line"># 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内)  </div><div class="line"> </div><div class="line">interactive_timeout = 28800</div><div class="line"># 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）</div><div class="line"> </div><div class="line">wait_timeout = 28800</div><div class="line"># 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，</div><div class="line"># 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）</div><div class="line"># MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，</div><div class="line"># 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，</div><div class="line"># 最终肯定会达到MySQL Server的连接上限数，这会报'too many connections'的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。</div><div class="line"># 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，</div><div class="line"># 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。</div><div class="line"> </div><div class="line">[mysqldump]</div><div class="line">quick</div><div class="line">max_allowed_packet = 16M #服务器发送和接受的最大包长度</div><div class="line"> </div><div class="line">[myisamchk]</div><div class="line">key_buffer_size = 8M</div><div class="line">sort_buffer_size = 8M</div><div class="line">read_buffer = 4M</div><div class="line">write_buffer = 4M</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat 8 介绍]]></title>
      <url>http://www.ideabuffer.cn/2016/09/01/Tomcat-8-%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="Apache-Tomcat-版本介绍"><a href="#Apache-Tomcat-版本介绍" class="headerlink" title="Apache Tomcat 版本介绍"></a>Apache Tomcat 版本介绍</h2><p>Tomcat是一个开源的软件，其实现了Java Servlet, JavaServer Pages, Java Expression Language 以及 Java WebSocket 技术。Java Servlet, JavaServer Pages, Java Expression Language 以及 Java WebSocket 规范是在 <a href="http://www.jcp.org" target="_blank" rel="external">Java Community Process</a> 下开发出来的。</p>
<p>不同版本的Apache Tomcat实现了不同版本的Servlet和JSP规范。它们之间的对应关系如下：</p>
<img src="/2016/09/01/Tomcat-8-介绍/QQ20160901-0-2x.png" alt="QQ20160901-0-2x.png" title="">
<p>当选举一个发布版本时，如果审阅者认为次发布版本已经达到稳定水平，则会选取此版本为稳定版。新的主要版本最初的发布通常从Alpha版本开始,然后经历beta版，最后到稳定版，这通常要经历几个月的时间。不过，稳定版的条件是Java规范的实现都已经完成。也就是说，在所有其他方面被认为是稳定的，但如果规范的实现不是最终的，可能仍然被标记为Beta版。</p>
<p><strong>Alpha</strong>  由于规范的要求和/或一些显著的bug的原因，可能含有大量的未经测试或者缺少的功能，并且预计不会在任何时间内稳定地运行。</p>
<p><strong>Beta</strong> 可能含有一些未经测试的功能和/或一些相对较小的错误。Beta版预计不会稳定地运行。</p>
<p><strong>Stable</strong> 可能包含少量相对较小的错误。稳定版本可以用于进行生产环境使用，预计可以长时间稳定地运行。</p>
<a id="more"></a>
<p>参考：<a href="http://tomcat.apache.org/whichversion.html" target="_blank" rel="external">Apache Tomcat Versions</a></p>
<h2 id="Tomcat-8-0-x-版本"><a href="#Tomcat-8-0-x-版本" class="headerlink" title="Tomcat 8.0.x 版本"></a>Tomcat 8.0.x 版本</h2><p>Tomcat 8.0.x最新的版本是Tomcat 8.0.36。该系列同样实现了 Servlet 3.1, JSP 2.3, EL 3.0 and Web Socket 1.0 规范。该系列版本的新特性有：</p>
<ul>
<li><p>对资源进行了重构，合并了Aliases，VirtualLoader，VirtualDirContext，JAR资源和外部仓库，现在都以单个的、一致的方法进行配置。</p>
</li>
<li><p>新增了当Tomcat未运行时对war包修改的检测。Tomcat会在解压后的目录中创建一个META-INF/war-tracker文件，设置该文件的最后修改时间为war包的最后修改时间。如果Tomcat通过这种机制检测到修改过的war包则会重新部署该web应用（也就是说之前的解压目录会被删除，修改过的war包会重新解压到当前目录）。</p>
</li>
<li><p>新增了支持并行加载的web应用程序的类加载器<code>ParallelWebappClassLoader</code>的实现。</p>
</li>
<li><p><del>实验支持[SPDY] [1]</del>。</p>
</li>
<li><p>连接器默认使用无阻塞I/O。现在HTTP和AJP的连接器默认的都是无阻塞的I/O。</p>
</li>
<li><p>修改了连接器的默认URIEncoding，将之前的ISO-8859-1修改为UTF-8。</p>
</li>
</ul>
<blockquote>
<p><em>SPDY协议是Google提出的基于传输控制协议(TCP)的应用层协议，通过压缩、多路复用和优先级来缩短加载时间。该协议是一种更加快速的内容传输协议。该功能在 Tomcat 8.0.22 版本被删除</em></p>
</blockquote>
<p>参考：<a href="http://tomcat.apache.org/tomcat-8.0-doc/changelog.html" target="_blank" rel="external">Tomcat 8.0.x Changelog</a></p>
<h2 id="Tomcat-8-5-x-版本"><a href="#Tomcat-8-5-x-版本" class="headerlink" title="Tomcat 8.5.x 版本"></a>Tomcat 8.5.x 版本</h2><p>Tomcat 8.5.4于2016年7月12日发布，这个版本的分支来自Tomcat9.0.0.M4。主要的目的是恢复Java 7的兼容性，并支持Servlet3.1，JSP2.3，EL3.0，WebSocket1.1以及1.1 JASPIC规范。</p>
<blockquote>
<p><em>The Tomcat 8.5.x branch was created from the Tomcat 9.0.0.M4 tag. Changes were applied to restore Java 7 compatibility and to align the specification APIs with Servlet 3.1, JSP 2.3, EL 3.0, WebSocket 1.1 and JASPIC 1.1.</em></p>
</blockquote>
<p>该系列版本的主要新特性有：</p>
<ul>
<li><p>新增了 <code>org.apache.catalina.servlet4preview</code> 包，作用是可以尽早地获取Servlet 4.0 的新特性（需要注意的是，这个包Tomcat 9.x将不会出现）。</p>
</li>
<li><p>新增了对 JASPIC (JSR-196) 的支持。</p>
</li>
<li><p>新增了对 HTTP/2 支持。</p>
</li>
<li><p>新增了动态添加 TLS 虚拟主机的功能。</p>
</li>
</ul>
<p>参考：<a href="http://tomcat.apache.org/tomcat-8.5-doc/changelog.html" target="_blank" rel="external">Tomcat 8.5.x Changelog</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux/Centos7设置nginx开机自启动]]></title>
      <url>http://www.ideabuffer.cn/2016/08/26/Linux-Centos7%E8%AE%BE%E7%BD%AEnginx%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h2 id="新增shell脚本-vi-etc-rc-d-init-d-nginx"><a href="#新增shell脚本-vi-etc-rc-d-init-d-nginx" class="headerlink" title="新增shell脚本 vi /etc/rc.d/init.d/nginx"></a>新增shell脚本 vi /etc/rc.d/init.d/nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="comment"># chkconfig: 35 85 15  </span></div><div class="line"><span class="comment"># description: Nginx is an HTTP(S) server, HTTP(S) reverse</span></div><div class="line"><span class="built_in">set</span> <span class="_">-e</span></div><div class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</div><div class="line">DESC=<span class="string">"nginx daemon"</span>  </div><div class="line">NAME=nginx  </div><div class="line">DAEMON=/usr/<span class="built_in">local</span>/nginx/sbin/<span class="variable">$NAME</span>  </div><div class="line">SCRIPTNAME=/etc/init.d/<span class="variable">$NAME</span>  </div><div class="line"><span class="built_in">test</span> -x <span class="variable">$DAEMON</span> || <span class="built_in">exit</span> 0  </div><div class="line"><span class="function"><span class="title">d_start</span></span>()&#123;  </div><div class="line">   <span class="variable">$DAEMON</span> || <span class="built_in">echo</span> -n <span class="string">" already running"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">d_stop</span></span>() &#123;  </div><div class="line">   <span class="variable">$DAEMON</span> <span class="_">-s</span> quit || <span class="built_in">echo</span> -n <span class="string">" not running"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">d_reload</span></span>() &#123;  </div><div class="line">   <span class="variable">$DAEMON</span> <span class="_">-s</span> reload || <span class="built_in">echo</span> -n <span class="string">" counld not reload"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>  </div><div class="line">  start)  </div><div class="line">     <span class="built_in">echo</span> -n <span class="string">"Starting <span class="variable">$DESC</span>:<span class="variable">$NAME</span>"</span></div><div class="line">     d_start</div><div class="line">     <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">  ;;</div><div class="line">  stop)  </div><div class="line">     <span class="built_in">echo</span> -n <span class="string">"Stopping <span class="variable">$DESC</span>:<span class="variable">$NAME</span>"</span></div><div class="line">     d_stop</div><div class="line">     <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">  ;;</div><div class="line">  reload)  </div><div class="line">     <span class="built_in">echo</span> -n <span class="string">"Reloading <span class="variable">$DESC</span> configuration..."</span></div><div class="line">     d_reload</div><div class="line">     <span class="built_in">echo</span> <span class="string">"reloaded."</span></div><div class="line">  ;;</div><div class="line">  restart)  </div><div class="line">     <span class="built_in">echo</span> -n <span class="string">"Restarting <span class="variable">$DESC</span>: <span class="variable">$NAME</span>"</span></div><div class="line">     d_stop</div><div class="line">     sleep 2</div><div class="line">     d_start</div><div class="line">     <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">  ;;</div><div class="line">  *)</div><div class="line">     <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$SCRIPTNAME</span> &#123;start|stop|restart|reload&#125;"</span> &gt;&amp;2</div><div class="line">     <span class="built_in">exit</span> 3</div><div class="line">  ;;</div><div class="line"><span class="keyword">esac</span>  </div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="设置可执行权限"><a href="#设置可执行权限" class="headerlink" title="设置可执行权限"></a>设置可执行权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /etc/rc.d/init.d/nginx</div></pre></td></tr></table></figure>
<h2 id="添加系统服务"><a href="#添加系统服务" class="headerlink" title="添加系统服务"></a>添加系统服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --add nginx</div></pre></td></tr></table></figure>
<h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --level 35 nginx on</div></pre></td></tr></table></figure>
<hr>
<p>原文链接: <a href="http://my.oschina.net/tomener/blog/664469" target="_blank" rel="external">http://my.oschina.net/tomener/blog/664469</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS7服务器初步配置]]></title>
      <url>http://www.ideabuffer.cn/2016/08/01/CentOS7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>在开发或者部署网站的时候，需要自己配置Linux服务器，本文以Centos7为例，记录了配置Linux服务器的初步流程</p>
<h2 id="第一步：root用户登录"><a href="#第一步：root用户登录" class="headerlink" title="第一步：root用户登录"></a>第一步：root用户登录</h2><p>使用root用户登录远程主机（假定IP地址为192.168.1.125）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.125</div></pre></td></tr></table></figure>
<p>这时，会出现警告，提示这是一个新的地址，存在安全风险。接收则输入yes</p>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---10-30-13.png" alt="-----2016-08-22---10-30-13.png" title="">
<a id="more"></a>
<p>登录远程主机之后修改root密码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd</div></pre></td></tr></table></figure>
<h2 id="第二步：新建用户"><a href="#第二步：新建用户" class="headerlink" title="第二步：新建用户"></a>第二步：新建用户</h2><p>添加一个用户组admin</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groupadd admin</div></pre></td></tr></table></figure>
<p>然后，添加一个新的用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd <span class="_">-d</span> /home/sangjian <span class="_">-s</span> /bin/bash -m sangjian</div></pre></td></tr></table></figure>
<p>上面命令中，参数d表示指定用户的主目录，参数s指定用户的shell，参数m表示如果该目录不存在，则创建该目录。</p>
<p>设置新用户的密码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd sangjian</div></pre></td></tr></table></figure>
<p>将sangjian添加到用户组admin中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod <span class="_">-a</span> -G admin sangjian</div></pre></td></tr></table></figure>
<p>为sangjian用户设定sudo权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">visudo</div></pre></td></tr></table></figure>
<p>visudo命令会打开文件/etc/sudoers，找到如下一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root    ALL=(ALL) ALL</div></pre></td></tr></table></figure>
<p>添加一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sangjian    ALL=(ALL) NOPASSWD: ALL</div></pre></td></tr></table></figure>
<p>上面的NOPASSWD表示，切换sudo的时候，不需要输入密码，我喜欢这样比较省事。如果出于安全考虑，也可以强制要求输入密码。<br>另开一个终端，以sangjian用户登录，检查是否设置成功</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh sangjian@192.168.1.125</div></pre></td></tr></table></figure>
<h2 id="第三步：SSH设置"><a href="#第三步：SSH设置" class="headerlink" title="第三步：SSH设置"></a>第三步：SSH设置</h2><p>查看本机是否有SSH公钥（一般是~/.ssh/id_rsa.pub），如果没有则可以使用ssh-keygen命令生成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure></p>
<p>想省事的话可以一直按回车即可</p>
<p>将刚生成的id_rsa.pub文件的内容追加到服务器的authorized_keys文件中<br>可以使用scp命令将生成的id_rsa.pub文件上传到服务器中，再将文件的内容追加到authorized_keys文件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ~/.ssh/id_rsa.pub sangjian@192.168.1.125:/home/sangjian/mac_id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>上面的命令是将本地的公钥上传到服务器中的/home/sangjian目录下的mac_id_rsa.pub文件中</p>
<p>再执行追加命令（如果~/.ssh目录不存在，则新建）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat mac_id_rsa.pub &gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>修改SSH配置文件/etc/ssh/sshd_config<br>在配置文件中找到 <code>#Port 22</code>，修改默认的端口，范围可以从1025到65536<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Port 6983</div></pre></td></tr></table></figure></p>
<p>修改如下设置并确保去除了#号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Protocol 2</div><div class="line"><span class="comment">#禁止root用户登录</span></div><div class="line">PermitRootLogin no</div><div class="line"></div><div class="line"><span class="comment">#禁止使用密码登录</span></div><div class="line">PasswordAuthentication no</div><div class="line">PermitEmptyPasswords no</div><div class="line">PasswordAuthentication yes</div></pre></td></tr></table></figure></p>
<p>最后，在配置文件的末尾添加一行用来指定可以登录的用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AllowUsers sangjian</div></pre></td></tr></table></figure></p>
<p>保存退出后，修改authorized_keys和.ssh的文件权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chmod 700 ~/.ssh/</div><div class="line">sudo chmod 600 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>确保.ssh的权限为700，authorized_keys的权限为600，否则登录的时候会出现如下错误</p>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---10-54-52.png" alt="-----2016-08-22---10-54-52.png" title="">
<p>查看日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tail -n 20 /var/<span class="built_in">log</span>/secure</div></pre></td></tr></table></figure></p>
<p>可以看到登录时的日志有如下一句</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localhost sshd[2359]: Authentication refused: bad ownership or modes <span class="keyword">for</span> file /home/sangjian/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---10-58-33.png" alt="-----2016-08-22---10-58-33.png" title="">
<p>重启SSHD<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service sshd restart</div></pre></td></tr></table></figure></p>
<p>检查是否可以免密码登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh sangjian@192.168.1.125 -p 6983</div></pre></td></tr></table></figure></p>
<p>发现不可以，提示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh: connect to host 192.168.1.125 port 6983: Connection refused</div></pre></td></tr></table></figure></p>
<h2 id="第四步：登录失败问题解决"><a href="#第四步：登录失败问题解决" class="headerlink" title="第四步：登录失败问题解决"></a>第四步：登录失败问题解决</h2><p>出现这一情况主要是防火墙端口开放的问题<br>查看日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tail -n 20 /var/<span class="built_in">log</span>/secure</div></pre></td></tr></table></figure></p>
<p>发现没有失败的日志输出<br>查看防火墙是否开启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status firewalld</div></pre></td></tr></table></figure></p>
<p>如果开启了，则原因就是刚刚设置的ssh端口6983并没有添加到防火墙中<br>添加端口到防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo firewall-cmd --zone=public --permanent --add-port=6983/tcp</div></pre></td></tr></table></figure></p>
<p>重启防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart firewalld</div></pre></td></tr></table></figure></p>
<p>查看端口是否添加成功</p>
<p>执行<code>sudo firewall-cmd --list-all</code>，如果出现以下输出，则证明添加成功</p>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---11-18-34.png" alt="-----2016-08-22---11-18-34.png" title="">
<h2 id="第五步-登录服务器"><a href="#第五步-登录服务器" class="headerlink" title="第五步 登录服务器"></a>第五步 登录服务器</h2><p>SSH的配置已经完成了，下面测试以下是否可以登录</p>
<p>输入<code>ssh sangjian@192.168.1.125 -p 6983</code>，提示</p>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---11-20-02.png" alt="-----2016-08-22---11-20-02.png" title="">
<p>表示已经登录成功了，至此基于Centos7的服务器初步配置已经完成了。</p>
<p>本文主要介绍了SSH配置，剩下的可以根据需要配置一些安全相关的设置，比如防火墙的设置，端口的限制等等。</p>
]]></content>
    </entry>
    
  
  
</search>
