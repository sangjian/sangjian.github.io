<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[深入理解AbstractQueuedSynchronizer（一）]]></title>
      <url>http://www.ideabuffer.cn/2017/03/15/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3AbstractQueuedSynchronizer%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="AbstractQueuedSynchronizer简介"><a href="#AbstractQueuedSynchronizer简介" class="headerlink" title="AbstractQueuedSynchronizer简介"></a>AbstractQueuedSynchronizer简介</h2><p>AbstractQueuedSynchronizer提供了一个FIFO队列，可以看做是一个可以用来实现锁以及其他需要同步功能的框架。这里简称该类为AQS。AQS的使用依靠继承来完成，子类通过继承自AQS并实现所需的方法来管理同步状态。例如ReentrantLock，CountDownLatch等。</p>
<p>本篇文章基于JDK1.8来介绍，该类有许多实现类：</p>
<img src="/2017/03/15/深入理解AbstractQueuedSynchronizer（一）/QQ20170313-231557@2x.png" alt="QQ20170313-231557@2x.png" title="">
<a id="more"></a>
<p>其中，我们最常用的大概就是ReentrantLock和CountDownLatch了。ReentrantLock提供了对代码块的并发访问控制，也就是锁，说是锁，但其实并没有用到关键字<code>synchronized</code>，这么神奇？其实其内部就是基于同步器来实现的，本文结合ReentrantLock的使用来分析同步器独占锁的原理。</p>
<p>##AQS的两种功能</p>
<p>从使用上来说，AQS的功能可以分为两种：独占和共享。对于这两种功能，有一个很常用的类：ReentrantReadWriteLock，其就是通过两个内部类来分别实现了这两种功能，提供了读锁和写锁的功能。但子类实现时，只能实现其中的一种功能，即要么是独占功能，要么是共享功能。</p>
<p>对于独占功能，例如如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">	lock.lock();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		</div><div class="line">		<span class="comment">// do something...</span></div><div class="line">		</div><div class="line">		</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个很好理解，通过ReentrantLock来保证在<code>lock.lock()</code>之后的代码在同一时刻只能有一个线程来执行，其余的线程将会被阻塞，直到该线程执行了<code>lock.unlock()</code>。这就是一个独占锁的功能。</p>
<p>对于共享功能，例如如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">	lock.readLock().lock();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		</div><div class="line">		<span class="comment">// do something...</span></div><div class="line">		</div><div class="line">		</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		lock.readLock().unlock();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中的<code>lock</code>是<code>ReentrantReadWriteLock</code>类的实例，而<code>lock.readLock()</code>为获取其中的读锁，即共享锁，使用方式并无差别，但和独占锁是有区别的：</p>
<ul>
<li>读锁与读锁可以共享</li>
<li>读锁与写锁不可以共享（排他）</li>
<li>写锁与写锁不可以共享（排他）</li>
</ul>
<h2 id="AQS独占锁的内部实现"><a href="#AQS独占锁的内部实现" class="headerlink" title="AQS独占锁的内部实现"></a>AQS独占锁的内部实现</h2><h3 id="AQS的主要数据结构"><a href="#AQS的主要数据结构" class="headerlink" title="AQS的主要数据结构"></a>AQS的主要数据结构</h3><p>由于使用AQS可以实现锁的功能，那么下面就要分析一下究竟是如何实现的。</p>
<p>AQS内部维护着一个FIFO的队列，该队列就是用来实现线程的并发访问控制。队列中的元素是一个Node类型的节点，Node的主要属性如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> waitStatus;</div><div class="line">    Node prev;</div><div class="line">    Node next;</div><div class="line">    Node nextWaiter;</div><div class="line">    Thread thread;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><em>waitStatus</em>：表示节点的状态，其中包含的状态有：<ul>
<li><em>CANCELLED</em>：值为1，表示当前节点被取消；</li>
<li><em>SIGNAL</em>：值为-1，表示当前节点的的后继节点将要或者已经被阻塞，在当前节点释放的时候需要unpark后继节点；</li>
<li><em>CONDITION</em>：值为-2，表示当前节点在等待condition，即在condition队列中；</li>
<li><em>PROPAGATE</em>：值为-3，表示releaseShared需要被传播给后续节点（仅在共享模式下使用）；</li>
<li><em>0</em>：无状态，表示当前节点在队列中等待获取锁。</li>
</ul>
</li>
<li><em>prev</em>：前继节点；</li>
<li><em>next</em>：后继节点；</li>
<li><em>nextWaiter</em>：存储condition队列中的后继节点；</li>
<li><em>thread</em>：当前线程。</li>
</ul>
<p>其中，队列里还有一个<code>head</code>节点和一个<code>tail</code>节点，分别表示头结点和尾节点，其中头结点不存储Thread，仅保存next结点的引用。</p>
<p>AQS中有一个<code>state</code>变量，该变量对不同的子类实现具有不同的意义，对ReentrantLock来说，它表示加锁的状态：</p>
<ul>
<li>无锁时state=0，有锁时state&gt;0；</li>
<li>第一次加锁时，将state设置为1；</li>
<li>由于ReentrantLock是可重入锁，所以持有锁的线程可以多次加锁，经过判断加锁线程就是当前持有锁的线程时（即<code>exclusiveOwnerThread==Thread.currentThread()</code>），即可加锁，每次加锁都会将state的值+1，state等于几，就代表当前持有锁的线程加了几次锁;</li>
<li>解锁时每解一次锁就会将state减1，state减到0后，锁就被释放掉，这时其它线程可以加锁；</li>
<li>当持有锁的线程释放锁以后，如果是等待队列获取到了加锁权限，则会在等待队列头部取出第一个线程去获取锁，获取锁的线程会被移出队列；</li>
</ul>
<p><code>state</code>变量定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The synchronization state.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</div></pre></td></tr></table></figure>
<h3 id="ReentrantLock类的结构"><a href="#ReentrantLock类的结构" class="headerlink" title="ReentrantLock类的结构"></a>ReentrantLock类的结构</h3><p>下面通过ReentrantLock的实现进一步分析重入锁的实现。</p>
<p>首先看一下lock方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync.lock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法调用了<code>sync</code>实例的lock方法，这里要说明一下ReentrantLock中的几个内部类：</p>
<ul>
<li>Sync</li>
<li>FairSync</li>
<li>NonfairSync</li>
</ul>
<p>对于ReentrantLock，有两种获取锁的模式：公平锁和非公平锁。所以对应有两个内部类，都继承自Sync。而Sync继承自AQS：</p>
<img src="/2017/03/15/深入理解AbstractQueuedSynchronizer（一）/QQ20170314-003640.png" alt="QQ20170314-003640.png" title="">
<p>本文主要通过公平锁来介绍，看一下FairSync的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sync object for fair locks</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3000897897090466540L</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        acquire(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Fair version of tryAcquire.  Don't grant access unless</div><div class="line">     * recursive call or no waiters or is first.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">        <span class="comment">// 获取state</span></div><div class="line">        <span class="keyword">int</span> c = getState();</div><div class="line">        <span class="comment">// state=0表示当前队列中没有线程被加锁</span></div><div class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * 首先判断是否有前继结点，如果没有则当前队列中还没有其他线程；</div><div class="line">             * 设置状态为acquires，即lock方法中写死的1（这里为什么不直接setState？因为可能同时有多个线程同时在执行到此处，所以用CAS来执行）；</div><div class="line">             * 设置当前线程独占锁。</div><div class="line">             */</div><div class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</div><div class="line">                compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">                setExclusiveOwnerThread(current);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 如果state不为0，表示已经有线程独占锁了，这时还需要判断独占锁的线程是否是当前的线程，原因是由于ReentrantLock为可重入锁；</div><div class="line">         * 如果独占锁的线程是当前线程，则将状态加1，并setState;</div><div class="line">         * 这里为什么不用compareAndSetState？因为独占锁的线程已经是当前线程，不需要通过CAS来设置。</div><div class="line">         */</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">            <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">            setState(nextc);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AQS获取独占锁的实现"><a href="#AQS获取独占锁的实现" class="headerlink" title="AQS获取独占锁的实现"></a>AQS获取独占锁的实现</h3><h4 id="acquire方法"><a href="#acquire方法" class="headerlink" title="acquire方法"></a>acquire方法</h4><p><code>acquire</code>是AQS中的方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">        selfInterrupt();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法主要工作如下：</p>
<ol>
<li>尝试获取独占锁；</li>
<li>获取成功则返回，否则执行步骤3;</li>
<li>addWaiter方法将当前线程封装成Node对象，并添加到队列尾部；</li>
<li>自旋获取锁，并判断中断标志位。如果中断标志位为<code>true</code>，执行步骤5，否则返回；</li>
<li>设置线程中断。</li>
</ol>
<h4 id="tryAcquire方法"><a href="#tryAcquire方法" class="headerlink" title="tryAcquire方法"></a>tryAcquire方法</h4><p><code>tryAcquire</code>方法在FairSync中已经说明，它重写了AQS中的方法，在AQS中它的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>既然该方法需要子类来实现，为什么不使用<code>abstract</code>来修饰呢？上文中提到过，AQS有两种功能：独占和共享，而且子类只能实现其一种功能，所以，如果使用<code>abstract</code>来修饰，那么每个子类都需要同时实现两种功能的方法，这对子类来说不太友好，所以没有使用<code>abstract</code>来修饰。</p>
<p>该方法是在ReentrantLock中的FairSync和NonfairSync的两个内部类来实现的，这里以FairSysc-公平锁来说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">    <span class="keyword">int</span> c = getState();</div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</div><div class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">            setExclusiveOwnerThread(current);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">        <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">        setState(nextc);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="addWaiter方法"><a href="#addWaiter方法" class="headerlink" title="addWaiter方法"></a>addWaiter方法</h4><p>看下addWaiter方法的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</div><div class="line">	<span class="comment">// 根据当前线程创建一个Node对象</span></div><div class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</div><div class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></div><div class="line">    Node pred = tail;</div><div class="line">	<span class="comment">// 判断tail是否为空，如果为空表示队列是空的，直接enq</span></div><div class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</div><div class="line">        node.prev = pred;</div><div class="line">		<span class="comment">// 这里尝试CAS来设置队尾，如果成功则将当前节点设置为tail，否则enq</span></div><div class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</div><div class="line">            pred.next = node;</div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    enq(node);</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法就是根据当前线程创建一个Node，然后添加到队列尾部。</p>
<h4 id="enq方法"><a href="#enq方法" class="headerlink" title="enq方法"></a>enq方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</div><div class="line">	<span class="comment">// 重复直到成功</span></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Node t = tail;</div><div class="line">		<span class="comment">// 如果tail为null，则必须创建一个Node节点并进行初始化</span></div><div class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></div><div class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</div><div class="line">                tail = head;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            node.prev = t;</div><div class="line">			<span class="comment">// 尝试CAS来设置队尾</span></div><div class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</div><div class="line">                t.next = node;</div><div class="line">                <span class="keyword">return</span> t;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="acquireQueued方法"><a href="#acquireQueued方法" class="headerlink" title="acquireQueued方法"></a>acquireQueued方法</h4><p>该方法的功能是循环的尝试获取锁，直到成功为止，最后返回中断标志位。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 中断标志位</span></div><div class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">			<span class="comment">// 获取前继节点</span></div><div class="line">            <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">			<span class="comment">// 如果前继节点是head，则尝试获取</span></div><div class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">				<span class="comment">// 设置head为当前节点（head中不包含thread）</span></div><div class="line">                setHead(node);</div><div class="line">				<span class="comment">// 清除之前的head</span></div><div class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                failed = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">return</span> interrupted;</div><div class="line">            &#125;</div><div class="line">			<span class="comment">// 如果p不是head或者获取锁失败，判断是否需要进行park</span></div><div class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                parkAndCheckInterrupt())</div><div class="line">                interrupted = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (failed)</div><div class="line">            cancelAcquire(node);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有几个问题很重要：</p>
<ul>
<li>什么条件下需要park？</li>
<li>为什么要判断中断状态？</li>
<li>死循环不会引起CPU使用率飙升？</li>
</ul>
<p>下面分别来分析一下。</p>
<p><strong>什么条件下需要park？</strong></p>
<p>看下<code>shouldParkAfterFailedAcquire</code>方法的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ws = pred.waitStatus;</div><div class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * This node has already set status asking a release</div><div class="line">         * to signal it, so it can safely park.</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Predecessor was cancelled. Skip over predecessors and</div><div class="line">         * indicate retry.</div><div class="line">         */</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            node.prev = pred = pred.prev;</div><div class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</div><div class="line">        pred.next = node;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</div><div class="line">         * need a signal, but don't park yet.  Caller will need to</div><div class="line">         * retry to make sure it cannot acquire before parking.</div><div class="line">         */</div><div class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果前一个节点的状态是<em>SIGNAL</em>，则需要park；</li>
<li>如果<code>ws &gt; 0</code>，表示已被取消，删除状态是已取消的节点；</li>
<li>其他情况，设置前继节点的状态为<em>SIGNAL</em>。</li>
</ul>
<p>可见，只有在前继节点的状态是<em>SIGNAL</em>时，需要park。第二种情况稍后会详细介绍。</p>
<p><strong>为什么要判断中断状态？</strong></p>
<p>首先要知道，acquireQueued方法中获取锁的方式是死循环，判断是否中断是在parkAndCheckInterrupt方法中实现的，看下该方法的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</div><div class="line">    LockSupport.park(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> Thread.interrupted();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非常简单，阻塞当前线程，然后返回线程的中断状态并复位中断状态。</p>
<blockquote>
<p>注意interrupted()方法的作用，该方法是获取线程的中断状态，并复位，也就是说，如果当前线程是中断状态，则第一次调用该方法获取的是<code>true</code>，第二次则是<code>false</code>。而isInterrupted()方法则只是返回线程的中断状态，不执行复位操作。</p>
</blockquote>
<p>如果acquireQueued执行完毕，返回中断状态，回到acquire方法中，根据返回的中断状态判断是否需要执行<code>Thread.currentThread().interrupt()</code>。</p>
<p>为什么要多做这一步呢？先判断中断状态，然后复位，如果之前线程是中断状态，再进行中断？</p>
<p>这里就要介绍一下park方法了。park方法是Unsafe类中的方法，与之对应的是unpark方法。简单来说，当前线程如果执行了park方法，也就是阻塞了当前线程，反之，unpark就是唤醒一个线程。</p>
<p>具体的说明请参考<a href="http://blog.csdn.net/hengyunabc/article/details/28126139" target="_blank" rel="external">http://blog.csdn.net/hengyunabc/article/details/28126139</a></p>
<p>park与wait的作用类似，但是对中断状态的处理并不相同。如果当前线程不是中断的状态，park与wait的效果是一样的；如果一个线程是中断的状态，这时执行wait方法会报<code>java.lang.IllegalMonitorStateException</code>，而执行park时并不会报异常，而是直接返回。</p>
<p>所以，知道了这一点，就可以知道为什么要进行中断状态的复位了：</p>
<ul>
<li>如果当前线程是非中断状态，则在执行park时被阻塞，这是返回中断状态是<code>false</code>；</li>
<li>如果当前线程是中断状态，则park方法不起作用，会立即返回，然后parkAndCheckInterrupt方法会获取中断的状态，也就是<code>true</code>，并复位；</li>
<li>再次执行循环的时候，由于在前一步已经把该线程的中断状态进行了复位，则再次调用park方法时会阻塞。</li>
</ul>
<p>所以，这里判断线程中断的状态实际上是为了不让循环一直执行，要让当前线程进入阻塞的状态。想象一下，如果不这样判断，前一个线程在获取锁之后执行了很耗时的操作，那么岂不是要一直执行该死循环？这样就造成了CPU使用率飙升，这是很严重的后果。</p>
<p><strong>死循环不会引起CPU使用率飙升？</strong></p>
<p>上面已经说明。</p>
<h4 id="cancelAcquire方法"><a href="#cancelAcquire方法" class="headerlink" title="cancelAcquire方法"></a>cancelAcquire方法</h4><p>在acquireQueued方法的finally语句块中，如果在循环的过程中出现了异常，则执行cancelAcquire方法，用于将该节点标记为取消状态。该方法代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancelAcquire</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="comment">// Ignore if node doesn't exist</span></div><div class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="comment">// 设置该节点不再关联任何线程</span></div><div class="line">    node.thread = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Skip cancelled predecessors</span></div><div class="line">    <span class="comment">// 通过前继节点跳过取消状态的node</span></div><div class="line">    Node pred = node.prev;</div><div class="line">    <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>)</div><div class="line">        node.prev = pred = pred.prev;</div><div class="line"></div><div class="line">    <span class="comment">// predNext is the apparent node to unsplice. CASes below will</span></div><div class="line">    <span class="comment">// fail if not, in which case, we lost race vs another cancel</span></div><div class="line">    <span class="comment">// or signal, so no further action is necessary.</span></div><div class="line">    <span class="comment">// 获取过滤后的前继节点的后继节点</span></div><div class="line">    Node predNext = pred.next;</div><div class="line"></div><div class="line">    <span class="comment">// Can use unconditional write instead of CAS here.</span></div><div class="line">    <span class="comment">// After this atomic step, other Nodes can skip past us.</span></div><div class="line">    <span class="comment">// Before, we are free of interference from other threads.</span></div><div class="line">    <span class="comment">// 设置状态为取消状态</span></div><div class="line">    node.waitStatus = Node.CANCELLED;</div><div class="line"></div><div class="line">    <span class="comment">/* </span></div><div class="line">     * If we are the tail, remove ourselves.</div><div class="line">     * 1.如果当前节点是tail：</div><div class="line">     * 尝试更新tail节点，设置tail为pred；</div><div class="line">     * 更新失败则返回，成功则设置tail的后继节点为null</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</div><div class="line">        compareAndSetNext(pred, predNext, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// If successor needs signal, try to set pred's next-link</span></div><div class="line">        <span class="comment">// so it will get one. Otherwise wake it up to propagate.</span></div><div class="line">        <span class="keyword">int</span> ws;</div><div class="line">        <span class="comment">/* </span></div><div class="line">         * 2.如果当前节点不是head的后继节点：</div><div class="line">         * 判断当前节点的前继节点的状态是否是SIGNAL，如果不是则尝试设置前继节点的状态为SIGNAL；</div><div class="line">         * 上面两个条件如果有一个返回true，则再判断前继节点的thread是否不为空；</div><div class="line">         * 若满足以上条件，则尝试设置当前节点的前继节点的后继节点为当前节点的后继节点，也就是相当于将当前节点从队列中删除</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (pred != head &amp;&amp;</div><div class="line">            ((ws = pred.waitStatus) == Node.SIGNAL ||</div><div class="line">             (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</div><div class="line">            pred.thread != <span class="keyword">null</span>) &#123;</div><div class="line">            Node next = node.next;</div><div class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span> &amp;&amp; next.waitStatus &lt;= <span class="number">0</span>)</div><div class="line">                compareAndSetNext(pred, predNext, next);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 3.如果是head的后继节点或者状态判断或设置失败，则唤醒当前节点的后继节点</span></div><div class="line">            unparkSuccessor(node);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        node.next = node; <span class="comment">// help GC</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法中执行的过程有些复杂，首先是要获取当前节点的前继节点，如果前继节点的状态不是取消状态（即<code>pred.waitStatus &gt; 0</code>），则向前遍历队列，直到遇到第一个<code>waitStatus &lt;= 0</code>的节点，并把当前节点的前继节点设置为该节点，然后设置当前节点的状态为取消状态。</p>
<p>接下来的工作可以分为3种情况：</p>
<ul>
<li>当前节点是tail；</li>
<li>当前节点不是head的后继节点（即队列的第一个节点，不包括head），也不是tail；</li>
<li>当前节点是head的后继节点。</li>
</ul>
<p>我们依次来分析一下：</p>
<p><strong>当前节点是tail</strong></p>
<p>这种情况很简单，因为tail是队列的最后一个节点，如果该节点需要取消，则直接把该节点的前继节点的next指向null，也就是把当前节点移除队列。出队的过程如下：</p>
<img src="/2017/03/15/深入理解AbstractQueuedSynchronizer（一）/QQ20170314-235854.png" alt="QQ20170314-235854.png" title="">
<p>注意：经验证，这里并没有设置node的prev为null。</p>
<p><strong>当前节点不是head的后继节点，也不是tail</strong></p>
<img src="/2017/03/15/深入理解AbstractQueuedSynchronizer（一）/QQ20170315-014004.png" alt="QQ20170315-014004.png" title="">
<p>这里将node的前继节点的next指向了node的后继节点，真正执行的代码就是如下一行：</p>
<p><code>compareAndSetNext(pred, predNext, next);</code></p>
<p><strong>当前节点是head的后继节点</strong></p>
<img src="/2017/03/15/深入理解AbstractQueuedSynchronizer（一）/QQ20170315-014948.png" alt="QQ20170315-014948.png" title="">
<p>这里直接unpark后继节点的线程，然后将next指向了自己。</p>
<p>这里可能会有疑问，既然要删除节点，为什么都没有对prev进行操作，而仅仅是修改了next？</p>
<p>要明确的一点是，这里修改指针的操作都是CAS操作，在AQS中所有以<code>compareAndSet</code>开头的方法都是尝试更新，并不保证成功，图中所示的都是执行成功的情况。</p>
<p>那么在执行cancelAcquire方法时，当前节点的前继节点有可能已经执行完并移除队列了（参见<code>setHead</code>方法），所以在这里只能用CAS来尝试更新，而就算是尝试更新，也只能更新next，不能更新prev，因为prev是不确定的，否则有可能会导致整个队列的不完整，例如把prev指向一个已经移除队列的node。</p>
<p>什么时候修改prev呢？其实prev是由其他线程来修改的。回去看下shouldParkAfterFailedAcquire方法，该方法有这样一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    node.prev = pred = pred.prev;</div><div class="line">&#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</div><div class="line">pred.next = node;</div></pre></td></tr></table></figure>
<p>该段代码的作用就是通过prev遍历到第一个不是取消状态的node，并修改prev。</p>
<p>这里为什么可以更新prev？因为shouldParkAfterFailedAcquire方法是在获取锁失败的情况下才能执行，因此进入该方法时，说明已经有线程获得锁了，并且在执行该方法时，当前节点之前的节点不会变化（因为只有当下一个节点获得锁的时候才会设置head），所以这里可以更新prev，而且不必用CAS来更新。</p>
<h3 id="AQS释放独占锁的实现"><a href="#AQS释放独占锁的实现" class="headerlink" title="AQS释放独占锁的实现"></a>AQS释放独占锁的实现</h3><p>释放通过unlock方法来实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync.release(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法调用了release方法，release是在AQS中定义的，看下release代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="comment">// 尝试释放锁</span></div><div class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">        <span class="comment">// 释放成功后unpark后继节点的线程</span></div><div class="line">        Node h = head;</div><div class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">            unparkSuccessor(h);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里首先尝试着去释放锁，成功了之后要去唤醒后继节点的线程，这样其他的线程才有机会去执行。</p>
<p>tryRelease代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是和tryAcquire方法类似？该方法也需要被重写，在Sync类中的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">    <span class="comment">// 这里是将锁的数量减1</span></div><div class="line">    <span class="keyword">int</span> c = getState() - releases;</div><div class="line">    <span class="comment">// 如果释放的线程和获取锁的线程不是同一个，抛出非法监视器状态异常</span></div><div class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">// 由于重入的关系，不是每次释放锁c都等于0，</span></div><div class="line">    <span class="comment">// 直到最后一次释放锁时，才会把当前线程释放</span></div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">        free = <span class="keyword">true</span>;</div><div class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 记录锁的数量</span></div><div class="line">    setState(c);</div><div class="line">    <span class="keyword">return</span> free;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当前线程被释放之后，需要唤醒下一个节点的线程，通过unparkSuccessor方法来实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * If status is negative (i.e., possibly needing signal) try</div><div class="line">     * to clear in anticipation of signalling.  It is OK if this</div><div class="line">     * fails or if status is changed by waiting thread.</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> ws = node.waitStatus;</div><div class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</div><div class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Thread to unpark is held in successor, which is normally</div><div class="line">     * just the next node.  But if cancelled or apparently null,</div><div class="line">     * traverse backwards from tail to find the actual</div><div class="line">     * non-cancelled successor.</div><div class="line">     */</div><div class="line">    Node s = node.next;</div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</div><div class="line">        s = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</div><div class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</div><div class="line">                s = t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</div><div class="line">        LockSupport.unpark(s.thread);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要功能就是要唤醒下一个线程，这里<code>s == null || s.waitStatus &gt; 0</code>判断后继节点是否为空或者是否是取消状态，然后从队列尾部向前遍历找到最前面的一个waitStatus小于0的节点，至于为什么从尾部开始向前遍历，回想一下cancelAcquire方法的处理过程，cancelAcquire只是设置了next的变化，没有设置prev的变化，在最后有这样一行代码：<code>node.next = node</code>，如果这时执行了unparkSuccessor方法，并且向后遍历的话，就成了死循环了，所以这时只有prev是稳定的。</p>
<p>到这里，通过ReentrantLock的lock和unlock来分析AQS独占锁的实现已经基本完成了，但ReentrantLock还有一个非公平锁NonfairSync。</p>
<p>其实NonfairSync和FairSync主要就是在获取锁的方式上不同，公平锁是按顺序去获取，而非公平锁是抢占式的获取，lock的时候先去尝试修改state变量，如果抢占成功，则获取到锁：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">        setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">    <span class="keyword">else</span></div><div class="line">        acquire(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非公平锁的tryAcquire方法调用了nonfairTryAcquire方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">    <span class="keyword">int</span> c = getState();</div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">            setExclusiveOwnerThread(current);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">        <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">        setState(nextc);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法比公平锁的tryAcquire方法在第二个if判断中少了一个是否存在前继节点判断，FairSync中的tryAcquire代码中的这个if语句块如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</div><div class="line">    compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">    setExclusiveOwnerThread(current);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文从ReentrantLock出发，比较完整的分析了AQS内部独占锁的实现，总体来说实现的思路很清晰，就是使用了标志位+队列的方式来处理锁的状态，包括锁的获取，锁的竞争以及锁的释放。在AQS中，state可以表示锁的数量，也可以表示其他状态，state的含义由子类去定义，自己只是提供了对state的维护。AQS通过state来实现线程对资源的访问控制，而state具体的含义要在子类中定义。</p>
<p>AQS在队列的维护上的实现比较复杂，尤其是节点取消时队列的维护，这里并不是通过一个线程来完成的。同时，AQS中大量的使用CAS来实现更新，这种更新能够保证状态和队列的完整性。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码：类加载器]]></title>
      <url>http://www.ideabuffer.cn/2016/12/24/Tomcat%E6%BA%90%E7%A0%81%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>在<a href="/2016/11/26/Tomcat源码：Bootstrap启动流程/">Tomcat源码：Bootstrap启动流程</a>文章中简单介绍过Java类加载器和Tomcat的类加载器，可以知道，每一个应用都有一个单独的类加载器来加载位于该应用下的WEB-INF/lib中的jar文件和WEB-INF/classes中的class文件，该应用不可以访问其他路径的class或jar。</p>
<p>Tomcat中实现自定义加载器还有另一个原因，就是为了提供自动重载的功能，如果当WEB-INF/classes目录或WEB-INF/lib目录中的类发生变化时，Web应用会重新加载这些类。</p>
<p>下面来看一下Tomcat中类加载器的类图：</p>
<img src="/2016/12/24/Tomcat源码：类加载器/QQ20161224-0@2x.png" alt="QQ20161224-0@2x.png" title="">
<a id="more"></a>
<h2 id="Loader接口"><a href="#Loader接口" class="headerlink" title="Loader接口"></a>Loader接口</h2><p>要实现Tomcat的类载入器必须遵守一些规则，例如，Web应用程序必须只能使用WEB-INF/classes目录或WEB-INF/lib目录中的类，不能访问其他路径中的类，即使这些类已经包含在当前Tomcat的JVM的CLASSPATH环境变量中。</p>
<p>Web应用程序的类加载器必须实现<code>org.apache.catalina.Loader</code>接口，其有一个实现类是<code>org.apache.catalina.loader.WebappLoader</code>，下面来看一下Loader接口的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Loader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getContext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getDelegate</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDelegate</span><span class="params">(<span class="keyword">boolean</span> delegate)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getReloadable</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReloadable</span><span class="params">(<span class="keyword">boolean</span> reloadable)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modified</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>org.apache.catalina.loader.WebappLoader</code>类作为Loader接口的实现，它的实例使用了<code>org.apache.catalina.loader.WebappClassLoader</code>作为其类加载器。</p>
<h2 id="WebappLoader类"><a href="#WebappLoader类" class="headerlink" title="WebappLoader类"></a>WebappLoader类</h2><p>WebappLoader类同样实现了<code>org.apache.catalina.LifeCycle</code>接口，可以通过与其相关联的容器来启动或关闭，下面看一下用于WebappLoader启动的startInternal方法代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">        log.debug(sm.getString(<span class="string">"webappLoader.starting"</span>));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (context.getResources() == <span class="keyword">null</span>) &#123;</div><div class="line">        log.info(<span class="string">"No resources for "</span> + context);</div><div class="line">        setState(LifecycleState.STARTING);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Construct a class loader based on our current repositories list</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 创建类载入器，是WebappClassLoaderBase类的实例</span></div><div class="line">        classLoader = createClassLoader();</div><div class="line">        <span class="comment">// 设置用来描述当前Web应用的资源信息的实例，是WebResourceRoot类型</span></div><div class="line">        <span class="comment">// 对于Context来说，是StandardRoot类的实例</span></div><div class="line">        classLoader.setResources(context.getResources());</div><div class="line">        classLoader.setDelegate(<span class="keyword">this</span>.delegate);</div><div class="line"></div><div class="line">        <span class="comment">// 设置类路径</span></div><div class="line">        <span class="comment">// Configure our repositories</span></div><div class="line">        setClassPath();</div><div class="line">        </div><div class="line">        <span class="comment">// 设置访问权限</span></div><div class="line">        setPermissions();</div><div class="line"></div><div class="line">        <span class="comment">// 启动WebappClassLoader</span></div><div class="line">        ((Lifecycle) classLoader).start();</div><div class="line"></div><div class="line">        String contextName = context.getName();</div><div class="line">        <span class="keyword">if</span> (!contextName.startsWith(<span class="string">"/"</span>)) &#123;</div><div class="line">            contextName = <span class="string">"/"</span> + contextName;</div><div class="line">        &#125;</div><div class="line">        ObjectName cloname = <span class="keyword">new</span> ObjectName(context.getDomain() + <span class="string">":type="</span> +</div><div class="line">                classLoader.getClass().getSimpleName() + <span class="string">",host="</span> +</div><div class="line">                context.getParent().getName() + <span class="string">",context="</span> + contextName);</div><div class="line">        Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>)</div><div class="line">            .registerComponent(classLoader, cloname, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        t = ExceptionUtils.unwrapInvocationTargetException(t);</div><div class="line">        ExceptionUtils.handleThrowable(t);</div><div class="line">        log.error( <span class="string">"LifecycleException "</span>, t );</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(<span class="string">"start: "</span>, t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setState(LifecycleState.STARTING);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在startInternal方法中，主要做了以下几种工作：</p>
<ol>
<li>创建类加载器</li>
<li>设置类加载器的WebResourceRoot</li>
<li>设置类路径</li>
<li>设置访问权限</li>
<li>启动WebappClassLoader</li>
</ol>
<h3 id="创建类加载器"><a href="#创建类加载器" class="headerlink" title="创建类加载器"></a>创建类加载器</h3><p>在前面介绍的Loader接口中，可以看到声明了<code>getClassLoader()</code>方法，但其中并没有声明<code>setClassLoader()</code>方法，是不是就只能使用默认的类加载器呢？</p>
<p>可以看到，在WebappLoader类中有一个属性是<code>loaderClass</code>，该属性的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String loaderClass = ParallelWebappClassLoader.class.getName();</div></pre></td></tr></table></figure>
<p>它是String类型，默认是<code>ParallelWebappClassLoader</code>类的全限定名，同时有一个<code>setLoaderClass</code>方法用来设置该属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoaderClass</span><span class="params">(String loaderClass)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.loaderClass = loaderClass;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可见，默认情况下<code>loaderClass</code>的值是<code>org.apache.catalina.loader.ParallelWebappClassLoader</code>，可以通过继承<code>WebappClassLoaderBase</code>类的方式来实现自己的类加载器，同时调用<code>setLoaderClass</code>方法来使用自己的类加载器。下面看一下<code>createClassLoader</code>方法的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> WebappClassLoaderBase <span class="title">createClassLoader</span><span class="params">()</span></span></div><div class="line">        <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 加载loaderClass</span></div><div class="line">    Class&lt;?&gt; clazz = Class.forName(loaderClass);</div><div class="line">    WebappClassLoaderBase classLoader = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 设置父加载器</span></div><div class="line">    <span class="keyword">if</span> (parentClassLoader == <span class="keyword">null</span>) &#123;</div><div class="line">        parentClassLoader = context.getParentClassLoader();</div><div class="line">    &#125;</div><div class="line">    Class&lt;?&gt;[] argTypes = &#123; ClassLoader.class &#125;;</div><div class="line">    Object[] args = &#123; parentClassLoader &#125;;</div><div class="line">    Constructor&lt;?&gt; constr = clazz.getConstructor(argTypes);</div><div class="line">    <span class="comment">// 实例化类加载器</span></div><div class="line">    classLoader = (WebappClassLoaderBase) constr.newInstance(args);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> classLoader;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可见该方法返回的类型是<code>WebappClassLoaderBase</code>类型，所以如果要自定义类加载器的话要继承该类。</p>
<h3 id="设置类路径"><a href="#设置类路径" class="headerlink" title="设置类路径"></a>设置类路径</h3><p>通过调用<code>setClassPath</code>方法来设置类路径，这里会遍历调用classLoader以及其父加载器的repositories，并保存到<code>classpath</code>变量中，这里先不过多介绍了。</p>
<h3 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h3><p>若使用了安全管理器，则<code>setPermissions</code>方法会为类加载器设置相关的目录访问权限，例如只能访问WEB-INF/classes和WEB-INF/lib目录，若没有使用安全管理器，则该方法并不做任何处理。</p>
<h2 id="WebappClassLoaderBase类"><a href="#WebappClassLoaderBase类" class="headerlink" title="WebappClassLoaderBase类"></a>WebappClassLoaderBase类</h2><p>该类的实例是具体负责类的载入工作的。它继承自<code>java.net.URLClassLoader</code>类。该类在载入的时候做了优化的方案，它会先缓存已经载入的类用来提升性能，同时，还会缓存载入失败的类，如果再次加载同一个类时，会从缓存中找，如果存在则直接抛出ClassNotFoundException异常，不会再尝试加载该类了。</p>
<p>下面看一下该类中几个重要的方法。</p>
<p>首先看下loadClass方法，这里对代码做了简化，只保留了最核心的功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</div><div class="line">        </div><div class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// 1. 先从缓存中查找，有则返回</span></div><div class="line">        <span class="comment">// (0) Check our previously loaded local class cache</span></div><div class="line">        clazz = findLoadedClass0(name);</div><div class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (resolve)</div><div class="line">                resolveClass(clazz);</div><div class="line">            <span class="keyword">return</span> (clazz);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 2. 从parent中查找</span></div><div class="line">        <span class="comment">// (0.1) Check our previously loaded class cache</span></div><div class="line">        clazz = findLoadedClass(name);</div><div class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (resolve)</div><div class="line">                resolveClass(clazz);</div><div class="line">            <span class="keyword">return</span> (clazz);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 获取扩展类加载器</span></div><div class="line">        ClassLoader javaseLoader = getJavaseClassLoader();</div><div class="line">        <span class="keyword">boolean</span> tryLoadingFromJavaseLoader;</div><div class="line">        <span class="keyword">try</span> &#123;            </div><div class="line">            tryLoadingFromJavaseLoader = (javaseLoader.getResource(resourceName) != <span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassCircularityError cce) &#123;            </div><div class="line">            tryLoadingFromJavaseLoader = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (tryLoadingFromJavaseLoader) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 3. 从扩展类加载器中查找</span></div><div class="line">                clazz = javaseLoader.loadClass(name);</div><div class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (resolve)</div><div class="line">                        resolveClass(clazz);</div><div class="line">                    <span class="keyword">return</span> (clazz);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 判断是否让parent代理</span></div><div class="line">        <span class="keyword">boolean</span> delegateLoad = delegate || filter(name, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 4. 如果为true，则先从parent中加载</span></div><div class="line">        <span class="comment">// (1) Delegate to our parent if requested</span></div><div class="line">        <span class="keyword">if</span> (delegateLoad) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                clazz = Class.forName(name, <span class="keyword">false</span>, parent);</div><div class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (resolve)</div><div class="line">                        resolveClass(clazz);</div><div class="line">                    <span class="keyword">return</span> (clazz);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 5. 从该classLoader中的库加载，如果加载成功则写入缓存中</span></div><div class="line">        <span class="comment">// (2) Search local repositories</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            clazz = findClass(name);</div><div class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;               </div><div class="line">                <span class="keyword">if</span> (resolve)</div><div class="line">                    resolveClass(clazz);</div><div class="line">                <span class="keyword">return</span> (clazz);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            <span class="comment">// Ignore</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 6. 以上都加载失败，则通过parent代理加载</span></div><div class="line">        <span class="comment">// (3) Delegate to parent unconditionally</span></div><div class="line">        <span class="keyword">if</span> (!delegateLoad) &#123;            </div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                clazz = Class.forName(name, <span class="keyword">false</span>, parent);</div><div class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (resolve)</div><div class="line">                        resolveClass(clazz);</div><div class="line">                    <span class="keyword">return</span> (clazz);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码中可以看到，在载入类时，会执行一下步骤：</p>
<ol>
<li>因为已经载入的类会缓存起来，所以先从缓存中查找；</li>
<li>若缓存中没有，则检查parent的缓存，即调用<code>java.lang.ClassLoader</code>类中的findLoadedClass()方法；</li>
<li>若以上两步都没有找到，则使用扩展类加载器进行加载，防止Web应用程序中的类覆盖JavaSE中的类；</li>
<li>判断是否需要代理加载，判断依据是若<code>delegate</code>或<code>filter(name)</code>为true，则让parent来加载；</li>
<li>从当前classLoader中的库加载，如果加载成功则写入缓存中；</li>
<li>以上都加载失败，若delegateLoad为<code>false</code>，则通过parent代理加载（因为为<code>true</code>时已经执行过了，所以不用考虑）；</li>
<li>若仍然未找到类，则抛出<code>ClassNotFoundException</code>。</li>
</ol>
<p>其中的<code>filter</code>方法用来判断要加载的类是否需要被过滤，有一些特殊的包以及子包下的类是不允许被载入进来的，具体可以参考代码。</p>
<p>下面看一下<code>findLoadedClass0</code>方法的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> Class&lt;?&gt; findLoadedClass0(String name) &#123;</div><div class="line"></div><div class="line">    String path = binaryNameToPath(name, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">    ResourceEntry entry = resourceEntries.get(path);</div><div class="line">    <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> entry.loadedClass;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法从缓存中查找名字为name的类，<code>resourceEntries</code>是一个<code>ConcurrentHashMap</code>类型的实例，它保存了加载成功的类，每一个类的信息会封装成一个<code>ResourceEntry</code>的实例，该类的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceEntry</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The "last modified" time of the origin file at the time this resource</div><div class="line">     * was loaded, in milliseconds since the epoch.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> lastModified = -<span class="number">1</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Loaded class.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> Class&lt;?&gt; loadedClass = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>loadClass会调用findClass方法，下面是findClass的精简过后的代码，去掉了securityManager和log：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line"></div><div class="line">    Class&lt;?&gt; clazz = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 尝试从本地库加载</span></div><div class="line">            clazz = findClassInternal(name);</div><div class="line">        &#125; <span class="keyword">catch</span>(AccessControlException ace) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name, ace);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果没有找到并且存在外部的库，则请求parent加载</span></div><div class="line">        <span class="keyword">if</span> ((clazz == <span class="keyword">null</span>) &amp;&amp; hasExternalRepositories) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                clazz = <span class="keyword">super</span>.findClass(name);</div><div class="line">            &#125; <span class="keyword">catch</span>(AccessControlException ace) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name, ace);</div><div class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</div><div class="line">                <span class="keyword">throw</span> e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (clazz);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里调用了<code>findClassInternal</code>方法，看下这个方法精简后的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClassInternal(String name) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    String path = binaryNameToPath(name, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">    ResourceEntry entry = resourceEntries.get(path);</div><div class="line">    WebResource resource = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</div><div class="line">        resource = resources.getClassLoaderResource(path);</div><div class="line">        </div><div class="line">        <span class="comment">// 对应的class不存在，返回null</span></div><div class="line">        <span class="keyword">if</span> (!resource.exists()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        entry = <span class="keyword">new</span> ResourceEntry();</div><div class="line">        entry.lastModified = resource.getLastModified();</div><div class="line">        </div><div class="line">        <span class="comment">// 把entry添加到本地库中</span></div><div class="line">        <span class="comment">// resourceEntries虽然是ConcurrentHashMap类型</span></div><div class="line">        <span class="comment">// 但这里为了保证添加后的entry是同一个对象，所以做了同步</span></div><div class="line">        <span class="comment">// Add the entry in the local resource repository</span></div><div class="line">        <span class="keyword">synchronized</span> (resourceEntries) &#123;</div><div class="line">            <span class="comment">// Ensures that all the threads which may be in a race to load</span></div><div class="line">            <span class="comment">// a particular class all end up with the same ResourceEntry</span></div><div class="line">            <span class="comment">// instance</span></div><div class="line">            ResourceEntry entry2 = resourceEntries.get(path);</div><div class="line">            <span class="keyword">if</span> (entry2 == <span class="keyword">null</span>) &#123;</div><div class="line">                resourceEntries.put(path, entry);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                entry = entry2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// entry.loadedClass不为空，表示已经加载过了，直接返回</span></div><div class="line">    Class&lt;?&gt; clazz = entry.loadedClass;</div><div class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> clazz;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</div><div class="line">        clazz = entry.loadedClass;</div><div class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> clazz;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (resource == <span class="keyword">null</span>) &#123;</div><div class="line">            resource = resources.getClassLoaderResource(path);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 对应的class不存在，返回null</span></div><div class="line">        <span class="keyword">if</span> (!resource.exists()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] binaryContent = resource.getContent();</div><div class="line">        Manifest manifest = resource.getManifest();</div><div class="line">        URL codeBase = resource.getCodeBase();</div><div class="line">        Certificate[] certificates = resource.getCertificates();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (transformers.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// If the resource is a class just being loaded, decorate it</span></div><div class="line">            <span class="comment">// with any attached transformers</span></div><div class="line">            String className = name.endsWith(CLASS_FILE_SUFFIX) ?</div><div class="line">                    name.substring(<span class="number">0</span>, name.length() - CLASS_FILE_SUFFIX.length()) : name;</div><div class="line">            String internalName = className.replace(<span class="string">"."</span>, <span class="string">"/"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (ClassFileTransformer transformer : <span class="keyword">this</span>.transformers) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">byte</span>[] transformed = transformer.transform(</div><div class="line">                            <span class="keyword">this</span>, internalName, <span class="keyword">null</span>, <span class="keyword">null</span>, binaryContent);</div><div class="line">                    <span class="keyword">if</span> (transformed != <span class="keyword">null</span>) &#123;</div><div class="line">                        binaryContent = transformed;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (IllegalClassFormatException e) &#123;</div><div class="line">                    log.error(sm.getString(<span class="string">"webappClassLoader.transformError"</span>, name), e);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Looking up the package</span></div><div class="line">        String packageName = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> pos = name.lastIndexOf(<span class="string">'.'</span>);</div><div class="line">        <span class="keyword">if</span> (pos != -<span class="number">1</span>)</div><div class="line">            packageName = name.substring(<span class="number">0</span>, pos);</div><div class="line"></div><div class="line">        Package pkg = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (packageName != <span class="keyword">null</span>) &#123;</div><div class="line">            pkg = getPackage(packageName);</div><div class="line">            <span class="comment">// Define the package (if null)</span></div><div class="line">            <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (manifest == <span class="keyword">null</span>) &#123;</div><div class="line">                        definePackage(packageName, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        definePackage(packageName, manifest, codeBase);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">                pkg = getPackage(packageName);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            clazz = defineClass(name, binaryContent, <span class="number">0</span>,</div><div class="line">                    binaryContent.length, <span class="keyword">new</span> CodeSource(codeBase, certificates));</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedClassVersionError ucve) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedClassVersionError(</div><div class="line">                    ucve.getLocalizedMessage() + <span class="string">" "</span> +</div><div class="line">                    sm.getString(<span class="string">"webappClassLoader.wrongVersion"</span>,</div><div class="line">                            name));</div><div class="line">        &#125;</div><div class="line">        entry.loadedClass = clazz;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> clazz;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>逻辑还是比较简单的：</p>
<ol>
<li>从缓存中查找，若没有找到执行第2步，找到执行第4步；</li>
<li>判断class是否存在，不存在返回null，否则执行第3步；</li>
<li>创建一个entry，添加到resourceEntries中；</li>
<li>判断entry.loadedClass是否为空，为空返回null；</li>
<li>判断class是否存在，不存在返回null；</li>
<li>调用defineClass方法加载；</li>
<li>设置entry.loadedClass。</li>
</ol>
<p>本文中介绍了Tomcat类加载器有关的类和方法的介绍，下篇文章会介绍一下具体的使用过程以及Tomcat是如何加载每个Web应用中的类。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMX：Dynamic MBean]]></title>
      <url>http://www.ideabuffer.cn/2016/12/21/JMX%EF%BC%9ADynamic-MBean/</url>
      <content type="html"><![CDATA[<p>Dynamic MBean不需要自定义MBean接口，只需要实现DynamicMBean接口即可，Dynamic MBean没有任何明显些在代码里的属性和方法，所有的属性和方法都是通过反射结合JMX提供的辅助元数据从而动态生成。换句话说，它可以使用动态的配置来实现一个类中的哪些方法或者属性可以被注册到jmx去管理。</p>
<p>下面实现一个具体的代码，其中主要涉及3个类，分别是Hello,HelloDynamic和HelloAgent。其中Hello是一个普通的JavaBean，可以看做实际被管理的bean；HelloDynamic是一个动态的MBean，通过它来代理Hello类型的JavaBean，对其暴露一些需要被管理的属性和方法；HelloAgent中有main方法，用于启动。这里同样使用了<code>HtmlAdaptorServer</code>来通过浏览器查看和管理MBean。</p>
<a id="more"></a>
<p>下面看一下Hello类的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name = <span class="string">"Hello World"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很普通，没必要说了，再看一下HelloDynamic类的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloDynamic</span> <span class="keyword">implements</span> <span class="title">DynamicMBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Hello hello = <span class="keyword">new</span> Hello();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;MBeanAttributeInfo&gt; attributeInfos = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;MBeanConstructorInfo&gt; constructorInfos = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;MBeanOperationInfo&gt; operationInfos = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;MBeanNotificationInfo&gt; notificationInfos = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MBeanInfo mBeanInfo;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloDynamic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            init();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</div><div class="line">        buildDynamicInfo();</div><div class="line">        mBeanInfo = createMBeanInfo();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建需要被管理的构造器、属性和方法</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span> NoSuchMethodException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildDynamicInfo</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</div><div class="line">        constructorInfos.add(<span class="keyword">new</span> MBeanConstructorInfo(<span class="string">"Hello构造器"</span>, hello.getClass().getConstructors()[<span class="number">0</span>]));</div><div class="line">        attributeInfos.add(<span class="keyword">new</span> MBeanAttributeInfo(<span class="string">"name"</span>, <span class="string">"java.lang.String"</span>, <span class="string">"name属性"</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>));</div><div class="line">        operationInfos.add(<span class="keyword">new</span> MBeanOperationInfo(<span class="string">"print()方法."</span>, hello.getClass().getMethod(<span class="string">"print"</span>, <span class="keyword">null</span>)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建MBeanInfo对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> MBeanInfo <span class="title">createMBeanInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MBeanInfo(<span class="keyword">this</span>.getClass().getName(),</div><div class="line">                <span class="string">"HelloDynamic"</span>,</div><div class="line">                attributeInfos.toArray(<span class="keyword">new</span> MBeanAttributeInfo[attributeInfos.size()]),</div><div class="line">                constructorInfos.toArray(<span class="keyword">new</span> MBeanConstructorInfo[constructorInfos.size()]),</div><div class="line">                operationInfos.toArray(<span class="keyword">new</span> MBeanOperationInfo[operationInfos.size()]),</div><div class="line">                notificationInfos.toArray(<span class="keyword">new</span> MBeanNotificationInfo[notificationInfos.size()])</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String attribute)</span> <span class="keyword">throws</span> AttributeNotFoundException, MBeanException, ReflectionException </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> PropertyUtils.getProperty(hello, attribute);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(Attribute attribute)</span> <span class="keyword">throws</span> AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PropertyUtils.setProperty(hello, attribute.getName(), attribute.getValue());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AttributeList <span class="title">getAttributes</span><span class="params">(String[] attributes)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (attributes == <span class="keyword">null</span> || attributes.length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            AttributeList attrList = <span class="keyword">new</span> AttributeList();</div><div class="line">            <span class="keyword">for</span> (String attrName : attributes) &#123;</div><div class="line">                Object obj = <span class="keyword">this</span>.getAttribute(attrName);</div><div class="line">                Attribute attribute = <span class="keyword">new</span> Attribute(attrName, obj);</div><div class="line">                attrList.add(attribute);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> attrList;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AttributeList <span class="title">setAttributes</span><span class="params">(AttributeList attributes)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (attributes == <span class="keyword">null</span> || attributes.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> attributes;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (Object attribute1 : attributes) &#123;</div><div class="line">                Attribute attribute = (Attribute) attribute1;</div><div class="line">                setAttribute(attribute);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> attributes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(String actionName, Object[] params, String[] signature)</span> <span class="keyword">throws</span> MBeanException, ReflectionException </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Method methods[] = hello.getClass().getMethods();</div><div class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">                String name = method.getName();</div><div class="line">                <span class="keyword">if</span> (name.equals(actionName)) &#123;</div><div class="line">                    Object result = method.invoke(hello, params);</div><div class="line">                    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">                        System.out.println(result);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MBeanInfo <span class="title">getMBeanInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBeanInfo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里实现了<code>DynamicMBean</code>接口，可见该类中的方法都是通过反射来工作的，这样就可以理解为什么叫做Dynamic MBean了，利用反射可以动态的增加或删除属性和方法。</p>
<p>HelloAgent类的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAgent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedObjectNameException, NotCompliantMBeanException, InstanceAlreadyExistsException, MBeanRegistrationException </span>&#123;</div><div class="line">        String domain = <span class="string">"DynamicTest"</span>;</div><div class="line">        MBeanServer server = MBeanServerFactory.createMBeanServer();</div><div class="line">        <span class="comment">//创建DynamicMBean对象</span></div><div class="line">        HelloDynamic helloDynamic = <span class="keyword">new</span> HelloDynamic();</div><div class="line"></div><div class="line">        HtmlAdaptorServer htmlAdaptorServer = <span class="keyword">new</span> HtmlAdaptorServer();</div><div class="line">        htmlAdaptorServer.setPort(<span class="number">9999</span>);</div><div class="line">        ObjectName objName = <span class="keyword">new</span> ObjectName(domain + <span class="string">":name=HelloDynamic"</span>);</div><div class="line">        ObjectName htmlObjName = <span class="keyword">new</span> ObjectName(domain + <span class="string">":name=HtmlAdaptor"</span>);</div><div class="line">        <span class="comment">// 注册MBean</span></div><div class="line">        server.registerMBean(helloDynamic, objName);</div><div class="line">        <span class="comment">// 注册adaptor</span></div><div class="line">        server.registerMBean(htmlAdaptorServer, htmlObjName);</div><div class="line">        <span class="comment">//启动服务</span></div><div class="line">        htmlAdaptorServer.start();</div><div class="line">        System.out.println(<span class="string">"starting..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果看过前两篇的JMX内容，那么可以看出，没什么不一样的地方，我们运行一下该程序，打开浏览器，输入<a href="http://localhost:9999" target="_blank" rel="external">http://localhost:9999</a> 查看：</p>
<img src="/2016/12/21/JMX：Dynamic-MBean/QQ20161222-0@2x.png" alt="QQ20161222-0@2x.png" title="">
<p>点击<code>name=HelloDynamic</code>后，可以看到，Hello中的属性和方法已经被注册进来了：</p>
<img src="/2016/12/21/JMX：Dynamic-MBean/QQ20161222-0.png" alt="QQ20161222-0.png" title="">
<p>点击<code>print</code>按钮后，在控制台可以看到效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">starting...</div><div class="line">Hello World</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMX：Model MBean]]></title>
      <url>http://www.ideabuffer.cn/2016/12/21/JMX%EF%BC%9AModel-MBean/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMX：Notification]]></title>
      <url>http://www.ideabuffer.cn/2016/12/18/JMX%EF%BC%9ANotification/</url>
      <content type="html"><![CDATA[<h2 id="Notification介绍"><a href="#Notification介绍" class="headerlink" title="Notification介绍"></a>Notification介绍</h2><p>从前两篇文章可以知道，MBean提供的管理接口允许代理对其管理资源进行控制和配置。然而，对管理复杂的分布式系统来说，这些接口只是提供了一部分功能。一般来说，管理应用程序需要对管理的资源进行监控，以便发生一些行为或者状态变化时能够作出相应的反映。</p>
<p>Notification起到了MBean之间的沟通桥梁的作用。JMX Notification模型和Java Event模型类似，将一些重要的信息，状态的转变，数据的变更传递给Notification Listener，以便资源的管理。</p>
<p>JMX的Notification由四部分组成：</p>
<ul>
<li>Notification，一个通用的事件类型，该类标识事件的类型，可以被直接使用，也可以根据传递的事件的需要而被扩展。</li>
<li>NotificationListener，接收通知的对象需实现此接口。</li>
<li>NotificationFilter，作为通知过滤器的对象需实现此接口，为通知监听者提供了一个过滤通知的过滤器。</li>
<li>NotificationBroadcaster，通知发送者需实现此接口，该接口允许希望得到通知的监听者注册。</li>
</ul>
<a id="more"></a>
<h2 id="Notification实例"><a href="#Notification实例" class="headerlink" title="Notification实例"></a>Notification实例</h2><p>下面写一个具体的例子来演示一下Notification的使用。</p>
<p>假设Jack要与Rose打招呼，Jack会先开口，说”Hello Rose!”，而Rose会听到，下面看一下Jack的MBean：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JackMBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有一个<code>sayHello</code>方法，看一下它的实现类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jack</span> <span class="keyword">extends</span> <span class="title">NotificationBroadcasterSupport</span> <span class="keyword">implements</span> <span class="title">JackMBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Jack said : Hello Rose!"</span>);</div><div class="line">        Notification notification = <span class="keyword">new</span> Notification(</div><div class="line">                <span class="string">"jack"</span>,  <span class="comment">// 类型</span></div><div class="line">                <span class="keyword">this</span>, <span class="comment">// 发送通知的源</span></div><div class="line">                <span class="number">1</span>, <span class="comment">// 序号</span></div><div class="line">                System.currentTimeMillis(), <span class="comment">// 时间戳</span></div><div class="line">                <span class="string">"Hello Rose!"</span> <span class="comment">// 消息内容</span></div><div class="line">        );</div><div class="line">        <span class="keyword">super</span>.sendNotification(notification);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Jack在打完招呼后创建了一个<code>Notification</code>对象用来传递一个通知。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoseMBean</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heard</span><span class="params">( String message)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Rose的MBean只有一个<code>heard</code>方法来显示听到的内容，实现类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rose</span> <span class="keyword">implements</span> <span class="title">RoseMBean</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heard</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Rose heard : "</span> + message);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非常简单，下面创建一个<code>NotificationListener</code>，作用是在接收到<code>sayHello</code>方法中传递的通知后应该做什么：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JackListener</span> <span class="keyword">implements</span> <span class="title">NotificationListener</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNotification</span><span class="params">(Notification notification, Object handback)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Type="</span> + notification.getType());</div><div class="line">        System.out.println(<span class="string">"Source="</span> + notification.getSource());</div><div class="line">        System.out.println(<span class="string">"Seq="</span> + notification.getSequenceNumber());</div><div class="line">        System.out.println(<span class="string">"send time="</span> + notification.getTimeStamp());</div><div class="line">        System.out.println(<span class="string">"message="</span> + notification.getMessage());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (handback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (handback <span class="keyword">instanceof</span> Rose) &#123;</div><div class="line">                Rose rose = (Rose) handback;</div><div class="line">                rose.heard(notification.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>handleNotification</code>方法先打印了通知的信息，然后调用rose的<code>heard</code>方法。将各个MBean注册到<code>MBeanServer</code>中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAgent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedObjectNameException, NotCompliantMBeanException, InstanceAlreadyExistsException, MBeanRegistrationException </span>&#123;</div><div class="line">        MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();</div><div class="line">        ObjectName jackName = <span class="keyword">new</span> ObjectName(<span class="string">"TestMBean:name=Jack"</span>);</div><div class="line">        Jack jack = <span class="keyword">new</span> Jack();</div><div class="line">        mBeanServer.registerMBean(jack, jackName);</div><div class="line"></div><div class="line">        ObjectName adapterName = <span class="keyword">new</span> ObjectName(<span class="string">"TestMBean:name=htmladapter,port=9999"</span>);</div><div class="line">        HtmlAdaptorServer adapter = <span class="keyword">new</span> HtmlAdaptorServer();</div><div class="line">        adapter.setPort(<span class="number">9999</span>);</div><div class="line">        mBeanServer.registerMBean(adapter,adapterName);</div><div class="line"></div><div class="line">        Rose rose = <span class="keyword">new</span> Rose();</div><div class="line">        ObjectName roseName = <span class="keyword">new</span> ObjectName(<span class="string">"TestMBean:name=Rose"</span>);</div><div class="line">        mBeanServer.registerMBean(rose, roseName);</div><div class="line"></div><div class="line"></div><div class="line">        jack.addNotificationListener(<span class="keyword">new</span> JackListener(), <span class="keyword">null</span>, rose);</div><div class="line"></div><div class="line">        adapter.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后，在浏览器中输入<a href="http://localhost:9999，查看：" target="_blank" rel="external">http://localhost:9999，查看：</a></p>
<img src="/2016/12/18/JMX：Notification/QQ20161218-0.png" alt="QQ20161218-0.png" title="">
<p>点击<code>name=Java</code></p>
<img src="/2016/12/18/JMX：Notification/QQ20161218-1.png" alt="QQ20161218-1.png" title="">
<p>再点击<code>sayHello</code>按钮，查看控制台，会输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Jack said : Hello Rose!</div><div class="line">Type=jack</div><div class="line">Source=cn.ideabuffer.jmx.notification.Jack@3a43df66</div><div class="line">Seq=1</div><div class="line">send time=1482050137393</div><div class="line">message=Hello Rose!</div><div class="line">Rose heard : Hello Rose!</div></pre></td></tr></table></figure>
<h2 id="Notification的实现"><a href="#Notification的实现" class="headerlink" title="Notification的实现"></a>Notification的实现</h2><p>下面可以看一下具体的源代码来了解一下Notification工作的流程。</p>
<p>在<code>Jack</code>类中调用了<code>super.sendNotification(notification);</code>后，会执行<code>NotificationBroadcasterSupport</code>类中的<code>sendNotification</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendNotification</span><span class="params">(Notification notification)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (notification == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> enabled;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (ListenerInfo li : listenerList) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            enabled = li.filter == <span class="keyword">null</span> ||</div><div class="line">                li.filter.isNotificationEnabled(notification);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (logger.debugOn()) &#123;</div><div class="line">                logger.debug(<span class="string">"sendNotification"</span>, e);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (enabled) &#123;</div><div class="line">            executor.execute(<span class="keyword">new</span> SendNotifJob(notification, li));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单，就是遍历所有注册的listener，然后把notification和listener封装成一个<code>SendNotifJob</code>对象，在线程池中执行，看一下<code>SendNotifJob</code>的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SendNotifJob</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendNotifJob</span><span class="params">(Notification notif, ListenerInfo listenerInfo)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.notif = notif;</div><div class="line">        <span class="keyword">this</span>.listenerInfo = listenerInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            handleNotification(listenerInfo.listener,</div><div class="line">                               notif, listenerInfo.handback);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (logger.debugOn()) &#123;</div><div class="line">                logger.debug(<span class="string">"SendNotifJob-run"</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Notification notif;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ListenerInfo listenerInfo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类实现了<code>Runnable</code>接口，在<code>run</code>方法中，调用<code>handleNotification</code>方法，看一下该方法的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleNotification</span><span class="params">(NotificationListener listener,</span></span></div><div class="line">                                      Notification notif, Object handback) &#123;</div><div class="line">    listener.handleNotification(notif, handback);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里调用了listener的<code>handleNotification</code>方法，在<code>JackListener</code>中实现的就是该方法。下面是<code>NotificationListener</code>接口的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NotificationListener</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">EventListener</span>   </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNotification</span><span class="params">(Notification notification, Object handback)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该接口只有一个方法，同时<code>NotificationListener</code>继承自<code>java.util.EventListener</code>，这个接口并没有任何方法的定义，仅仅代表一种类型。</p>
<p>看到这就应该很好理解了，这就是观察者模式的实现，不熟悉的话可以参考一下之前的文章：<a href="/2016/12/04/设计模式：观察者模式/">设计模式：观察者模式</a>，其实还有一个更具体的例子，参考<a href="/2016/12/05/Tomcat源码：生命周期/">Tomcat源码：生命周期</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMX：Standard MBean]]></title>
      <url>http://www.ideabuffer.cn/2016/12/14/JMX%EF%BC%9AStandard-MBean/</url>
      <content type="html"><![CDATA[<p>Standard MBean（标准管理构件）是JMX管理构件中最简单的一种，只需要开发一个MBean接口，一个实现MBean接口的类，并且把他们注册到MBeanServer中就可以了。</p>
<p>下面例子使用的是Java8，其中已经包含了jmx。该例中使用了<code>HtmlAdaptorServer</code>类，需要用到jmxtools.jar, 可以到 <a href="http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-java-plat-419418.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-java-plat-419418.html</a> 下载，下载后的文件是jmx-1_2_1-ri.zip，解压后将jmxtools.jar导入到项目中即可。</p>
<a id="more"></a>
<h2 id="Standard-MBean实例"><a href="#Standard-MBean实例" class="headerlink" title="Standard MBean实例"></a>Standard MBean实例</h2><p>首先定义一个MBean的接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloMBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>包含在MBean中方法都将是可以被管理的。MBean起名是有规范的，后缀必须是MBean，否则会报错。</p>
<p>再创建一个要被管理的类<code>Hello</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">implements</span> <span class="title">HelloMBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello : "</span> + name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类有一个<code>name</code>属性，实现了<code>sayHello</code>方法用来输出<code>name</code>属性。</p>
<p>再创建一个Agent类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAgent</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">// 以下两种创建MBeanServer的方式都可以，但第一种不可以通过JConsole来查看</span></div><div class="line"><span class="comment">//        MBeanServer mBeanServer = MBeanServerFactory.createMBeanServer();</span></div><div class="line">        MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();</div><div class="line">        </div><div class="line">        <span class="comment">// 使用默认的domain</span></div><div class="line">        String domain = mBeanServer.getDefaultDomain();</div><div class="line">        ObjectName objectName = <span class="keyword">new</span> ObjectName(domain+ <span class="string">":name=Hello"</span>);</div><div class="line">        <span class="comment">// 注册到mBeanServer中</span></div><div class="line">        mBeanServer.registerMBean(<span class="keyword">new</span> Hello(), objectName);</div><div class="line"></div><div class="line">        <span class="comment">// 这里的port只不过是一个名字，取什么都无所谓</span></div><div class="line">        ObjectName adapterName = <span class="keyword">new</span> ObjectName(domain +</div><div class="line">                <span class="string">":name=htmladapter,port=8888"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 创建一个AdaptorServer，这个类将决定MBean的管理界面</span></div><div class="line">        <span class="comment">// HtmlAdaptorServer属于分布服务层, 提供了一个HtmlAdaptor</span></div><div class="line">        <span class="comment">// 支持Http访问协议，并且有一个HTML的管理界面</span></div><div class="line">        <span class="comment">// HtmlAdaptor是一个简单的HttpServer，它将Http请求转换为JMX Agent的请求</span></div><div class="line">        HtmlAdaptorServer adapter = <span class="keyword">new</span> HtmlAdaptorServer();</div><div class="line">        <span class="comment">// 设置访问的端口</span></div><div class="line">        adapter.setPort(<span class="number">8888</span>);</div><div class="line">        adapter.start();</div><div class="line">        mBeanServer.registerMBean(adapter, adapterName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ObjectName介绍"><a href="#ObjectName介绍" class="headerlink" title="ObjectName介绍"></a>ObjectName介绍</h2><p>其中介绍一下<code>ObjectName</code>，这个类的实例表示一个MBean的对象名，下面的内容参考自JDK文档：</p>
<blockquote>
<p>表示 MBean 的对象名，或者能够与多个 MBean 名称相匹配的模式。此类的实例是不可变的。</p>
<p>可使用此类的实例表示：</p>
<ul>
<li>对象名</li>
<li>查询的上下文中的对象名模式</li>
</ul>
<p>由两部分（域和键属性）组成的对象名。</p>
<p><em>域</em> 是一个不包括冒号字符 (:) 的由字符组成的字符串。建议域不要包含字符串 “//“，该字符串保留供将来使用。</p>
<p>如果域至少包括一个通配符星号 (*) 或问号 (?)，则该对象名就是一个模式。星号匹配任意零或多个字符的序列，而问号则匹配任意单个字符。</p>
<p>如果域为空，则由 MBean 服务器（在其中使用 ObjectName）的默认域 在特定的上下文中替换它。</p>
<p><em>键</em>属性 是一个无序的键和关联值的集合。</p>
<p>每个<em>键</em> 都是一个由字符组成的非空字符串，不可以包含任何逗号 (,)、等号 (=)、冒号、星号或问号字符。在一个给定的 ObjectName 中，同一个键不能出现两次。</p>
<p>每个与键关联的值 都是由字符组成的字符串，或者由引号括起来或者不括起来。</p>
<p>无引号值 可能是一个空的字符串，不包含任意逗号、等号、冒号和引号。</p>
<p>如果无引号值 包括至少一个通配符星号或问号，则该对象名就是一个属性值模式。</p>
<p>有引号值 由一个引号 (“)，后跟可能为空的字符串，然后是另一个引号所组成。在字符串中，反斜线 () 具有特殊的含义，它后面必须是下列某个字符：</p>
<ul>
<li>另一个反斜线。第二个反斜线不具有特殊的含义，两个字符表示单个反斜线。</li>
<li>字符 ‘n’。这两个字符表示新行（Java 中的 ‘\n’）。</li>
<li>引号。这两个字符表示一个引号，并且不将该引号视为有引号值的终止。为了使有引号值有效，必须有结束的闭合引号。</li>
<li>问号 (?) 或星号 (*)。这两个字符分别表示一个问号或一个星号。<br>引号可能不出现在有引号值中，但紧跟在奇数个连续反斜线后的情况除外。</li>
</ul>
<p>括住有引号值的引号和该值中的所有反斜线都被视为该值的一部分。</p>
<p>如果<em>引号值</em> 包括至少一个星号或问号，且星号或问号之前没有反斜杠，则将其视为通配符，并且该对象名是一个属性值模式。星号匹配任意零或多个字符的序列，而问号则匹配任意单个字符。</p>
<p>ObjectName 可能是一种<em>属性列表模式</em>。在这种情况下，它可以有零个或多个键和关联值。它与非模式的 ObjectName 匹配，该 ObjectName 的域与相同的键和关联值匹配且包含它们，并且可能包括其他键和值。</p>
<p>当至少有一个 ObjectName 的有引号 或无引号 键属性值包含通配符星号或问号（如上所述）时，ObjectName 是一个属性值模式。在这种情况下，它有一个或多个键以及关联值，并至少有一个值包含通配符。它与一个无模式 ObjectName 相匹配，该 ObjectName 的域与之匹配，或者包含值与之匹配的相同键；如果属性值模式也是属性列表模式，则无模式 ObjectName 也可以包含其他键和值。</p>
<p>如果 ObjectName 是属性列表模式 或属性值模式，或者两者都是，则它是一个属性模式。</p>
<p>如果某个 ObjectName 的域包含通配符或者 ObjectName 是一个属性模式，则该 ObjectName 是一个模式。</p>
<p>如果某个 ObjectName 不是一个模式，那么它必须至少包含一个键及其关联值。</p>
<p>ObjectName 模式的示例有：</p>
<ul>
<li>*:type=Foo,name=Bar 匹配键的具体设置为 type=Foo,name=Bar 的任何域中的名称。<br>d:type=Foo,name=Bar,* 匹配具有键 type=Foo,name=Bar 以及 0 或其他键的域 d 中的名称。</li>
<li>*:type=Foo,name=Bar,* 匹配具有键 type=Foo,name=Bar 以及 0 或其他键的域中的名称。</li>
<li>d:type=F?o,name=Bar 将与诸如 d:type=Foo,name=Bar 和 d:type=Fro,name=Bar 之类的键和名称匹配。</li>
<li>d:type=F*o,name=Bar 将与诸如 d:type=Fo,name=Bar 和 d:type=Frodo,name=Bar 之类的键和名称匹配。</li>
<li>d:type=Foo,name=”B*“ 将与诸如 d:type=Foo,name=”Bling” 之类的键和名称匹配。通配符在引号中也能被识别，并且像其他特殊字符一样可以使用 \ 转义。</li>
</ul>
<p>按顺序使用下列元素可将 ObjectName 写为 String：</p>
<ul>
<li>域。</li>
<li>一个冒号 (:)。</li>
<li>如下定义的键属性列表。<br>写为 String 的键属性列表是一个逗号分隔的元素列表。每个元素都是一个星号或一个键属性。键属性由键、等号 (=) 和关联值组成。</li>
</ul>
<p>键属性列表中最多只能有一个元素为星号。如果键属性列表包含星号元素，则该 ObjectName 是一个属性列表模式。</p>
<p>在表示 ObjectName 的 String 中，空格没有任何特殊含意。例如，String：</p>
<p>domain: key1 = value1 , key2 = value2</p>
<p>表示具有两个键的 ObjectName。每个键的名字包含 6 个字符，其中第一个和最后一个都是空格。与键 “ key1 “ 相关联的值同样以空格开头和结尾。</p>
<p>除了上述提及的字符限制外，ObjectName 的任何部分都不能包含换行符 (‘\n’)，无论这些部分是域、键还是值（无引号值和有引号值）。可使用序列 \n 将换行符表示为有引号值。</p>
<p>不管使用何种构造方法构建 ObjectName，关于特殊字符和引号的规则都适用。</p>
<p>为了避免不同供应商所提供的 MBean 之间出现冲突，提供了一个有用的约定：域名由指定该 MBean 的企业的反向 DNS 名开始，后跟一个句点和一个字符串，由该企业决定该字符串的解释。例如，由 Sun Microsystems Inc.（DNS 名是 sun.com）所指定的 MBean 将有 com.sun.MyDomain 这样的域。这基本上与 Java 语言包名的约定相同。</p>
</blockquote>
<h2 id="使用HtmlAdaptorServer查看MBean"><a href="#使用HtmlAdaptorServer查看MBean" class="headerlink" title="使用HtmlAdaptorServer查看MBean"></a>使用HtmlAdaptorServer查看MBean</h2><p>下面运行一下该程序，访问<a href="http://localhost:8888来查看一下：" target="_blank" rel="external">http://localhost:8888来查看一下：</a></p>
<img src="/2016/12/14/JMX：Standard-MBean/屏幕快照%202016-12-14%20下午11.50.40.png" alt="屏幕快照 2016-12-14 下午11.50.40.png" title="">
<p>可以看到在默认域名下注册的“name=Hello”，点进去后可以看到MBean中的属性和方法：</p>
<img src="/2016/12/14/JMX：Standard-MBean/屏幕快照%202016-12-14%20下午11.37.23.png" alt="屏幕快照 2016-12-14 下午11.37.23.png" title="">
<p>可以看到，在<code>Access</code>列中的值是<code>RW</code>，说明是可读写的，因为在<code>HelloMBean</code>接口中定义了<code>setName</code>和<code>getName</code>方法，如果只定义了<code>getName</code>方法，<code>Access</code>的值将会是<code>RO</code>，表示是只读的。在<code>Name</code>列中的值是<code>Name</code>，这个是和getter和setter方法对应的，并不与定义的<code>name</code>属性对应。在<code>Value</code>列中可以修改<code>Name</code>的值，然后点击<code>Apply</code>按钮后，就可以将属性的值设置到MBean当中。</p>
<p>在下面的operations中，可以看到之前定义的<code>sayHello</code>方法，点击这个按钮后，可以在控制台上查看输出的结果。例如，将<code>Name</code>的值设置为123，点击<code>Apply</code>按钮，然后点击<code>sayHello</code>按钮，页面显示：</p>
<img src="/2016/12/14/JMX：Standard-MBean/屏幕快照%202016-12-14%20下午11.46.53.png" alt="屏幕快照 2016-12-14 下午11.46.53.png" title="">
<p>在控制台中可以看到输出的结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello : 123</div></pre></td></tr></table></figure>
<h2 id="使用jconsole查看MBean"><a href="#使用jconsole查看MBean" class="headerlink" title="使用jconsole查看MBean"></a>使用jconsole查看MBean</h2><p>还可以通过<code>jconsole</code>来查看MBean，可以通过<code>jconsole</code>作为客户端来管理MBean。</p>
<p>将本例中的<code>HelloAgent</code>中的代码修改为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();</div><div class="line"><span class="comment">//        MBeanServer mBeanServer = MBeanServerFactory.createMBeanServer();</span></div><div class="line">    String domain = mBeanServer.getDefaultDomain();</div><div class="line">    ObjectName objectName = <span class="keyword">new</span> ObjectName(domain+ <span class="string">":name=Hello"</span>);</div><div class="line">    mBeanServer.registerMBean(<span class="keyword">new</span> Hello(), objectName);</div><div class="line"></div><div class="line">    ObjectName adapterName = <span class="keyword">new</span> ObjectName(domain +</div><div class="line">            <span class="string">":name=htmladapter,port=8888"</span>);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"start....."</span>);</div><div class="line"></div><div class="line">    Thread.sleep(Integer.MAX_VALUE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进入命令行，输入<code>jconsole</code>命令打开jsonsole：</p>
<img src="/2016/12/14/JMX：Standard-MBean/屏幕快照%202016-12-15%20上午12.03.56.png" alt="屏幕快照 2016-12-15 上午12.03.56.png" title="">
<p>选中本例运行的进程后点击“连接”，进入管理页面，选择”MBean”标签：</p>
<img src="/2016/12/14/JMX：Standard-MBean/屏幕快照%202016-12-15%20上午12.05.36.png" alt="屏幕快照 2016-12-15 上午12.05.36.png" title="">
<p>在这里可以看到注册的MBean，可以看到在<code>Hello</code>这个MBean中的属性和操作，这里的使用与<code>HtmlAdaptorServer</code>的使用类似，大家可以自己试一下。在这里将属性的值设置为123，然后在“操作”中点击<code>sayHello</code>按钮：</p>
<img src="/2016/12/14/JMX：Standard-MBean/屏幕快照%202016-12-15%20上午12.09.16.png" alt="屏幕快照 2016-12-15 上午12.09.16.png" title="">
<p>在控制台同样可以看到输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello : 123</div></pre></td></tr></table></figure>
<p>jconsole还可以通过远程来连接，很轻松的来管理MBean。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMX架构简介]]></title>
      <url>http://www.ideabuffer.cn/2016/12/14/JMX%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h2 id="JMX简单介绍"><a href="#JMX简单介绍" class="headerlink" title="JMX简单介绍"></a>JMX简单介绍</h2><p>Java管理扩展JMX(Java Management Extensions)是一个为应用程序植入管理功能的框架。JMX是一套标准的代理和服务，实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理。<br>JMX是一种应用编程接口，可扩充对象和方法的集合体，可以用于跨越一系列不同的异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用它提供了用户界面指导、Java类和开发集成系统、网络及网络管理应用的规范。</p>
<p>管理对象是JMX应用程序的核心。JMX结构包括：支持Java的Web浏览器用户接口，管理运行模块ARM(Admin Runtime Module)和应用。这三个部件之间通过RMI（Remote Method Invocation）进行通信。这里需要说明的是，RMI是使得一个Java虚拟机（JVM）上运行的程序可以调用远程服务器上另一个JVM总的对象。</p>
<h2 id="Java管理扩展JMX的体系结构"><a href="#Java管理扩展JMX的体系结构" class="headerlink" title="Java管理扩展JMX的体系结构"></a>Java管理扩展JMX的体系结构</h2><p>JMX框架如下图所示：</p>
<img src="/2016/12/14/JMX架构简介/CIlaw2Y.png" alt="CIlaw2Y.png" title="">
<a id="more"></a>
<h3 id="设备层（Instrumentation-Level）"><a href="#设备层（Instrumentation-Level）" class="headerlink" title="设备层（Instrumentation Level）"></a>设备层（Instrumentation Level）</h3><p>主要定义了信息模型。在JMX中，各种管理对象以管理构件的形式存在，需要管理时，向MBean服务器进行注册。该层还定义了通知机制以及一些辅助元数据类。</p>
<p>设备层其实就是和被管设备通信的模块，对于上层的管理者来说，Instrumentation 就是设备，具体设备如何通信，是采用SNMP,还是采用ICMP，是MBean的事情。在网管系统中，把系统的各种服务，例如拓扑发现，用户管理等等都作为一个MBean,作为一个被管理的单元。</p>
<p>该层定义了如何实现JMX管理资源的规范。一个JMX管理资源可以是一个Java应用、一个服务或一个设备，它们可以用Java开发，或者至少能用Java进行包装，并且能被置入JMX框架中，从而成为JMX的一个管理构件(Managed Bean)，简称MBean。管理构件可以是标准的，也可以是动态的，标准的管理构件遵从JavaBeans构件的设计模式；动态的管理构件遵从特定的接口，提供了更大的灵活性。感觉管理构件应该翻译为被管理构件才好。该层还定义了通知机制以及实现管理构件的辅助元数据类（元数据类就是构成一个MBean的各种元素：属性、方法等等）。</p>
<p>在JMX规范中，管理构件定义如下：它是一个能代表管理资源的Java对象，遵从一定的设计模式，还需实现该规范定义的特定的接口。该定义了保证了所有的管理构件以一种标准的方式来表示被管理资源。<br>管理接口就是被管理资源暴露出的一些信息，通过对这些信息的修改就能控制被管理资源。一个管理构件的管理接口包括： </p>
<ul>
<li>能被接触的属性值； </li>
<li>能够执行的操作； </li>
<li>能发出的通知事件； </li>
<li>管理构件的构建器。</li>
</ul>
<p>管理构件通过公共的方法以及遵从特定的设计模式封装了属性和操作，以便暴露给管理应用程序。例如，一个只读属性在管理构件中只有Get方法，既有Get又有Set方法表示是一个可读写的属性。<br>其余的JMX的构件，例如JMX代理提供的各种服务，也是作为一个管理构件注册到代理中才能提供相应的服务。</p>
<p>JMX对管理构件的存储位置没有任何限制，管理构件可以存储在运行JMX代理的Java虚拟机的类路径的任何位置，也可以从网络上的任何位置导入。</p>
<p>JMX定义了四种管理构件（MBean）：标准、动态、开放和模型管理构件。每一种管理构件可以根据不同的环境需要进行制定。</p>
<h4 id="标准管理构件"><a href="#标准管理构件" class="headerlink" title="标准管理构件"></a>标准管理构件</h4><p>标准管理构件的设计和实现是最简单的，它们的管理接口通过方法名来描述。标准管理构件的实现依靠一组命名规则，称之为设计模式。这些命名规则定义了属性和操作。</p>
<p>检查标准管理构件接口和应用设计模式的过程被称为内省（Introspection）。JMX代理通过内省来查看每一个注册在MBean 服务器上的管理构件的方法和超类，看它是否遵从一定设计模式，决定它是否代表了一个管理构件，并辨认出它的属性和操作。</p>
<h4 id="动态管理构件"><a href="#动态管理构件" class="headerlink" title="动态管理构件"></a>动态管理构件</h4><p>动态管理构件提供了更大的灵活性，它可以在运行期暴露自己的管理接口。它的实现是通过实现一个特定的接口DynamicMBean。</p>
<p>JMX代理通过getMBeanInfo方法来获取该动态管理构件暴露的管理接口，该方法返回的对象是MbeanInfo类的实例，包含了属性和操作的签名。由于该方法的调用是发生在动态管理构件向MBean服务器注册以后，因此管理接口是在运行期获取的。不同于标准管理构件，JMX代理不需要通过内省机制来确定动态管理构件的管理接口。由于DynamicMBean的接口是不变的，因此可以屏蔽实现细节。由于这种在运行期获取管理接口的特性，动态管理构件提供了更大的灵活性。</p>
<h4 id="开放管理构件"><a href="#开放管理构件" class="headerlink" title="开放管理构件"></a>开放管理构件</h4><p>开放管理构件是一种专门化的动态管理构件，其中所有的与该管理构件相关的参数、返回类型和属性都围绕一组预定义的数据类型（String、Integer、Float 等）来建立，并且通过一组特定的接口来进行自我描述。JMX代理通过获得一个OpenMBeanInfo对象来获取开放管理构件的管理接口，OpenMBeanInfo是MbeanInfo的子类。</p>
<h4 id="模型管理构件"><a href="#模型管理构件" class="headerlink" title="模型管理构件"></a>模型管理构件</h4><p>模型管理构件也是一种专门化的动态管理构件。它是预制的、通用的和动态的 MBean 类，已经包含了所有必要缺省行为的实现，并允许在运行时添加或覆盖需要定制的那些实现。JMX规范规定该类必须实现为<code>javax.management.modelmbean.RequiredModelMBean</code>，管理者要做的就是实例化该类，并配置该构件的默认行为并注册到JMX代理中，即可实现对资源的管理。JMX代理通过获得一个ModelMBeanInfo对象来获取管理接口。</p>
<p>模型管理构件具有以下新的特点： </p>
<ul>
<li>持久性：定义了持久机制，可以利用Java的序列化或JDBC来存储模型MBean的状态。 就是要保存到硬盘上。</li>
<li>通知和日志功能：能记录每一个发出的通知，并能自动发出属性变化通知。 </li>
<li>属性值缓存：具有缓存属性值的能力。</li>
</ul>
<h4 id="通知模型"><a href="#通知模型" class="headerlink" title="通知模型"></a>通知模型</h4><p>一个管理构件提供的管理接口允许代理对其管理资源进行控制和配置。然而，对管理复杂的分布式系统来说，这些接口只是提供了一部分功能。通常，管理应用程序需要对状态变化或者当特别情况发生变化时作出反映。</p>
<p>为此，JMX定义了通知模型。通知模型仅仅涉及了在同一个JMX代理中的管理构件之间的事件传播。JMX通知模型依靠以下几个部分： </p>
<ul>
<li>Notification，一个通用的事件类型，该类标识事件的类型，可以被直接使用，也可以根据传递的事件的需要而被扩展。 </li>
<li>NotificationListener接口，接受通知的对象需实现此接口。 </li>
<li>NotificationFilter接口，作为通知过滤器的对象需实现此接口，为通知监听者提供了一个过滤通知的过滤器。 </li>
<li>NotificationBroadcaster接口，通知发送者需实现此接口，该接口允许希望得到通知的监听者注册。<br>发送一个通用类型的通知，任何一个监听者都会得到该通知。因此，监听者需提供过滤器来选择所需要接受的通知。</li>
</ul>
<p>任何类型的管理构件，标准的或动态的，都可以作为一个通知发送者，也可以作为一个通知监听者，或两者都是。</p>
<h4 id="辅助元数据"><a href="#辅助元数据" class="headerlink" title="辅助元数据"></a>辅助元数据</h4><p>辅助元数据类用来描述管理构件。辅助元数据类不仅被用来内省标准管理构件，也被动态管理构件用来进行自我描述。这些类根据属性、操作、构建器和通告描述了管理接口。JMX代理通过这些元数据类管理所有管理构件，而不管这些管理构件的类型。<br>部分辅助元类如下： </p>
<ul>
<li>MBeanInfo：包含了属性、操作、构建器和通知的信息。 </li>
<li>MBeanFeatureInfo：为下面类的超类。 </li>
<li>MBeanAttributeInfo：用来描述管理构件中的属性。 </li>
<li>MBeanConstructorInfo：用来描述管理构件中的构建器。 </li>
<li>MBeanOperationInfo：用来描述管理构件中的操作。 </li>
<li>MBeanParameterInfo：用来描述管理构件操作或构建器的参数。 </li>
<li>MBeanNotificationInfo：用来描述管理构件发出的通知。 </li>
</ul>
<h3 id="代理层（Agent-Level）"><a href="#代理层（Agent-Level）" class="headerlink" title="代理层（Agent Level）"></a>代理层（Agent Level）</h3><p>这里首先要理解的Agent和SNMP中的Agent不一样，SNMP中的Agent是设备上的一个程序，可以理解为被管理的设备。而JMX中的Agent并不是被管理的设备，而是进行管理设备（设备就是MBean）的一个程序，它对于JMX的上层来说，是一个被管理设备，针对下面的具体设备来说，它又是一个管理者。其实也就是MBeanServer。</p>
<p>主要定义了各种服务以及通信模型。该层的核心是一个MBean服务器，所有的管理构件都需要向它注册，才能被管理。注册在MBean服务器上管理构件并不直接和远程应用程序进行通信，它们通过协议适配器和连接器进行通信。而协议适配器和连接器也以管理构件的形式向MBean服务器注册才能提供相应的服务。这段话比较模糊，其实管理构件就是MBean，也可以看作是被管理的设备，其中说的管理构件并不和远程应用程序进行通信，就是说被管理的MBean不和控制台，也就是前台控制程序（web、服务器等）通信。</p>
<p>代理层是一个运行在Java虚拟机上的管理实体，它活跃在管理资源和管理者之间，用来直接管理资源，并使这些资源可以被远程的管理程序所控制。代理层由一个MBean服务器和一系列处理被管理资源的服务所组成。</p>
<h4 id="MBean服务器"><a href="#MBean服务器" class="headerlink" title="MBean服务器"></a>MBean服务器</h4><p>Mbean服务器为代理层的核心，设备层的所有管理构件都在其注册，管理者只用通过它才能访问管理构件。<br>管理构件可以通过以下三种方法实例化和注册： </p>
<ol>
<li>通过另一个管理构件 </li>
<li>管理代理本身 </li>
<li>远程应用程序</li>
</ol>
<p>注册一个管理构件时，必须提供一个唯一的对象名。管理应用程序用这个对象名进行标识管理构件并对其操作。这些操作包括：</p>
<ol>
<li>发现管理构件的管理接口 </li>
<li>读写属性值 </li>
<li>执行管理构件中定义的操作 </li>
<li>获得管理构件发出的通告 </li>
<li>基于对象名和属性值来查询管理构件</li>
</ol>
<h4 id="协议适配器和连接器"><a href="#协议适配器和连接器" class="headerlink" title="协议适配器和连接器"></a>协议适配器和连接器</h4><p>MBean服务器依赖于协议适配器和连接器来和运行该代理的Java虚拟机之外的管理应用程序进行通信。协议适配器通过特定的协议提供了一张注册在MBean服务器的管理构件的视图。例如，一个HTML适配器可以将所有注册过的管理构件显示在Web 页面上。不同的协议，提供不同的视图。</p>
<p>连接器还必须提供管理应用一方的接口以使代理和管理应用程序进行通信，即针对不同的协议，连接器必须提供同样的远程接口来封装通信过程。当远程应用程序使用这个接口时，就可以通过网络透明的和代理进行交互，而忽略协议本身。</p>
<p>适配器和连接器使MBean服务器与管理应用程序能进行通信。因此，一个代理要被管理，它必须提供至少一个协议适配器或者连接器。面临多种管理应用时，代理可以包含各种不同的协议适配器和连接器。</p>
<p>当前已经实现和将要实现的协议适配器和连接器包括： </p>
<ul>
<li>RMI连接器 </li>
<li>SNMP协议适配器 </li>
<li>IIOP协议适配器 </li>
<li>HTML协议适配器 </li>
<li>HTTP连接器</li>
</ul>
<h3 id="分布服务层（Distributed-Service-Level）"><a href="#分布服务层（Distributed-Service-Level）" class="headerlink" title="分布服务层（Distributed Service Level）"></a>分布服务层（Distributed Service Level）</h3><p>主要定义了能对代理层进行操作的管理接口和构件，这样管理者就可以操作代理。然而，当前的JMX规范并没有给出这一层的具体规范。</p>
<h3 id="附加管理协议API"><a href="#附加管理协议API" class="headerlink" title="附加管理协议API"></a>附加管理协议API</h3><p>定义的API主要用来支持当前已经存在的网络管理协议，如SNMP、TMN、CIM/WBEM等。</p>
<h2 id="JMX架构的使用场景及优点"><a href="#JMX架构的使用场景及优点" class="headerlink" title="JMX架构的使用场景及优点"></a>JMX架构的使用场景及优点</h2><p>JMX应该说是关于网络应用管理的的框架，如果你开发了一个比较复杂的系统，无疑你要提供这个系统的自身管理 系统，JMX更多应用是体现在Server上，如果你要使用java开发一个自己Server或复杂的应用系统，那么推荐你基于JMX架构来开发， JBoss 3.0 weblogic等就是基于JMX开发的符合J2EE规范的服务器软件。</p>
<p>了解JMX可以使你深入了解J2EE服务器， 为什么我们平时说 “EJB”是个比较”Weight”的方案选择，其中一个原因是J2EE服务器软件本身 也是你的系统中一部分，它作为你系统的容器，对你的系统有至关重要的作用，如果无法直接介入 管理或“调教”它，那么无疑你的系统本身存在着隐含的危险， 现在，通过JMX，你现在可以深入到你J2EE容器内部的管理了。 (好像国内出现了第一个自己J2ee服务器，不知道那是不是基于JMX开发的?)</p>
<p>J2EE并不能概括所有的应用领域，比如对速度和性能要求极高的游戏或股票行情等系统就需要自己直接来开发Server， 如果是能够基于JMX开发，那么可以说就大大提高编写管理程序的效率，可以将你的模块变成JMX的MBean，可以通过Agent在程序内部或者通过 WEB管理页面对你的MBean模块进行初始化 重启 以及参数设置。</p>
<p>JMX的好处还有：可以方便整合连接现有的Java技术，如JNDI、 JDBC 、JTS及其它。特别是能够使用Jini的查询 发现机制以及协议，我们知道,Jini提供了一种服务的查询和发现机制，这些services都可以通过JMX 来实现管理。</p>
<hr>
<p>原文链接：<a href="http://blog.csdn.net/drykilllogic/article/details/38379623" target="_blank" rel="external">http://blog.csdn.net/drykilllogic/article/details/38379623</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码：Connector]]></title>
      <url>http://www.ideabuffer.cn/2016/12/08/Tomcat%E6%BA%90%E7%A0%81%EF%BC%9AConnector/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码：生命周期]]></title>
      <url>http://www.ideabuffer.cn/2016/12/05/Tomcat%E6%BA%90%E7%A0%81%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>从前几篇文章可以知道，Tomcat包含很多组件，并且一个组件可以包含多个组件，当Tomcat启动时，只需要启动最上层的组件，那么包含于该组件中的其他组件也会一并启动，关闭也一样。这就是通过实现<code>org.apache.catalina.Lifecycle</code>接口来实现的单一启动/关闭的效果。</p>
<p>Tomcat的生命周期主要涉及到4种类型：<code>Lifecycle</code>、<code>LifecycleEvent</code>、<code>LifecycleState</code>和<code>LifecycleListener</code>，Tomcat也提供了<code>LifecycleBase</code>抽象类来简化生命周期的处理，它实现了<code>Lifecycle</code>接口，并提供了钩子函数来扩展各个组件在生命周期中的处理行为。</p>
<p>生命周期的基本类图如下：</p>
<img src="/2016/12/05/Tomcat源码：生命周期/QQ20161206-0@2x.png" alt="QQ20161206-0@2x.png" title="">
<a id="more"></a>
<h2 id="Lifecycle接口"><a href="#Lifecycle接口" class="headerlink" title="Lifecycle接口"></a>Lifecycle接口</h2><p>Tomcat中的组件可以包含多个其他组件，这些组件的启动和关闭并不需要进行单独的启动和关闭，而是只启动或关闭最上层的组件即可使全部组件都能够启动或关闭，这种单一启动/关闭机制就是通过<code>Lifecycle</code>接口来实现的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lifecycle</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_INIT_EVENT = <span class="string">"before_init"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_INIT_EVENT = <span class="string">"after_init"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String START_EVENT = <span class="string">"start"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_START_EVENT = <span class="string">"before_start"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_START_EVENT = <span class="string">"after_start"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STOP_EVENT = <span class="string">"stop"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_STOP_EVENT = <span class="string">"before_stop"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_STOP_EVENT = <span class="string">"after_stop"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_DESTROY_EVENT = <span class="string">"after_destroy"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_DESTROY_EVENT = <span class="string">"before_destroy"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERIODIC_EVENT = <span class="string">"periodic"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIGURE_START_EVENT = <span class="string">"configure_start"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIGURE_STOP_EVENT = <span class="string">"configure_stop"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLifecycleListener</span><span class="params">(LifecycleListener listener)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> LifecycleListener[] findLifecycleListeners();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeLifecycleListener</span><span class="params">(LifecycleListener listener)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> LifecycleState <span class="title">getState</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStateName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SingleUse</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接口中定义了很多触发事件，常用的例如<code>before_init</code>、<code>after_init</code>、<code>before_start</code>、<code>start</code>、<code>after_start</code>等等，只看名字也能知道是做什么的了。</p>
<p><code>start</code>和<code>stop</code>方法是对组件进行启动和关闭的操作；<code>addLifecycleListener</code>、<code>removeLifecycleListener</code>和<code>findLifecycleListeners</code>都是与事件监听相关的。一个组件可以注册多个事件监听器来监听该组件对应的某些事件，当触发了该事件时，会通知相应的监听器。</p>
<p>这里面还有一个很有意思的内部接口<code>SingleUse</code>，它是一个标记接口，用于指示实例应该只使用一次。当一个组件实例实现了这个接口会在<code>stop</code>方法完成时自动调用<code>destroy</code>方法。例如在<code>LifecycleBase</code>中的<code>stop</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    stopInternal();</div><div class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">    ExceptionUtils.handleThrowable(t);</div><div class="line">    setStateInternal(LifecycleState.FAILED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(<span class="string">"lifecycleBase.stopFail"</span>,toString()), t);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">// 如果实现了Lifecycle.SingleUse接口，则设置状态为已关闭，然后调用destroy()方法</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Lifecycle.SingleUse) &#123;</div><div class="line">        <span class="comment">// Complete stop process first</span></div><div class="line">        setStateInternal(LifecycleState.STOPPED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        destroy();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>作为一个标记接口，并没有需要实现的方法，仅仅代表了一种能力，例如实现了<code>java.io.Serializable</code>接口的实例，表示该实例可以序列化，在判断时会使用<code>instanceof</code>关键字来进行判断。<br>其实在<code>java.util.Map&lt;K,V&gt;</code>接口中也定义了一个内部接口<code>Map.Entry&lt;K, V&gt;</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么为什么要定义一个内部接口呢，内部接口的作用是什么？具体现在我也不太清楚，这里先标记一下，有空专门研究一下。</p>
<h2 id="LifecycleEvent类"><a href="#LifecycleEvent类" class="headerlink" title="LifecycleEvent类"></a>LifecycleEvent类</h2><p><code>LifecycleEvent</code>类的实例表示一个生命周期的事件，类的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Construct a new LifecycleEvent with the specified parameters.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> lifecycle Component on which this event occurred</div><div class="line">     * <span class="doctag">@param</span> type Event type (required)</div><div class="line">     * <span class="doctag">@param</span> data Event data (if any)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifecycleEvent</span><span class="params">(Lifecycle lifecycle, String type, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(lifecycle);</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The event data associated with this event.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object data;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The event type this instance represents.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> the event data of this event.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> the Lifecycle on which this event occurred.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (Lifecycle) getSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> the event type of this event.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.type;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在构造方法中，第一个参数为生命周期的组件，第二个参数为事件类型，第三个参数为传入的数据，可以看成是对这三种类型的封装。</p>
<p>另外介绍一下<code>EventObject</code>对象，它里面定义了一个事件源对象，所谓事件源就是事件发生的地方，而在Tomcat的设计中，事件源就是实现了<code>Lifecycle</code>接口的各个需要管理生命周期的组件。每个组件都继承自<code>LifecycleBase</code>，那么组件就是通过<code>LifecycleBase</code>来实现事件源的传递，这样在<code>LifecycleBase</code>触发事件的时候，可以通过事件源（也就是相当于当前组件<em>this</em>）构建<code>EventObject</code>.这样以来<code>LifecycleListener</code>就可以通过事件对象获取到事件源，从而做一些与事件源相关的操作。如果还是不太清楚的话，继续往下看。</p>
<h2 id="LifecycleListener接口"><a href="#LifecycleListener接口" class="headerlink" title="LifecycleListener接口"></a>LifecycleListener接口</h2><p>一个生命周期的事件监听器是该接口的实例，该接口的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleListener</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Acknowledge the occurrence of the specified event.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> event LifecycleEvent that has occurred</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有一个方法<code>lifecycleEvent</code>，看到该方法的参数正是上面所讲到的<code>LifecycleEvent</code>，当某个事件监听器监听到相关事件时，会调用该方法。例如，当<code>Server</code>组件启动时，看下<code>StandardServer</code>中的<code>startInternal</code>方法的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 该方法继承自LifecycleBase</span></div><div class="line">    fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>);</div><div class="line">    setState(LifecycleState.STARTING);</div><div class="line"></div><div class="line">    globalNamingResources.start();</div><div class="line"></div><div class="line">    <span class="comment">// Start our defined Services</span></div><div class="line">    <span class="keyword">synchronized</span> (servicesLock) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</div><div class="line">            services[i].start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>fireLifecycleEvent</code>方法继承自<code>LifecycleBase</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fireLifecycleEvent</span><span class="params">(String type, Object data)</span> </span>&#123;</div><div class="line">    LifecycleEvent event = <span class="keyword">new</span> LifecycleEvent(<span class="keyword">this</span>, type, data);</div><div class="line">    <span class="keyword">for</span> (LifecycleListener listener : lifecycleListeners) &#123;</div><div class="line">        listener.lifecycleEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，在该方法中，创建了一个<code>LifecycleEvent</code>对象，并将当前对象（<code>StandardServer</code>）作为第一个参数传入<code>LifecycleEvent</code>构造器中，然后监听器会调用<code>lifecycleEvent</code>方法来执行具体的操作。</p>
<h2 id="LifecycleBase类"><a href="#LifecycleBase类" class="headerlink" title="LifecycleBase类"></a>LifecycleBase类</h2><p><code>LifecycleBase</code>实现了<code>Lifecycle</code>接口，添加了几个新的方法如<code>setStateInternal</code>(更新组件状态)、<code>fireLifecycleEvent</code>(触发LifecycleEvent)，以及一些钩子方法例如<code>initInternal</code>、<code>startInternal</code>等。</p>
<img src="/2016/12/05/Tomcat源码：生命周期/屏幕快照%202016-12-06%20下午10.54.49.png" alt="屏幕快照 2016-12-06 下午10.54.49.png" title="">
<p>例如上文中提到的<code>fireLifecycleEvent</code>方法，用来触发事件；再例如，执行<code>init</code>方法时，会调用抽象方法<code>initInternal</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!state.equals(LifecycleState.NEW)) &#123;</div><div class="line">        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</div><div class="line">    &#125;</div><div class="line">    setStateInternal(LifecycleState.INITIALIZING, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        initInternal();</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        ExceptionUtils.handleThrowable(t);</div><div class="line">        setStateInternal(LifecycleState.FAILED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</div><div class="line">                sm.getString(<span class="string">"lifecycleBase.initFail"</span>,toString()), t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setStateInternal(LifecycleState.INITIALIZED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div></pre></td></tr></table></figure>
<p>具体的规则在子类中实现。</p>
<p>该类中定义了两个重要的变量：<code>lifecycleListeners</code>和<code>state</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The list of registered LifecycleListeners for event notifications.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;LifecycleListener&gt; lifecycleListeners = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The current state of the source component.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> LifecycleState state = LifecycleState.NEW;</div></pre></td></tr></table></figure>
<p><code>lifecycleListeners</code>用来保存监听器，<code>state</code>表示当前生命周期的状态。</p>
<h3 id="lifecycleListeners属性"><a href="#lifecycleListeners属性" class="headerlink" title="lifecycleListeners属性"></a>lifecycleListeners属性</h3><p>首先来看下<code>lifecycleListeners</code>，它是<code>CopyOnWriteArrayList</code>的类型，这里简单介绍一下：</p>
<blockquote>
<p>Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。</p>
</blockquote>
<p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p>
<p>那么在<code>LifecycleBase</code>中，为什么将<code>lifecycleListeners</code>变量定义为这种类型？从上面的分析可知，<code>CopyOnWriteArrayList</code>适用于读多写少的情况。回顾一下<a href="/2016/11/27/Tomcat源码：Catalina启动流程/">Tomcat源码：Catalina启动流程</a>中提到的<code>createStartDigester</code>方法，在该方法中有如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建listener，其中第二个参数为空，表示必须在配置文件中指定className</span></div><div class="line">digester.addObjectCreate(<span class="string">"Server/Listener"</span>,</div><div class="line">                         <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                         <span class="string">"className"</span>);</div><div class="line">digester.addSetProperties(<span class="string">"Server/Listener"</span>);</div><div class="line">digester.addSetNext(<span class="string">"Server/Listener"</span>,</div><div class="line">                    <span class="string">"addLifecycleListener"</span>,</div><div class="line">                    <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div></pre></td></tr></table></figure>
<p>对于服务器组件<code>Server</code>，监听器是在调用<code>StandardServer</code>的构造方法和解析配置文件<code>server.xml</code>时通过调用<code>addLifecycleListener</code>方法来添加到<code>lifecycleListeners</code>变量中的，那么当Tomcat启动后，就基本不会再添加新的Listener了。但注意，是<em>基本</em>不会添加，并不绝对，例如<code>org.apache.catalina.startup.HostConfig</code>，它也是一个监听器，看下其中的<code>reload</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Note: If either of fileToRemove and newDocBase are null, both will be</div><div class="line"> *       ignored.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">(DeployedApplication app, File fileToRemove, String newDocBase)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(log.isInfoEnabled())</div><div class="line">        log.info(sm.getString(<span class="string">"hostConfig.reload"</span>, app.name));</div><div class="line">    Context context = (Context) host.findChild(app.name);</div><div class="line">    <span class="keyword">if</span> (context.getState().isAvailable()) &#123;</div><div class="line">        <span class="keyword">if</span> (fileToRemove != <span class="keyword">null</span> &amp;&amp; newDocBase != <span class="keyword">null</span>) &#123;</div><div class="line">            context.addLifecycleListener(</div><div class="line">                    <span class="keyword">new</span> ExpandedDirectoryRemovalListener(fileToRemove, newDocBase));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Reload catches and logs exceptions</span></div><div class="line">        context.reload();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// If the context was not started (for example an error</span></div><div class="line">        <span class="comment">// in web.xml) we'll still get to try to start</span></div><div class="line">        <span class="keyword">if</span> (fileToRemove != <span class="keyword">null</span> &amp;&amp; newDocBase != <span class="keyword">null</span>) &#123;</div><div class="line">            ExpandWar.delete(fileToRemove);</div><div class="line">            context.setDocBase(newDocBase);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            context.start();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.warn(sm.getString</div><div class="line">                     (<span class="string">"hostConfig.context.restart"</span>, app.name), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法是重新加载一个context，那么可以看到，这里为<code>context</code>增加了一个监听器，该监听器用来确保在重新加载context时，将之前WAR包解压出来的目录删除，并且将dcoBase设置到指定的WAR。</p>
<p>在使用<code>CopyOnWriteArrayList</code>时需要注意两个问题：</p>
<ul>
<li>内存占用问题</li>
<li>数据一致性问题</li>
</ul>
<p><em>内存占用问题：</em>因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，如果列表中的对象比较大，假设为100M，那么再写入100M的对象进去，内存就会占用200M，那么这个时候很有可能造成频繁的Yong GC和Full GC，从而会导致整个系统响应时间过长。</p>
<p><em>数据一致性问题：</em>CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据能够立即读到，那么请不要使用CopyOnWrite容器。</p>
<p>总体来说，一般组件启动之后，就基本不会再添加新的监听器了，所以使用<code>CopyOnWriteArrayList</code>类型是很合适的。</p>
<h3 id="state属性"><a href="#state属性" class="headerlink" title="state属性"></a>state属性</h3><p>再来看下<code>state</code>属性，该属性被<code>volatile</code>关键字修饰，保证了<code>state</code>属性的可见性，但也仅仅是可见性，而不具有原子性，所以，它与<code>synchronized</code>关键字相比，少了原子性，可以看做是”轻量级的<code>synchronized</code>“。</p>
<p>这里为什么用<code>volatile</code>关键字修饰？</p>
<p>先考虑一下是否需要原子性。我们现在可以知道，一个组件的状态是在调用生命周期的<code>init</code>、<code>start</code>等<code>Lifecycle</code>接口中定义的生命周期行为的方法时才会被设置，一个组件不可能在同一时间调用不同的生命周期行为，所以原子性是不必要的。</p>
<p>再来考虑一下可见性。当组件的状态改变时，当然是需要立即被读取到，通过组件生命周期的状态来判断是否应该执行指定的生命周期的行为，例如一个组件已经执行了<code>destroy</code>方法，那么就不可能再调用该组件的<code>start</code>方法，所以可见性是必须的。</p>
<h2 id="LifecycleState类"><a href="#LifecycleState类" class="headerlink" title="LifecycleState类"></a>LifecycleState类</h2><p><code>LifecycleState</code>是一个枚举类型，定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The list of valid states for components that implement &#123;<span class="doctag">@link</span> Lifecycle&#125;.</div><div class="line"> * See &#123;<span class="doctag">@link</span> Lifecycle&#125; for the state transition diagram.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LifecycleState &#123;</div><div class="line">    NEW(<span class="keyword">false</span>, <span class="keyword">null</span>),</div><div class="line">    INITIALIZING(<span class="keyword">false</span>, Lifecycle.BEFORE_INIT_EVENT),</div><div class="line">    INITIALIZED(<span class="keyword">false</span>, Lifecycle.AFTER_INIT_EVENT),</div><div class="line">    STARTING_PREP(<span class="keyword">false</span>, Lifecycle.BEFORE_START_EVENT),</div><div class="line">    STARTING(<span class="keyword">true</span>, Lifecycle.START_EVENT),</div><div class="line">    STARTED(<span class="keyword">true</span>, Lifecycle.AFTER_START_EVENT),</div><div class="line">    STOPPING_PREP(<span class="keyword">true</span>, Lifecycle.BEFORE_STOP_EVENT),</div><div class="line">    STOPPING(<span class="keyword">false</span>, Lifecycle.STOP_EVENT),</div><div class="line">    STOPPED(<span class="keyword">false</span>, Lifecycle.AFTER_STOP_EVENT),</div><div class="line">    DESTROYING(<span class="keyword">false</span>, Lifecycle.BEFORE_DESTROY_EVENT),</div><div class="line">    DESTROYED(<span class="keyword">false</span>, Lifecycle.AFTER_DESTROY_EVENT),</div><div class="line">    FAILED(<span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> available;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lifecycleEvent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LifecycleState</span><span class="params">(<span class="keyword">boolean</span> available, String lifecycleEvent)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.available = available;</div><div class="line">        <span class="keyword">this</span>.lifecycleEvent = lifecycleEvent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * May the public methods other than property getters/setters and lifecycle</div><div class="line">     * methods be called for a component in this state? It returns</div><div class="line">     * &lt;code&gt;true&lt;/code&gt; for any component in any of the following states:</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #STARTING&#125;&lt;/li&gt;</div><div class="line">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #STARTED&#125;&lt;/li&gt;</div><div class="line">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #STOPPING_PREP&#125;&lt;/li&gt;</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the component is available for use,</div><div class="line">     *         otherwise &lt;code&gt;false&lt;/code&gt;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> available;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLifecycleEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lifecycleEvent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>LifecycleState</code>包含两个属性：<code>available</code>和<code>lifecycleEvent</code>。</p>
<ul>
<li><p>available：判断在当前状态下是否可以调用除getter/setter方法以外的public方法以及生命周期中的方法。当前状态为以下状态时返回<code>true</code>:</p>
<ul>
<li>STARTING</li>
<li>STARTED</li>
<li>STOPPING_PREP</li>
</ul>
</li>
<li><p>getLifecycleEvent：获取处于此状态的组件正在进行的事件</p>
</li>
</ul>
<p>例如，在<code>StandardServer</code>中的<code>addService</code>方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addService</span><span class="params">(Service service)</span> </span>&#123;</div><div class="line"></div><div class="line">    service.setServer(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (servicesLock) &#123;</div><div class="line">        Service results[] = <span class="keyword">new</span> Service[services.length + <span class="number">1</span>];</div><div class="line">        System.arraycopy(services, <span class="number">0</span>, results, <span class="number">0</span>, services.length);</div><div class="line">        results[services.length] = service;</div><div class="line">        services = results;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (getState().isAvailable()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                service.start();</div><div class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Report this property change to interested listeners</span></div><div class="line">        support.firePropertyChange(<span class="string">"service"</span>, <span class="keyword">null</span>, service);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果当前Server正在启动或者已经启动，就可以直接启动服务组件<code>service</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是Tomcat生命周期的核心内容，了解了生命周期，就可以很清楚的明白Tomcat的启动流程，通过Lifecycle，Tomcat只需启动最顶层组件<code>Server</code>，即可启动所有的组件，关闭也是类似，这就是单一启动/关闭机制。</p>
<p>通过对源码的阅读，不仅需要知道代码是怎么设计的，还需要知道代码为什么这样设计，例如本文中提到的<code>LifecycleBase</code>中的两个属性：<code>lifecycleListeners</code>和<code>state</code>，<code>lifecycleListeners</code>为什么要定义为<code>CopyOnWriteArrayList</code>类型？<code>state</code>为什么要用<code>volatile</code>关键字修饰？结合它们的使用，便可以知道它们的使用场景，可以更加透彻的分析出整个流程执行的机制，从而也会收获的更多。<br>最后，希望对大家有所帮助。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式：观察者模式]]></title>
      <url>http://www.ideabuffer.cn/2016/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="观察者模式的定义"><a href="#观察者模式的定义" class="headerlink" title="观察者模式的定义"></a>观察者模式的定义</h2><p>观察者模式（Observer Pattern），也叫发布/订阅模式（Publish/Subscribe），定义如下：</p>
<blockquote>
<p>定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p>
</blockquote>
<p>下面是观察者模式的通用类图：</p>
<img src="/2016/12/04/设计模式：观察者模式/QQ20161204-0@2x.png" alt="QQ20161204-0@2x.png" title="">
<a id="more"></a>
<p>下面说明一下这几个角色的名称：</p>
<ul>
<li><p>Subject</p>
<p>被观察者：它必须能够动态地增加和取消观察者。一般是抽象类或者实现类，它的职责是管理观察者并通知观察者。</p>
</li>
<li><p>Observer</p>
<p>观察者：在接收到消息后，调用<code>update()</code>方法进行更新操作，对接收到的消息进行处理。</p>
</li>
<li><p>ConcreteSubject</p>
<p>具体的被观察者：定义了自己的业务逻辑，同时定义对哪些事件进行通知。</p>
</li>
<li><p>ConcreteObserver</p>
<p>具体的观察者：具有不同的处理逻辑，每个观察者在接收到消息后，可以通过自己的逻辑进行处理。</p>
</li>
</ul>
<h2 id="通用代码"><a href="#通用代码" class="headerlink" title="通用代码"></a>通用代码</h2><p>先看一下被观察者的通用代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 观察者集合</span></div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// 增加一个观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 删除一个观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (Observer o : observers) &#123;</div><div class="line">            o.update();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，被观察者的工作内容非常简单，主要就是增加、删除观察者以及通知观察者。</p>
<p>具体的被观察者代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// do something ...</span></div><div class="line"></div><div class="line">        <span class="keyword">super</span>.notifyObservers();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为是继承自<code>Subject</code>，所以只需要定义自己的业务逻辑，调用父类的<code>notifyObservers</code>方法即可。</p>
<p>观察者的通用代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只需要一个<code>update</code>方法，下面是具体的观察者代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do something ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是使用场景代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	    Subject subject = <span class="keyword">new</span> ConcreteSubject();</div><div class="line">	    Observer observer = <span class="keyword">new</span> ConcreteObserver();</div><div class="line">	    subject.addObserver(observer);</div><div class="line">	    subject.work();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单，都不用注释了。</p>
<h2 id="观察者模式的优缺点"><a href="#观察者模式的优缺点" class="headerlink" title="观察者模式的优缺点"></a>观察者模式的优缺点</h2><p>根据上面介绍的观察者模式的定义，可以看下具体的优缺点</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>观察者和被观察值之间是抽象的耦合关系，如此设计很容易扩展观察者和被观察者</li>
<li>实现了一套触发机制，可以看到，在<code>ConcreteSubject</code>中的<code>work</code>方法中，可以通知观察者，并触发对应的<code>update</code>方法，这里并不关心每一个观察者具体是怎么处理的，它要做的只是通知观察者。</li>
<li>支持广播通信，因为被观察者中可以增加和删除观察者，这样在通知时会通知所有的观察者</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>如果一个被观察者对象有很多的观察者，那么通知观察者将会很耗时</li>
<li>如果在被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，导致系统崩溃。这是很严重的问题，这一点特别要注意</li>
<li>虽然观察者模式可以随时使观察者知道所观察的对象发生了变化，但是观察者模式没有相应的机制使观察者知道所观察的对象是怎么发生变化的</li>
</ul>
<h2 id="Java中的观察者模式"><a href="#Java中的观察者模式" class="headerlink" title="Java中的观察者模式"></a>Java中的观察者模式</h2><p>在JDK中，已经提供了观察者模式，主要是<code>java.util.Observerbal</code>实现类和<code>java.util.Observer</code>接口，也就是说我们可以不用单独写一个观察者模式，直接使用JDK提供的即可。</p>
<p>下面写一个具体的例子来说明一下JDK中观察者模式的使用。</p>
<p>假设我要实现一个温度监控的功能，当温度超过26°C的时候，通知主人关窗，并且通知空调启动。</p>
<p>很简单，有一个温度计类，是被观察者，定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thermometer</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 温度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> temperature;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> temperature;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemperature</span><span class="params">(<span class="keyword">int</span> temperature)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temperature = temperature;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 监控温度</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (temperature &gt; <span class="number">25</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"温度高于25°C，通知观察者..."</span>);</div><div class="line">            <span class="comment">// 温度变化</span></div><div class="line">            <span class="keyword">super</span>.setChanged();</div><div class="line">            <span class="comment">// 通知观察者</span></div><div class="line">            <span class="keyword">super</span>.notifyObservers(temperature);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有家里的主人，是观察者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"主人收到消息，温度是"</span> + arg + <span class="string">"°C"</span>);</div><div class="line">        System.out.println(<span class="string">"关闭窗户..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有一个观察者，是空调：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirConditioner</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"空调收到消息，温度是"</span> + arg + <span class="string">"°C"</span>);</div><div class="line">        System.out.println(<span class="string">"启动空调..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看注释已经能够明白是怎么回事了，下面看下他们之间的类图：</p>
<img src="/2016/12/04/设计模式：观察者模式/QQ20161204-1.png" alt="QQ20161204-1.png" title="">
<p>可以看到，一个<code>Observer</code>包含了多个<code>Observable</code>，<code>Man</code>和<code>AirConditioner</code>作为观察者都实现了<code>Observer</code>接口，<code>Thermometer</code>作为被观察者，继承了<code>Observable</code>。</p>
<p>下面看一下场景类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Thermometer thermometer = <span class="keyword">new</span> Thermometer();</div><div class="line">        Observer man = <span class="keyword">new</span> Man();</div><div class="line">        Observer airConditioner = <span class="keyword">new</span> AirConditioner();</div><div class="line">        <span class="comment">// 添加观察者</span></div><div class="line">        thermometer.addObserver(man);</div><div class="line">        thermometer.addObserver(airConditioner);</div><div class="line">        <span class="comment">// 设置温度为26°C</span></div><div class="line">        thermometer.setTemperature(<span class="number">26</span>);</div><div class="line">        <span class="comment">// 开始监控</span></div><div class="line">        thermometer.monitor();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">温度高于25°C，通知观察者...</div><div class="line">空调收到消息，温度是26°C</div><div class="line">启动空调...</div><div class="line">主人收到消息，温度是26°C</div><div class="line">关闭窗户...</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>观察者模式的实际应用有很多，比如Tomcat中的生命周期，就是典型的观察者模式，了解了观察者模式之后，再要了解Tomcat的生命周期就会非常容易了。</p>
<p>再比如现实生活中的例子，点一份外卖，点的商品相当于被观察者，商家和送餐员相当于观察者，点餐时，通知商家下订单，并且也会通知送餐员去商家取餐，而点餐的你也相当于观察者，可以查看送餐的进度。所以，观察者模式的用途也是比较广泛的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码：服务器组件]]></title>
      <url>http://www.ideabuffer.cn/2016/12/03/Tomcat%E6%BA%90%E7%A0%81%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="Server接口"><a href="#Server接口" class="headerlink" title="Server接口"></a>Server接口</h2><p><code>org.apache.catalina.Server</code>接口定义了Tomcat的服务器组件，该接口的实例代表了整个servlet引擎，包括了所有的组件。Tomcat的服务器组件非常重要，因为它可以很优雅的来启动或关闭整个系统，不需要对连接器和容器单独进行启动和关闭。</p>
<p>下面来介绍一下启动和关闭的工作原理。</p>
<p>从之前的文章<a href="/2016/11/26/Tomcat源码：Bootstrap启动流程/">Tomcat源码：Bootstrap启动流程</a>和<a href="/2016/11/27/Tomcat源码：Catalina启动流程/">Tomcat源码：Catalina启动流程</a>可以了解到，当Tomcat启动的时候，会调用<code>Catalina</code>的<code>setAwait(true)</code>方法，将<code>await</code>变量设置为<code>true</code>，然后调用<code>start</code>方法启动Tomcat，看下<code>Catalina</code>中的<code>start</code>方法的最后几行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (await) &#123;</div><div class="line">    await();</div><div class="line">    stop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>回顾一下上篇<a href="/2016/11/27/Tomcat源码：Catalina启动流程/">Tomcat源码：Catalina启动流程</a>中提到的<code>await</code>方法的作用：</p>
<ul>
<li>判断当前启动的Server所要绑定的端口是否被占用</li>
<li>监听Server的端口，会一直等待接收关闭命令</li>
</ul>
<p>如果要关闭Tomcat，就可以向Server指定的端口发送一个关闭命令（默认是<em>SHUTDOWN</em>），接收到关闭命令后就会关闭所有的组件。</p>
<p>下面给出Server接口的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Server</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> NamingResourcesImpl <span class="title">getGlobalNamingResources</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGlobalNamingResources</span><span class="params">(NamingResourcesImpl globalNamingResources)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> javax.naming.<span class="function">Context <span class="title">getGlobalNamingContext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShutdown</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShutdown</span><span class="params">(String shutdown)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getParentClassLoader</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentClassLoader</span><span class="params">(ClassLoader parent)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Catalina <span class="title">getCatalina</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCatalina</span><span class="params">(Catalina catalina)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getCatalinaBase</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCatalinaBase</span><span class="params">(File catalinaBase)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getCatalinaHome</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCatalinaHome</span><span class="params">(File catalinaHome)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addService</span><span class="params">(Service service)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Service <span class="title">findService</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Service[] findServices();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeService</span><span class="params">(Service service)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getNamingToken</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，<code>setShutdown</code>方法用于设置Server的关闭命令，<code>setPort</code>方法用于设置Server的端口，用于接收关闭命令，<code>addService</code>方法用于添加服务组件，<code>removeService</code>方法用来删除服务组件，<code>findServices</code>方法用来添加到该服务器组件的所有服务组件，以及刚才提到的<code>await</code>方法。</p>
<h2 id="StandardServer类"><a href="#StandardServer类" class="headerlink" title="StandardServer类"></a>StandardServer类</h2><p><code>org.apache.catalina.core.StandardServer</code>类是<code>Server</code>接口的标准实现。从Server接口的定义可以看出，一个服务器组件可以有多个服务组件，当然，由于<code>StandardServer</code>继承了<code>LifecycleBase</code>，也就是实现了<code>LifeCycle</code>接口，所以StandardServer类中有4个与生命周期有关的方法，分别是<code>initInternal()</code>方法、<code>startInternal()</code>方法、<code>stopInternal()</code>和<code>destroyInternal()</code>方法。</p>
<p>说明一下，上面4个方法对应于<code>Lifecycle</code>接口中定义的<code>init()</code>方法、<code>start()</code>方法、<code>stop()</code>方法和<code>destroy()</code>方法，这4个方法已经被<code>LifecycleBase</code>实现，而<code>LifecycleBase</code>是一个抽象类，以<code>initInternal()</code>方法为例，该方法是一个抽象方法，StandardServer实现了该方法，相当于一个钩子方法，如果你了解了设计模式中的模板模式，这个应该就好理解了，看下<code>LifecycleBase</code>中的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!state.equals(LifecycleState.NEW)) &#123;</div><div class="line">        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</div><div class="line">    &#125;</div><div class="line">    setStateInternal(LifecycleState.INITIALIZING, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        initInternal();</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        ExceptionUtils.handleThrowable(t);</div><div class="line">        setStateInternal(LifecycleState.FAILED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</div><div class="line">                sm.getString(<span class="string">"lifecycleBase.initFail"</span>,toString()), t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setStateInternal(LifecycleState.INITIALIZED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div></pre></td></tr></table></figure>
<p>这下应该很明白了吧。类似的还有<code>start()</code>方法和<code>stop()</code>方法。</p>
<p>有关生命周期我以后会单独写一篇文章，这里就不过多介绍了。</p>
<p>看一下服务器组件的类图：</p>
<img src="/2016/12/03/Tomcat源码：服务器组件/屏幕快照%202016-12-04%20上午12.34.30.png" alt="屏幕快照 2016-12-04 上午12.34.30.png" title="">
<h3 id="initInternal方法"><a href="#initInternal方法" class="headerlink" title="initInternal方法"></a>initInternal方法</h3><p>该方法代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>.initInternal();</div><div class="line"></div><div class="line">    <span class="comment">// Register global String cache</span></div><div class="line">    <span class="comment">// Note although the cache is global, if there are multiple Servers</span></div><div class="line">    <span class="comment">// present in the JVM (may happen when embedding) then the same cache</span></div><div class="line">    <span class="comment">// will be registered under multiple names</span></div><div class="line">    onameStringCache = register(<span class="keyword">new</span> StringCache(), <span class="string">"type=StringCache"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Register the MBeanFactory</span></div><div class="line">    MBeanFactory factory = <span class="keyword">new</span> MBeanFactory();</div><div class="line">    factory.setContainer(<span class="keyword">this</span>);</div><div class="line">    onameMBeanFactory = register(factory, <span class="string">"type=MBeanFactory"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Register the naming resources</span></div><div class="line">    globalNamingResources.init();</div><div class="line"></div><div class="line">    <span class="comment">// Populate the extension validator with JARs from common and shared</span></div><div class="line">    <span class="comment">// class loaders</span></div><div class="line">    <span class="keyword">if</span> (getCatalina() != <span class="keyword">null</span>) &#123;</div><div class="line">        ClassLoader cl = getCatalina().getParentClassLoader();</div><div class="line">        <span class="comment">// Walk the class loader hierarchy. Stop at the system class loader.</span></div><div class="line">        <span class="comment">// This will add the shared (if present) and common class loaders</span></div><div class="line">        <span class="keyword">while</span> (cl != <span class="keyword">null</span> &amp;&amp; cl != ClassLoader.getSystemClassLoader()) &#123;</div><div class="line">            <span class="keyword">if</span> (cl <span class="keyword">instanceof</span> URLClassLoader) &#123;</div><div class="line">                URL[] urls = ((URLClassLoader) cl).getURLs();</div><div class="line">                <span class="keyword">for</span> (URL url : urls) &#123;</div><div class="line">                    <span class="keyword">if</span> (url.getProtocol().equals(<span class="string">"file"</span>)) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            File f = <span class="keyword">new</span> File (url.toURI());</div><div class="line">                            <span class="keyword">if</span> (f.isFile() &amp;&amp;</div><div class="line">                                    f.getName().endsWith(<span class="string">".jar"</span>)) &#123;</div><div class="line">                                ExtensionValidator.addSystemResource(f);</div><div class="line">                            &#125;</div><div class="line">                        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</div><div class="line">                            <span class="comment">// Ignore</span></div><div class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                            <span class="comment">// Ignore</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            cl = cl.getParent();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Initialize our defined Services</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</div><div class="line">        services[i].init();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面是JNDI和一些MBean的操作以及对扩展依赖项的验证，最后是初始化服务组件。</p>
<p>服务组件<code>services</code>怎么来的？回顾一下<a href="/2016/11/27/Tomcat源码：Catalina启动流程/#createStartDigester方法">Tomcat源码：Catalina启动流程</a>中的<code>createStartDigester</code>方法，想想也就可以知道，肯定是通过解析<code>server.xml</code>文件得到的。</p>
<h3 id="startInternal方法"><a href="#startInternal方法" class="headerlink" title="startInternal方法"></a>startInternal方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line"></div><div class="line">    fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>);</div><div class="line">    setState(LifecycleState.STARTING);</div><div class="line"></div><div class="line">    globalNamingResources.start();</div><div class="line"></div><div class="line">    <span class="comment">// Start our defined Services</span></div><div class="line">    <span class="keyword">synchronized</span> (servicesLock) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</div><div class="line">            services[i].start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非常简单，首先是对全局JNDI的资源的启动，然后是对服务组件的启动。</p>
<p>介绍到这里，其实<code>stopInternal()</code>方法和<code>destroyInternal()</code>方法与这两种方法类似，无非就是调用服务组件的<code>stop()</code>方法和<code>destroy()</code>方法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从上面的分析可以看出，StandardServer作为一个标准的服务器组件，它的主要工作是对服务组件的初始化、启动、关闭和销毁，功能比较简单，同时也可以看出，它使用一种优雅的方式来对服务组件进行启动和关闭的操作，没有对连接器和容器进行单独操作。</p>
<p>服务器组件实现了<code>Lifecycle</code>接口，生命周期在整个Tomcat中具有非常重要的作用，可以用它来管理不同层级的组件，Tomcat在设计上允许一个组件包含其他组件，例如本文中介绍的服务器组件，它包含了服务组件，再例如，服务组件包含了连接器和容器，容器中又可以包含类加载器和管理器等等。</p>
<p>父组件可以启动或关闭子组件，正式这种设计使得Tomcat在启动时只需要启动一个组件就可以将全部的组件都启动起来，这就是单一启动/关闭机制，而实现这一机制就是通过实现<code>Lifecycle</code>接口来完成的。</p>
<p>不多说了，好像有点跑题了。。。但要弄清楚服务器组件的工作流程必然要提及到<code>Lifecycle</code>，通过本篇文章的介绍，相信大家已经对服务器组件的工作有了一定了解，后续会继续分析服务组件以及详细介绍一下生命周期，先到这里吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java7 中的try-with-resources]]></title>
      <url>http://www.ideabuffer.cn/2016/12/02/Java7%E4%B8%AD%E7%9A%84try-with-resources/</url>
      <content type="html"><![CDATA[<p>今天调试了一下Tomcat关闭代码，在执行关闭时会调用<code>Catalina</code>对象的<code>stopServer</code>方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopServer</span><span class="params">(String[] arguments)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (arguments != <span class="keyword">null</span>) &#123;</div><div class="line">        arguments(arguments);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Server s = getServer();</div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Create and execute our Digester</span></div><div class="line">        Digester digester = createStopDigester();</div><div class="line">        File file = configFile();</div><div class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(file)) &#123;</div><div class="line">            InputSource is =</div><div class="line">                <span class="keyword">new</span> InputSource(file.toURI().toURL().toString());</div><div class="line">            is.setByteStream(fis);</div><div class="line">            digester.push(<span class="keyword">this</span>);</div><div class="line">            digester.parse(is);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"Catalina.stop: "</span>, e);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Server object already present. Must be running as a service</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            s.stop();</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">            log.error(<span class="string">"Catalina.stop: "</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Stop the existing server</span></div><div class="line">    s = getServer();</div><div class="line">    <span class="keyword">if</span> (s.getPort()&gt;<span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 注意这段代码，并没有对资源进行close</div><div class="line">         */</div><div class="line">        <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(s.getAddress(), s.getPort());</div><div class="line">                OutputStream stream = socket.getOutputStream()) &#123;</div><div class="line">            String shutdown = s.getShutdown();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shutdown.length(); i++) &#123;</div><div class="line">                stream.write(shutdown.charAt(i));</div><div class="line">            &#125;</div><div class="line">            stream.flush();</div><div class="line">        &#125; <span class="keyword">catch</span> (ConnectException ce) &#123;</div><div class="line">            log.error(sm.getString(<span class="string">"catalina.stopServer.connectException"</span>,</div><div class="line">                                   s.getAddress(),</div><div class="line">                                   String.valueOf(s.getPort())));</div><div class="line">            log.error(<span class="string">"Catalina.stop: "</span>, ce);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            log.error(<span class="string">"Catalina.stop: "</span>, e);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        log.error(sm.getString(<span class="string">"catalina.stopServer"</span>));</div><div class="line">        System.exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>啥意思呢，就是在执行<code>stopServer</code>方法时通过<code>Socket</code>来发送一个<code>SHUTDOWN</code>字符串到指定Tomcat的Server监听端口（默认为8005），来告诉Tomcat要执行关闭操作。</p>
<p>接收这个字符串的代码在<code>StandardServer</code>的<code>await</code>方法中，代码如下：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    InputStream stream;</div><div class="line">    <span class="keyword">long</span> acceptStartTime = System.currentTimeMillis();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 接收socket</span></div><div class="line">        socket = serverSocket.accept();</div><div class="line">        <span class="comment">// 设置超时时间为10妙</span></div><div class="line">        socket.setSoTimeout(<span class="number">10</span> * <span class="number">1000</span>);  <span class="comment">// Ten seconds</span></div><div class="line">        <span class="comment">// 获取输入流</span></div><div class="line">        stream = socket.getInputStream();</div><div class="line">    &#125; <span class="keyword">catch</span> (SocketTimeoutException ste) &#123;</div><div class="line">        <span class="comment">// This should never happen but bug 56684 suggests that</span></div><div class="line">        <span class="comment">// it does.</span></div><div class="line">        log.warn(sm.getString(<span class="string">"standardServer.accept.timeout"</span>,</div><div class="line">                Long.valueOf(System.currentTimeMillis() - acceptStartTime)), ste);</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (AccessControlException ace) &#123;</div><div class="line">        log.warn(<span class="string">"StandardServer.accept security exception: "</span></div><div class="line">                + ace.getMessage(), ace);</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        <span class="keyword">if</span> (stopAwait) &#123;</div><div class="line">            <span class="comment">// Wait was aborted with socket.close()</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        log.error(<span class="string">"StandardServer.await: accept: "</span>, e);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Read a set of characters from the socket</span></div><div class="line">    <span class="keyword">int</span> expected = <span class="number">1024</span>; <span class="comment">// Cut off to avoid DoS attack</span></div><div class="line">    <span class="keyword">while</span> (expected &lt; shutdown.length()) &#123;</div><div class="line">        <span class="keyword">if</span> (random == <span class="keyword">null</span>)</div><div class="line">            random = <span class="keyword">new</span> Random();</div><div class="line">        expected += (random.nextInt() % <span class="number">1024</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (expected &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">int</span> ch = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 接收字符</span></div><div class="line">            ch = stream.read();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            log.warn(<span class="string">"StandardServer.await: read: "</span>, e);</div><div class="line">            ch = -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ch &lt; <span class="number">32</span>)  <span class="comment">// Control character or EOF terminates loop</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        command.append((<span class="keyword">char</span>) ch);</div><div class="line">        expected--;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">// Close the socket now that we are done with it</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</div><div class="line">            socket.close();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        <span class="comment">// Ignore</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意看下第41行的代码<code>ch = stream.read()</code>，这个用来接收一个字符。再看下第46行，说明已经接收完毕，通常应该<code>ch</code>应该是-1，然后break。</p>
<p>但在关闭时断点如果执行完<code>stream.flush()</code>后，<code>await</code>方法在接收最后一个字符的时候会一直等待，直到timeOut指定的时间，然后会报如下异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">警告: StandardServer.await: read: </div><div class="line">java.net.SocketTimeoutException: Read timed out</div><div class="line">	at java.net.SocketInputStream.socketRead0(Native Method)</div><div class="line">	at java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class="number">116</span>)</div><div class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">170</span>)</div><div class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">141</span>)</div><div class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">223</span>)</div><div class="line">	at org.apache.catalina.core.StandardServer.await(StandardServer.java:<span class="number">498</span>)</div><div class="line">	at org.apache.catalina.startup.Catalina.await(Catalina.java:<span class="number">739</span>)</div><div class="line">	at org.apache.catalina.startup.Catalina.start(Catalina.java:<span class="number">685</span>)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">497</span>)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:<span class="number">355</span>)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:<span class="number">495</span>)</div></pre></td></tr></table></figure>
<p>这说明这个socket并未关闭，回过头来看<code>stopServer</code>中的代码，发现在<code>try-catch</code>中并未显式关闭<code>socket</code>和<code>stream</code>，如果断点再走一步的话，在<code>await</code>中的接收就变的正常了，说明在<code>try</code>语句块中执行完毕后自动关闭了<code>socket</code>和<code>stream</code>。</p>
<p>这种写法还真是第一次见，孤陋寡闻了。。。</p>
<p>其实，这是Java7中提供的一个新的异常处理机制，它能够很容易地关闭在try-catch语句块中使用的资源。</p>
<p>还有一个名字，叫做<em>try-with-resources</em></p>
<h2 id="旧的代码风格"><a href="#旧的代码风格" class="headerlink" title="旧的代码风格"></a>旧的代码风格</h2><p>在Java7以前，代码中使用的资源需要被明确地关闭，这个在写的时候就会有些繁琐，例如下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    InputStream in = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        in = <span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> c = in.read();</div><div class="line">            <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            System.out.println((<span class="keyword">char</span>) c);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (in != <span class="keyword">null</span>)</div><div class="line">            in.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，上面代码在执行<code>new FileInputStream(&quot;test.txt&quot;)</code>、<code>in.read()</code>和<code>in.close()</code>时都可能抛出异常。</p>
<p>那么到这里可以分析一下，如果在<code>try</code>语句块中抛出了异常，<code>finally</code>语句块仍然会执行，然而<code>finally</code>语句块在执行<code>in.close()</code>时也可能会抛出异常。</p>
<p>这时问题来了，如果<code>try</code>语句块中抛出了异常，<code>finally</code>语句块也抛出了异常，那么到底是哪个异常会在方法返回时向外传播？</p>
<p>其实在上面的代码中，如果都抛出异常，则在<code>finally</code>语句块中抛出的异常会向外传播，<code>try</code>语句块中的异常被抑制了。</p>
<h2 id="try-with-resources代码风格"><a href="#try-with-resources代码风格" class="headerlink" title="try-with-resources代码风格"></a>try-with-resources代码风格</h2><p>在Java7之后，上面的代码还可以这么写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>);) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> c = in.read();</div><div class="line">            <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            System.out.println((<span class="keyword">char</span>) c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码只是把InputStream放到了<code>try</code>语句后面的小括号中来声明创建一个<code>FileInputStream</code>对象，在<code>try</code>语句块运行结束时会对<code>FileInputStream</code>对象自动进行关闭。</p>
<p>为什么会这样？</p>
<p>因为<code>FileInputStream</code>实现了<code>java.lang.AutoCloseable</code>接口，可以看下对应的类结构：</p>
<img src="/2016/12/02/Java7中的try-with-resources/屏幕快照%202016-12-01%20下午11.56.07.png" alt="屏幕快照 2016-12-01 下午11.56.07.png" title="">
<p>所有实现了<code>java.lang.AutoCloseable</code>接口的类都可以在<code>try-with-resources</code>结构中使用。</p>
<p>那么再考虑一下之前提到过的问题，如果这时对<code>FileInputStream</code>对象自动关闭（会调用close方法）时抛出了异常，并且<code>in.read()</code>也抛出了异常，那么在方法执行完毕时，<code>in.read()</code>抛出的异常会向外传播，<code>FileInputStream</code>对象关闭时抛出的异常将被抑制。这与之前旧的代码风格的异常抛出方式正好相反。</p>
<h2 id="try-with-resources使用多个资源"><a href="#try-with-resources使用多个资源" class="headerlink" title="try-with-resources使用多个资源"></a>try-with-resources使用多个资源</h2><p>在<code>try-with-resources</code>中可以使用多个资源，而且多个资源都能被自动关闭，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> (</div><div class="line">            FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>);</div><div class="line">            BufferedInputStream bfIn = <span class="keyword">new</span> BufferedInputStream((in));</div><div class="line">    ) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> c = bfIn.read();</div><div class="line">            <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            System.out.println((<span class="keyword">char</span>) c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里创建了两个资源：<code>FileInputStream</code>和<code>BufferedInputStream</code>。当<code>try</code>语句块运行结束时，这两个资源都会被自动关闭，而且关闭的顺序与创建的顺序相反（先关闭<code>BufferedInputStream</code>，后关闭<code>FileInputStream</code>），稍后会验证。</p>
<h2 id="AutoCloseable接口"><a href="#AutoCloseable接口" class="headerlink" title="AutoCloseable接口"></a>AutoCloseable接口</h2><p>先来查看一下<code>java.lang.AutoCloseable</code>接口的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，只有一个<code>close()</code>方法。</p>
<h2 id="AutoCloseable接口的实现"><a href="#AutoCloseable接口的实现" class="headerlink" title="AutoCloseable接口的实现"></a>AutoCloseable接口的实现</h2><p>下面自定义一个类，来实现这个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm closing..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类实现了<code>AutoCloseable</code>接口，下面来使用这个类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">try</span> (</div><div class="line">            AutoCloseableTest test = <span class="keyword">new</span> AutoCloseableTest();</div><div class="line">    ) &#123;</div><div class="line">        test.say();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行查看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hello World</div><div class="line">I&apos;m closing...</div></pre></td></tr></table></figure>
<h2 id="验证多个资源的关闭"><a href="#验证多个资源的关闭" class="headerlink" title="验证多个资源的关闭"></a>验证多个资源的关闭</h2><p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">try</span> (</div><div class="line">                AutoCloseableTest test = <span class="keyword">new</span> AutoCloseableTest();</div><div class="line">                AutoCloseableTest2 test2 = <span class="keyword">new</span> AutoCloseableTest2();</div><div class="line">        ) &#123;</div><div class="line">            test.say();</div><div class="line">            test2.say();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm in AutoCloseableTest"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"AutoCloseableTest is closing..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest2</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm in AutoCloseableTest2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"AutoCloseableTest2 is closing..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后的输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">I&apos;m in AutoCloseableTest</div><div class="line">I&apos;m in AutoCloseableTest2</div><div class="line">AutoCloseableTest2 is closing...</div><div class="line">AutoCloseableTest is closing...</div></pre></td></tr></table></figure>
<p>可以看到，两个资源都被自动关闭了，而且顺序与创建的顺序相反。</p>
<h2 id="验证被抑制的异常"><a href="#验证被抑制的异常" class="headerlink" title="验证被抑制的异常"></a>验证被抑制的异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            call();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> (</div><div class="line">                AutoCloseableTest test = <span class="keyword">new</span> AutoCloseableTest();</div><div class="line">        ) &#123;</div><div class="line">            test.say();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            System.out.println(<span class="string">"I'm in finally"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> <span class="keyword">throws</span> MyException1 </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException1(<span class="string">"I'm MyException1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2(<span class="string">"I'm MyException2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException1</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException1</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException2</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码定义了两个异常，在<code>main</code>方法中捕获并输出异常栈，结果如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">MyException1: I'm MyException1</div><div class="line">	at AutoCloseableTest.say(Test.java:31)</div><div class="line">	at Test.call(Test.java:21)</div><div class="line">	at Test.main(Test.java:9)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:497)</div><div class="line">	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)</div><div class="line">	Suppressed: MyException2: I'm MyException2</div><div class="line">		at AutoCloseableTest.close(Test.java:36)</div><div class="line">		at Test.call(Test.java:22)</div><div class="line">		... 6 more</div><div class="line">I'm in finally</div></pre></td></tr></table></figure>
<p>可见，<code>try-with-resources</code>中自动关闭时调用<code>close()</code>方法抛出的异常被抑制了，捕获到的是<code>say()</code>方法抛出的异常<code>MyException1</code>。</p>
<h2 id="验证自动关闭和finally的执行顺序"><a href="#验证自动关闭和finally的执行顺序" class="headerlink" title="验证自动关闭和finally的执行顺序"></a>验证自动关闭和finally的执行顺序</h2><p>从上面代码可以看出，先输出了异常的信息，然后才输出<code>I&#39;m in finally</code>，可见，在<code>finally</code>语句块执行之前自动关闭就已经被执行了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从以上的分析可以看出，<code>try-with-resources</code>风格可以实现以下几种情况：</p>
<ul>
<li>任何实现了AutoCloseable接口的类，在<code>try()</code>里声明该类实例的时候，在<code>try</code>语句块结束时，都会调用该实例的<code>close()</code>方法</li>
<li>调用<code>close</code>方法时抛出的异常会被<code>try</code>语句块中抛出的异常抑制</li>
<li>在<code>finally</code>语句块执行前，<code>try()</code>中声明实例的<code>close()</code>方法总被调用</li>
<li><code>try()</code>中声明实例的<code>close()</code>方法总会被调用，即使<code>try</code>语句块中出现了异常</li>
<li><code>try()</code>中声明实例的关闭顺序与创建顺序相反</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码：Catalina启动流程]]></title>
      <url>http://www.ideabuffer.cn/2016/11/27/Tomcat%E6%BA%90%E7%A0%81%EF%BC%9ACatalina%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>上篇文章分析了<code>Bootstrap</code>类的启动流程，可以知道，<code>Bootstrap</code>实际上是调用了<code>Catalina</code>类的对象来实现Tomcat的启动的，这篇文章来介绍一下<code>Catalina</code>类的启动流程。</p>
<p>回顾一下<code>Bootstrap</code>中main方法执行启动时的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</div><div class="line">    daemon.setAwait(<span class="keyword">true</span>);</div><div class="line">    daemon.load(args);</div><div class="line">    daemon.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面介绍Catalina类中的方法。</p>
<a id="more"></a>
<h2 id="await方法"><a href="#await方法" class="headerlink" title="await方法"></a>await方法</h2><p><code>daemon.setAwait(true);</code>表示该Tomcat已经执行了启动，也是调用了<code>Catalina</code>中的<code>setAwait</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Await and shutdown.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    getServer().await();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里又调用的<code>Server</code>的<code>await</code>方法，<code>await</code>方法的作用就是判断当前启动的Server所要绑定的端口（默认是8005）是否被占用，如果被占用，则会抛出以下异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">严重: StandardServer.await: create[localhost:8005]: </div><div class="line">java.net.BindException: Address already in use</div><div class="line">	at java.net.PlainSocketImpl.socketBind(Native Method)</div><div class="line">	at java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:387)</div><div class="line">	at java.net.ServerSocket.bind(ServerSocket.java:375)</div><div class="line">	at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:237)</div><div class="line">	at org.apache.catalina.core.StandardServer.await(StandardServer.java:441)</div><div class="line">	at org.apache.catalina.startup.Catalina.await(Catalina.java:743)</div><div class="line">	at org.apache.catalina.startup.Catalina.start(Catalina.java:689)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:497)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:355)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:495)</div></pre></td></tr></table></figure>
<p>还有一个作用就是监听Server的端口（默认是8005），会一直等待接收关闭命令，这个以后的文章会说到，这里就先不做介绍了。</p>
<h2 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h2><p><code>Bootstrap</code>类中的<code>load</code>方法会调用<code>Catalina</code>中的<code>load</code>方法，<code>Catalina</code>中的<code>load</code>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Start a new server instance.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line"></div><div class="line">    initDirs();</div><div class="line"></div><div class="line">    <span class="comment">// Before digester - it may be needed</span></div><div class="line">    initNaming();</div><div class="line"></div><div class="line">    <span class="comment">//使用Digester创建server.xml文件的对象，生成相应的处理规则</span></div><div class="line">    <span class="comment">// Create and execute our Digester</span></div><div class="line">    Digester digester = createStartDigester();</div><div class="line"></div><div class="line">    InputSource inputSource = <span class="keyword">null</span>;</div><div class="line">    InputStream inputStream = <span class="keyword">null</span>;</div><div class="line">    File file = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 获取配置文件，server.xml</span></div><div class="line">            file = configFile();</div><div class="line">            inputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">            inputSource = <span class="keyword">new</span> InputSource(file.toURI().toURL().toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                log.debug(sm.getString(<span class="string">"catalina.configFail"</span>, file), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                inputStream = getClass().getClassLoader()</div><div class="line">                    .getResourceAsStream(getConfigFile());</div><div class="line">                inputSource = <span class="keyword">new</span> InputSource</div><div class="line">                    (getClass().getClassLoader()</div><div class="line">                     .getResource(getConfigFile()).toString());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                    log.debug(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                            getConfigFile()), e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This should be included in catalina.jar</span></div><div class="line">        <span class="comment">// Alternative: don't bother with xml, just create it manually.</span></div><div class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                inputStream = getClass().getClassLoader()</div><div class="line">                        .getResourceAsStream(<span class="string">"server-embed.xml"</span>);</div><div class="line">                inputSource = <span class="keyword">new</span> InputSource</div><div class="line">                (getClass().getClassLoader()</div><div class="line">                        .getResource(<span class="string">"server-embed.xml"</span>).toString());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                    log.debug(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                            <span class="string">"server-embed.xml"</span>), e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span> || inputSource == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span>  (file == <span class="keyword">null</span>) &#123;</div><div class="line">                log.warn(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                        getConfigFile() + <span class="string">"] or [server-embed.xml]"</span>));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.warn(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                        file.getAbsolutePath()));</div><div class="line">                <span class="keyword">if</span> (file.exists() &amp;&amp; !file.canRead()) &#123;</div><div class="line">                    log.warn(<span class="string">"Permissions incorrect, read permission is not allowed on the file."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inputSource.setByteStream(inputStream);</div><div class="line">            </div><div class="line">            <span class="comment">//将Catalina对象压入栈底，server对象生成之后会调用当前对象的setServer方法来设置server对象</span></div><div class="line">            digester.push(<span class="keyword">this</span>);</div><div class="line">            digester.parse(inputSource);</div><div class="line">        &#125; <span class="keyword">catch</span> (SAXParseException spe) &#123;</div><div class="line">            log.warn(<span class="string">"Catalina.start using "</span> + getConfigFile() + <span class="string">": "</span> +</div><div class="line">                    spe.getMessage());</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.warn(<span class="string">"Catalina.start using "</span> + getConfigFile() + <span class="string">": "</span> , e);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                inputStream.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getServer().setCatalina(<span class="keyword">this</span>);</div><div class="line">    getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</div><div class="line">    getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</div><div class="line"></div><div class="line">    <span class="comment">// Stream redirection</span></div><div class="line">    initStreams();</div><div class="line"></div><div class="line">    <span class="comment">// Start the new server</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 初始化server</span></div><div class="line">        getServer().init();</div><div class="line">    &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">        <span class="keyword">if</span> (Boolean.getBoolean(<span class="string">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span>)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.Error(e);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            log.error(<span class="string">"Catalina.start"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">    <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</div><div class="line">        log.info(<span class="string">"Initialization processed in "</span> + ((t2 - t1) / <span class="number">1000000</span>) + <span class="string">" ms"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法主要的工作是：</p>
<ol>
<li>解析server.xml配置文件</li>
<li>根据server.xml文件创建对象，包括server，listener，service，connector，container等等</li>
<li>初始化上面创建的对象</li>
</ol>
<h2 id="server-xml文件结构"><a href="#server-xml文件结构" class="headerlink" title="server.xml文件结构"></a>server.xml文件结构</h2><p>在往下看之前，还是说一下<code>server.xml</code>的文件结构吧，也好参考的代码做对比，结构如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"UserDatabase"</span> <span class="attr">auth</span>=<span class="string">"Container"</span></span></div><div class="line">              <span class="attr">type</span>=<span class="string">"org.apache.catalina.UserDatabase"</span></div><div class="line">              <span class="attr">description</span>=<span class="string">"User database that can be updated and saved"</span></div><div class="line">              <span class="attr">factory</span>=<span class="string">"org.apache.catalina.users.MemoryUserDatabaseFactory"</span></div><div class="line">              <span class="attr">pathname</span>=<span class="string">"conf/tomcat-users.xml"</span> /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></div><div class="line"></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span></span></div><div class="line">        <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">minSpareThreads</span>=<span class="string">"4"</span>/&gt;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></div><div class="line">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</div><div class="line">   ...</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></div><div class="line"></div><div class="line">     </div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords</span></div><div class="line">           via a brute-force attack --&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span></div><div class="line">               <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span>/&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></div><div class="line">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.authenticator.SingleSignOn"</span> /&gt;</span></div><div class="line">        ...</div><div class="line">        <span class="tag">&lt;<span class="name">Context</span>&gt;</span>...<span class="tag">&lt;/<span class="name">Context</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里列出了大概的结构，接下来说明是解析<code>server.xml</code>的流程。</p>
<h2 id="createStartDigester方法"><a href="#createStartDigester方法" class="headerlink" title="createStartDigester方法"></a>createStartDigester方法</h2><p>该方法负责创建一个<code>Digester</code>对象，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Create and configure the Digester we will be using for startup.</div><div class="line"> * <span class="doctag">@return</span> the main digester to parse server.xml</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> Digester <span class="title">createStartDigester</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> t1=System.currentTimeMillis();</div><div class="line">    <span class="comment">// Initialize the digester</span></div><div class="line">    Digester digester = <span class="keyword">new</span> Digester();</div><div class="line">    digester.setValidating(<span class="keyword">false</span>);</div><div class="line">    digester.setRulesValidation(<span class="keyword">true</span>);</div><div class="line">    HashMap&lt;Class&lt;?&gt;, List&lt;String&gt;&gt; fakeAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    ArrayList&lt;String&gt; attrs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    attrs.add(<span class="string">"className"</span>);</div><div class="line">    fakeAttributes.put(Object.class, attrs);</div><div class="line">    digester.setFakeAttributes(fakeAttributes);</div><div class="line">    digester.setUseContextClassLoader(<span class="keyword">true</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 增加创建server对象的规则</span></div><div class="line">    <span class="comment">// Configure the actions we will be using</span></div><div class="line">    digester.addObjectCreate(<span class="string">"Server"</span>,</div><div class="line">                             <span class="string">"org.apache.catalina.core.StandardServer"</span>,</div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    <span class="comment">// 增加设置Server属性的规则，用户在Server对象创建完之后设置Server对象的属性值</span></div><div class="line">    digester.addSetProperties(<span class="string">"Server"</span>);</div><div class="line">    <span class="comment">// Server对象创建完成后，会调用它前一个对象的setServer方法，并把自己作为参数</span></div><div class="line">    digester.addSetNext(<span class="string">"Server"</span>,</div><div class="line">                        <span class="string">"setServer"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.Server"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/GlobalNamingResources"</span>,</div><div class="line">                             <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/GlobalNamingResources"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/GlobalNamingResources"</span>,</div><div class="line">                        <span class="string">"setGlobalNamingResources"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//创建listener，其中第二个参数为空，表示必须在配置文件中指定className</span></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Listener"</span>,</div><div class="line">                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Listener"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Listener"</span>,</div><div class="line">                        <span class="string">"addLifecycleListener"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service"</span>,</div><div class="line">                             <span class="string">"org.apache.catalina.core.StandardService"</span>,</div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service"</span>,</div><div class="line">                        <span class="string">"addService"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.Service"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Listener"</span>,</div><div class="line">                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Listener"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Listener"</span>,</div><div class="line">                        <span class="string">"addLifecycleListener"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//Executor</span></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Executor"</span>,</div><div class="line">                     <span class="string">"org.apache.catalina.core.StandardThreadExecutor"</span>,</div><div class="line">                     <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Executor"</span>);</div><div class="line"></div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Executor"</span>,</div><div class="line">                        <span class="string">"addExecutor"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.Executor"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    digester.addRule(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                     <span class="keyword">new</span> ConnectorCreateRule());</div><div class="line">    digester.addRule(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                     <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> String[]&#123;<span class="string">"executor"</span>, <span class="string">"sslImplementationName"</span>&#125;));</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                        <span class="string">"addConnector"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.connector.Connector"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>,</div><div class="line">                             <span class="string">"org.apache.tomcat.util.net.SSLHostConfig"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>,</div><div class="line">            <span class="string">"addSslHostConfig"</span>,</div><div class="line">            <span class="string">"org.apache.tomcat.util.net.SSLHostConfig"</span>);</div><div class="line"></div><div class="line">    digester.addRule(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,</div><div class="line">                     <span class="keyword">new</span> CertificateCreateRule());</div><div class="line">    digester.addRule(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,</div><div class="line">                     <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> String[]&#123;<span class="string">"type"</span>&#125;));</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,</div><div class="line">                        <span class="string">"addCertificate"</span>,</div><div class="line">                        <span class="string">"org.apache.tomcat.util.net.SSLHostConfigCertificate"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Connector/Listener"</span>,</div><div class="line">                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                             <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Connector/Listener"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/Listener"</span>,</div><div class="line">                        <span class="string">"addLifecycleListener"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>,</div><div class="line">                              <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                              <span class="string">"className"</span>);</div><div class="line">    digester.addSetProperties(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>);</div><div class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>,</div><div class="line">                        <span class="string">"addUpgradeProtocol"</span>,</div><div class="line">                        <span class="string">"org.apache.coyote.UpgradeProtocol"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Add RuleSets for nested elements</span></div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/GlobalNamingResources/"</span>));</div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> EngineRuleSet(<span class="string">"Server/Service/"</span>));</div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">"Server/Service/Engine/"</span>));</div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> ContextRuleSet(<span class="string">"Server/Service/Engine/Host/"</span>));</div><div class="line">    addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Host/Cluster/"</span>);</div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/Service/Engine/Host/Context/"</span>));</div><div class="line"></div><div class="line">    <span class="comment">// When the 'engine' is found, set the parentClassLoader.</span></div><div class="line">    digester.addRule(<span class="string">"Server/Service/Engine"</span>,</div><div class="line">                     <span class="keyword">new</span> SetParentClassLoaderRule(parentClassLoader));</div><div class="line">    addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Cluster/"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2=System.currentTimeMillis();</div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">        log.debug(<span class="string">"Digester for server.xml created "</span> + ( t2-t1 ));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (digester);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面我只注释了创建Server对象的部分，其他的原理都类似，就不多说了，这里要注意一个地方：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server对象创建完成后，会调用它前一个对象的setServer方法，并把自己作为参数</span></div><div class="line">digester.addSetNext(<span class="string">"Server"</span>, <span class="string">"setServer"</span>, <span class="string">"org.apache.catalina.Server"</span>);</div></pre></td></tr></table></figure>
<p>回顾一下<code>load</code>方法中的这段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将Catalina对象压入栈底，server对象生成之后会调用当前对象的setServer方法来设置server对象</span></div><div class="line">digester.push(<span class="keyword">this</span>);</div><div class="line">digester.parse(inputSource);</div></pre></td></tr></table></figure>
<p>意思就是把当前的<code>Catalina</code>对象压入栈底，然后解析配置文件。所以在Server对象创建完成后，会调用<code>Catalina</code>对象的setServer方法。</p>
<p>这里简单介绍一下<code>Digester</code>解析的原理：</p>
<ul>
<li>Digester实例有一个内部栈用来临时存储对象。当addObjectCreate方法实例化一个类时，就将结果放到栈中。</li>
<li>当调用两个addObjectCreate方法时，第一个对象首先放入栈中，接着是第二个对象。</li>
<li>addSetNext方法用于创建两个对象之间的关系，其通过调用第一个对象指定的方法并以第二个对象作为参数传递给这个方法。</li>
</ul>
<p>有关<code>Digester</code>库的更详细的用法，请自行查找相关资料。</p>
<h2 id="start方法"><a href="#start方法" class="headerlink" title="start方法"></a>start方法</h2><p>这里才是真正启动tomcat的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Start a new server instance.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</div><div class="line">        load();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</div><div class="line">        log.fatal(<span class="string">"Cannot start server. Server instance is not configured."</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line"></div><div class="line">    <span class="comment">// Start the new server</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 启动server</span></div><div class="line">        getServer().start();</div><div class="line">    &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">        log.fatal(sm.getString(<span class="string">"catalina.serverStartFail"</span>), e);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            getServer().destroy();</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e1) &#123;</div><div class="line">            log.debug(<span class="string">"destroy() failed for failed Server "</span>, e1);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">    <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</div><div class="line">        log.info(<span class="string">"Server startup in "</span> + ((t2 - t1) / <span class="number">1000000</span>) + <span class="string">" ms"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Register shutdown hook</span></div><div class="line">    <span class="keyword">if</span> (useShutdownHook) &#123;</div><div class="line">        <span class="keyword">if</span> (shutdownHook == <span class="keyword">null</span>) &#123;</div><div class="line">            shutdownHook = <span class="keyword">new</span> CatalinaShutdownHook();</div><div class="line">        &#125;</div><div class="line">        Runtime.getRuntime().addShutdownHook(shutdownHook);</div><div class="line"></div><div class="line">        <span class="comment">// If JULI is being used, disable JULI's shutdown hook since</span></div><div class="line">        <span class="comment">// shutdown hooks run in parallel and log messages may be lost</span></div><div class="line">        <span class="comment">// if JULI's hook completes before the CatalinaShutdownHook()</span></div><div class="line">        LogManager logManager = LogManager.getLogManager();</div><div class="line">        <span class="keyword">if</span> (logManager <span class="keyword">instanceof</span> ClassLoaderLogManager) &#123;</div><div class="line">            ((ClassLoaderLogManager) logManager).setUseShutdownHook(</div><div class="line">                    <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (await) &#123;</div><div class="line">        await();</div><div class="line">        stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>await</code>在开头已经讨论过，就不说了。这里的<code>getServer().start()</code>是负责启动server对象的，其实server对象需要做的只是启动<code>globalNamingResources</code>和<code>service</code>，进而会启动整个tomcat，通过上面给出的<code>server.xml</code>文件的结构也可以知道，因为<code>GlobalNamingResources</code>和<code>Service</code>是<code>Server</code>的子元素。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，<code>Catalina</code>的初始化和启动工作流程算是完成了。</p>
<p>由<a href="/2016/11/26/Tomcat源码：Bootstrap启动流程/">上一篇：Tomcat源码：Bootstrap启动流程</a>和这篇文章来看，我们已经大概了解了tomcat的启动过程，所以可以总结出来tomcat的各个组件的层次关系大概如下图所示：</p>
<img src="/2016/11/27/Tomcat源码：Catalina启动流程/tomcat-components.png" alt="tomcat-components.png" title="">
<p>层次结构还算比较清晰的，接下来就是各个组件的初始化和启动的工作流程，这些流程后续有时间也会详细讨论。</p>
<p>睡觉。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码：Bootstrap启动流程]]></title>
      <url>http://www.ideabuffer.cn/2016/11/26/Tomcat%E6%BA%90%E7%A0%81%EF%BC%9ABootstrap%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>Tomcat的启动流程从整体上来说并不算复杂，启动的入口就是从Bootstrap类的main方法开始的，这篇文章就让我们来看一下Bootstrap这个类都干了些什么。</p>
<h2 id="Bootstrap类中的变量"><a href="#Bootstrap类中的变量" class="headerlink" title="Bootstrap类中的变量"></a>Bootstrap类中的变量</h2><p>首先看下Bootstrap都定义了哪些变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bootstrap类的引用</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Bootstrap daemon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// 这两个路径一般都是tomcat的根目录，即webapp的父目录</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> File catalinaBaseFile;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> File catalinaHomeFile;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATH_PATTERN = Pattern.compile(<span class="string">"(\".*?\")|(([^,])*)"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 这个其实就是`org.apache.catalina.startup.Catalina`对象，它是真正负责启动server的对象</span></div><div class="line"><span class="keyword">private</span> Object catalinaDaemon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// tomcat涉及到的类加载器</span></div><div class="line">ClassLoader commonLoader = <span class="keyword">null</span>;</div><div class="line">ClassLoader catalinaLoader = <span class="keyword">null</span>;</div><div class="line">ClassLoader sharedLoader = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Tomcat的类加载器"><a href="#Tomcat的类加载器" class="headerlink" title="Tomcat的类加载器"></a>Tomcat的类加载器</h2><p>首先看下JVM的类加载器的结构：</p>
<img src="/2016/11/26/Tomcat源码：Bootstrap启动流程/jvm-class-loader.png" alt="jvm-class-loader.png" title="">
<ul>
<li>Bootstrap：引导类加载器，负责加载<code>rt.jar</code></li>
<li>Extension：扩展类加载器，负责加载<code>jre/lib/ext</code>中的jar</li>
<li>System：系统类加载器，负责加载指定classpath中的jar</li>
</ul>
<p>下面来看一下tomcat的类加载器的结构：</p>
<img src="/2016/11/26/Tomcat源码：Bootstrap启动流程/tomcat-class-loader.png" alt="tomcat-class-loader.png" title="">
<ul>
<li>Bootstrap：负责加载JVM启动时所需要的类以及<code>$JAVA_HOME/jre/lib/ext</code>目录中的类。相当于Java类加载器的Bootstrap和Extension。</li>
<li>System：负责加载<code>$CATALINA_HOME/bin</code>目录下的类，比如<code>bootstrap.jar</code></li>
<li>Common：负责加载tomcat使用以及应用通用的一些类，位于<code>$CATALINA_HOME/lib</code>或<code>$CATALINA_BASE/lib</code>下的jar，比如<code>servlet-api.jar</code></li>
<li>WebappX：每个应用在部署后，都会创建一个唯一的类加载器。该类加载器会加载位于该应用下的<code>WEB-INF/lib</code>中的jar文件和<code>WEB-INF/classes</code>中的class文件</li>
</ul>
<p>在tomcat中，如果要加载一个类，那么他的加载顺序为：</p>
<ol>
<li><p>使用bootstrap引导类加载器加载</p>
</li>
<li><p>使用system系统类加载器加载</p>
</li>
<li><p>使用应用类加载器在<code>WEB-INF/classes</code>中加载</p>
</li>
<li><p>使用应用类加载器在<code>WEB-INF/lib</code>中加载</p>
</li>
<li><p>使用common类加载器在<code>$CATALINA_HOME/lib</code>或<code>$CATALINA_BASE/lib</code>中加载</p>
</li>
</ol>
<p>参考：<a href="http://tomcat.apache.org/tomcat-8.5-doc/class-loader-howto.html" target="_blank" rel="external">tomcat-8.5-doc</a></p>
<h2 id="static代码块"><a href="#static代码块" class="headerlink" title="static代码块"></a>static代码块</h2><p>在static代码块中，主要是对一些路径进行初始化。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    <span class="comment">//当前tomcat的路径，其实就是tomcat所在的目录的路径</span></div><div class="line">    <span class="comment">// Will always be non-null</span></div><div class="line">    String userDir = System.getProperty(<span class="string">"user.dir"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 该路径是设置的catalina.home指定的路径</span></div><div class="line">    <span class="comment">// Home first</span></div><div class="line">    String home = System.getProperty(Globals.CATALINA_HOME_PROP);</div><div class="line">    File homeFile = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (home != <span class="keyword">null</span>) &#123;</div><div class="line">        File f = <span class="keyword">new</span> File(home);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            homeFile = f.getCanonicalFile();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">            homeFile = f.getAbsoluteFile();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (homeFile == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// First fall-back. See if current directory is a bin directory</span></div><div class="line">        <span class="comment">// in a normal Tomcat install</span></div><div class="line">        File bootstrapJar = <span class="keyword">new</span> File(userDir, <span class="string">"bootstrap.jar"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bootstrapJar.exists()) &#123;</div><div class="line">            File f = <span class="keyword">new</span> File(userDir, <span class="string">".."</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                homeFile = f.getCanonicalFile();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">                homeFile = f.getAbsoluteFile();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (homeFile == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Second fall-back. Use current directory</span></div><div class="line">        File f = <span class="keyword">new</span> File(userDir);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            homeFile = f.getCanonicalFile();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">            homeFile = f.getAbsoluteFile();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    catalinaHomeFile = homeFile;</div><div class="line">    System.setProperty(</div><div class="line">            Globals.CATALINA_HOME_PROP, catalinaHomeFile.getPath());</div><div class="line"></div><div class="line">    <span class="comment">// Then base</span></div><div class="line">    String base = System.getProperty(Globals.CATALINA_BASE_PROP);</div><div class="line">    </div><div class="line">    <span class="comment">// 可见，如果没有设置base路径，默认就是catalina.home指定的路径</span></div><div class="line">    <span class="keyword">if</span> (base == <span class="keyword">null</span>) &#123;</div><div class="line">        catalinaBaseFile = catalinaHomeFile;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        File baseFile = <span class="keyword">new</span> File(base);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            baseFile = baseFile.getCanonicalFile();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">            baseFile = baseFile.getAbsoluteFile();</div><div class="line">        &#125;</div><div class="line">        catalinaBaseFile = baseFile;</div><div class="line">    &#125;</div><div class="line">    System.setProperty(</div><div class="line">            Globals.CATALINA_BASE_PROP, catalinaBaseFile.getPath());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上可见，主要是设置了一些运行时所需要的路径，例如要设置catalina.home，如果你要运行tomcat源码的话，可以在启动选项的VM options中设置<code>-Dcatalina.home=&quot;/Users/sangjian/dev/source-files/apache-tomcat-8.5.4-src/output/build&quot;</code>来指定。例如：</p>
<img src="/2016/11/26/Tomcat源码：Bootstrap启动流程/B2439EFA-6276-425A-A807-C66B975E59F6.png" alt="B2439EFA-6276-425A-A807-C66B975E59F6.png" title="">
<h2 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Main method and entry point when starting Tomcat via the provided</div><div class="line"> * scripts.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> args Command line arguments to be processed</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//创建Bootstarp类型的对象  </span></div><div class="line">        <span class="comment">// Don't set daemon until init() has completed</span></div><div class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bootstrap.init();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            handleThrowable(t);</div><div class="line">            t.printStackTrace();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        daemon = bootstrap;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// When running as a service the call to stop will be on a new</span></div><div class="line">        <span class="comment">// thread so make sure the correct class loader is used to prevent</span></div><div class="line">        <span class="comment">// a range of class not found exceptions.</span></div><div class="line">        Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String command = <span class="string">"start"</span>;</div><div class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            command = args[args.length - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (command.equals(<span class="string">"startd"</span>)) &#123;</div><div class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"start"</span>;</div><div class="line">            daemon.load(args);</div><div class="line">            daemon.start();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stopd"</span>)) &#123;</div><div class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"stop"</span>;</div><div class="line">            daemon.stop();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</div><div class="line">            daemon.setAwait(<span class="keyword">true</span>);</div><div class="line">            daemon.load(args);</div><div class="line">            daemon.start();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stop"</span>)) &#123;</div><div class="line">            daemon.stopServer(args);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"configtest"</span>)) &#123;</div><div class="line">            daemon.load(args);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span>==daemon.getServer()) &#123;</div><div class="line">                System.exit(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            System.exit(<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            log.warn(<span class="string">"Bootstrap: command \""</span> + command + <span class="string">"\" does not exist."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        <span class="comment">// Unwrap the Exception for clearer error reporting</span></div><div class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</div><div class="line">                t.getCause() != <span class="keyword">null</span>) &#123;</div><div class="line">            t = t.getCause();</div><div class="line">        &#125;</div><div class="line">        handleThrowable(t);</div><div class="line">        t.printStackTrace();</div><div class="line">        System.exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实整个流程很简单，总结如下：</p>
<ol>
<li>创建一个自身对象并调用<code>init</code>方法初始化，赋值给daemon</li>
<li>判断参数，默认是start</li>
<li>执行<code>daemon.load</code>方法，判断参数类型，反射调用<code>org.apache.catalina.startup.Catalina</code>对象的<code>load</code>方法</li>
<li>执行<code>daemon.start</code>方法，反射调用<code>org.apache.catalina.startup.Catalina</code>对象的<code>start</code>方法</li>
</ol>
<h2 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize daemon.</div><div class="line"> * <span class="doctag">@throws</span> Exception Fatal initialization error</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 初始化类加载器</span></div><div class="line">    initClassLoaders();</div><div class="line"></div><div class="line">    <span class="comment">// 设置当前线程的类加载器</span></div><div class="line">    Thread.currentThread().setContextClassLoader(catalinaLoader);</div><div class="line"></div><div class="line">    SecurityClassLoad.securityClassLoad(catalinaLoader);</div><div class="line"></div><div class="line">    <span class="comment">// Load our startup class and call its process() method</span></div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">        log.debug(<span class="string">"Loading startup class"</span>);</div><div class="line">    Class&lt;?&gt; startupClass =</div><div class="line">        catalinaLoader.loadClass</div><div class="line">        (<span class="string">"org.apache.catalina.startup.Catalina"</span>);</div><div class="line">    Object startupInstance = startupClass.newInstance();</div><div class="line"></div><div class="line">    <span class="comment">// Set the shared extensions class loader</span></div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">        log.debug(<span class="string">"Setting startup class properties"</span>);</div><div class="line">    String methodName = <span class="string">"setParentClassLoader"</span>;</div><div class="line">    Class&lt;?&gt; paramTypes[] = <span class="keyword">new</span> Class[<span class="number">1</span>];</div><div class="line">    paramTypes[<span class="number">0</span>] = Class.forName(<span class="string">"java.lang.ClassLoader"</span>);</div><div class="line">    Object paramValues[] = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="comment">/* </span></div><div class="line">     * sharedLoader为加载$CATALINA_HOME/lib目录的类加载器</div><div class="line">     * 其实在Tomcat5之后，并取消了catalinaLoader和sharedLoader，而默认只设置了commonLoader</div><div class="line">     * 在默认配置的情况下，这里使用sharedLoader的来加载class时，还是会通过commonLoader来加载</div><div class="line">     * 因为sharedLoader的parentClassLoader是catalinaLoader，catalinaLoder的parentClassLoader是commonLoader</div><div class="line">     * 但在这里，这3个加载器都是commonLoader这个对象，这个稍后会说到</div><div class="line">     */</div><div class="line">    paramValues[<span class="number">0</span>] = sharedLoader;</div><div class="line">    Method method =</div><div class="line">        startupInstance.getClass().getMethod(methodName, paramTypes);</div><div class="line">    </div><div class="line">    <span class="comment">// 设置org.apache.catalina.startup.Catalina对象的parentClassloader</span></div><div class="line">    method.invoke(startupInstance, paramValues);</div><div class="line"></div><div class="line">    catalinaDaemon = startupInstance;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>init方法主要做了以下几件事：</p>
<ol>
<li>初始化类加载器</li>
<li>设置当前线程的类加载器</li>
<li>创建<code>org.apache.catalina.startup.Catalina</code>对象<code>startupInstance</code></li>
<li>反射调用<code>org.apache.catalina.startup.Catalina</code>对象的<code>setParentClassLoader</code>方法，设置父加载器为<code>sharedLoader</code></li>
<li>将<code>startupInstance</code>赋值给<code>catalinaDaemon</code></li>
</ol>
<h2 id="initClassLoaders和createClassLoader方法"><a href="#initClassLoaders和createClassLoader方法" class="headerlink" title="initClassLoaders和createClassLoader方法"></a>initClassLoaders和createClassLoader方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initClassLoaders</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        commonLoader = createClassLoader(<span class="string">"common"</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span>( commonLoader == <span class="keyword">null</span> ) &#123;</div><div class="line">            <span class="comment">// no config file, default to this loader - we might be in a 'single' env.</span></div><div class="line">            commonLoader=<span class="keyword">this</span>.getClass().getClassLoader();</div><div class="line">        &#125;</div><div class="line">        catalinaLoader = createClassLoader(<span class="string">"server"</span>, commonLoader);</div><div class="line">        sharedLoader = createClassLoader(<span class="string">"shared"</span>, commonLoader);</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        handleThrowable(t);</div><div class="line">        log.error(<span class="string">"Class loader creation threw exception"</span>, t);</div><div class="line">        System.exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> ClassLoader <span class="title">createClassLoader</span><span class="params">(String name, ClassLoader parent)</span></span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    String value = CatalinaProperties.getProperty(name + <span class="string">".loader"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 如果catalina.properties文件中没有值，则返回parent</span></div><div class="line">    <span class="keyword">if</span> ((value == <span class="keyword">null</span>) || (value.equals(<span class="string">""</span>)))</div><div class="line">        <span class="keyword">return</span> parent;</div><div class="line"></div><div class="line">    value = replace(value);</div><div class="line"></div><div class="line">    List&lt;Repository&gt; repositories = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    String[] repositoryPaths = getPaths(value);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (String repository : repositoryPaths) &#123;</div><div class="line">        <span class="comment">// Check for a JAR URL repository</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">            URL url = <span class="keyword">new</span> URL(repository);</div><div class="line">            repositories.add(</div><div class="line">                    <span class="keyword">new</span> Repository(repository, RepositoryType.URL));</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">            <span class="comment">// Ignore</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Local repository</span></div><div class="line">        <span class="keyword">if</span> (repository.endsWith(<span class="string">"*.jar"</span>)) &#123;</div><div class="line">            repository = repository.substring</div><div class="line">                (<span class="number">0</span>, repository.length() - <span class="string">"*.jar"</span>.length());</div><div class="line">            repositories.add(</div><div class="line">                    <span class="keyword">new</span> Repository(repository, RepositoryType.GLOB));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (repository.endsWith(<span class="string">".jar"</span>)) &#123;</div><div class="line">            repositories.add(</div><div class="line">                    <span class="keyword">new</span> Repository(repository, RepositoryType.JAR));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            repositories.add(</div><div class="line">                    <span class="keyword">new</span> Repository(repository, RepositoryType.DIR));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ClassLoaderFactory.createClassLoader(repositories, parent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基于之前介绍的tomcat的类加载器，这两个方法应该比较好理解了，这里需要注意的是，在Tomcat5之后，Tomcat的类加载器发生了变化，默认是没有catalinaLoader和sharedLoader的路径了，这个可以通过查看<code>catalina.properties</code>文件来说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">common.loader=&quot;$&#123;catalina.base&#125;/lib&quot;,&quot;$&#123;catalina.base&#125;/lib/*.jar&quot;,&quot;$&#123;catalina.home&#125;/lib&quot;,&quot;$&#123;catalina.home&#125;/lib/*.jar&quot;</div><div class="line"></div><div class="line">server.loader=</div><div class="line"></div><div class="line">shared.loader=</div></pre></td></tr></table></figure>
<p>可见，默认只设置了commonLoader。从<code>createClassLoader</code>方法可以看出，后两个loader的值是空的，所以commonLoader,catalinaLoader和sharedLoader都是同一个对象。</p>
<h2 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Load daemon.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String[] arguments)</span></span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Call the load() method</span></div><div class="line">    String methodName = <span class="string">"load"</span>;</div><div class="line">    Object param[];</div><div class="line">    Class&lt;?&gt; paramTypes[];</div><div class="line">    <span class="keyword">if</span> (arguments==<span class="keyword">null</span> || arguments.length==<span class="number">0</span>) &#123;</div><div class="line">        paramTypes = <span class="keyword">null</span>;</div><div class="line">        param = <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        paramTypes = <span class="keyword">new</span> Class[<span class="number">1</span>];</div><div class="line">        paramTypes[<span class="number">0</span>] = arguments.getClass();</div><div class="line">        param = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">        param[<span class="number">0</span>] = arguments;</div><div class="line">    &#125;</div><div class="line">    Method method =</div><div class="line">        catalinaDaemon.getClass().getMethod(methodName, paramTypes);</div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">        log.debug(<span class="string">"Calling startup class "</span> + method);</div><div class="line">    method.invoke(catalinaDaemon, param);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这不用多说了吧，还是调用<code>org.apache.catalina.startup.Catalina</code>对象的<code>load</code>方法。</p>
<h2 id="start方法"><a href="#start方法" class="headerlink" title="start方法"></a>start方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Start the Catalina daemon.</div><div class="line"> * <span class="doctag">@throws</span> Exception Fatal start error</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="keyword">if</span>( catalinaDaemon==<span class="keyword">null</span> ) init();</div><div class="line"></div><div class="line">    Method method = catalinaDaemon.getClass().getMethod(<span class="string">"start"</span>, (Class [] )<span class="keyword">null</span>);</div><div class="line">    method.invoke(catalinaDaemon, (Object [])<span class="keyword">null</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更简单是不是？</p>
<p>以上就是Bootstrap类的工作，接下来就是Catalina需要做的事了，所以从这个流程来看，Bootstrap所做的工作还是很简单的。关于Catalina的分析下一篇文章继续吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>http://www.ideabuffer.cn/2016/11/25/test/</url>
      <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><span id="encrypt-message">Welcome to my blog, enter password to read.</span><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19KwF53VIRewcj8x5X0MCRMz5xq9QBGeYEMDxHDoHN1oEIFIhBhhe3qFSSkEgIu/I9M+LXlZNLBtDbGN62WO7c4Awsc/ytPY3A8qPR5dvDzr8UrWvFIRdXT </div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux配置调优：最大打开文件描述符个数]]></title>
      <url>http://www.ideabuffer.cn/2016/11/20/Linux%E9%85%8D%E7%BD%AE%E8%B0%83%E4%BC%98%EF%BC%9A%E6%9C%80%E5%A4%A7%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%AA%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>一般情况下，Linux默认的最大文件描述符数量是1024，对于一般的程序来说1024应该是足够使用的（Nginx、系统进程等）。但是像mysql、java等单进程处理大量请求的应用来说就未必了。如果单个进程打开的文件描述符数量超过了系统定义的值，就会提到“too many files open”的错误提示。</p>
<p>如果想查看当前进程打开了多少个文件，可以执行如下命令查看：</p>
<p><code>lsof -n | awk &#39;{print $2}&#39; | sort | uniq -c | sort -nr | more</code></p>
<p>执行后可以看到，第一列是打开的文件描述符数量，第二列是进程id。</p>
<h2 id="限制级别"><a href="#限制级别" class="headerlink" title="限制级别"></a>限制级别</h2><p>最大文件描述符数的限制可以分为3种：</p>
<ul>
<li>shell级别的限制</li>
<li>用户级别的限制</li>
<li>系统级别的限制</li>
</ul>
<a id="more"></a>
<h3 id="shell级别的限制"><a href="#shell级别的限制" class="headerlink" title="shell级别的限制"></a>shell级别的限制</h3><p>如果在shell中执行<code>ulimit -n 4096</code>后，表示将当前用户所有进程能打开的最大文件数量设置为4096.但只是在当前shell中有效，退出后再登录则又恢复成之前的限制。</p>
<h3 id="用户级别的限制"><a href="#用户级别的限制" class="headerlink" title="用户级别的限制"></a>用户级别的限制</h3><p>用户级别的限制是针对具体的用户，一个用户可以通过多个shell打开，这里不针对每一个shell限制。</p>
<h3 id="系统级别的限制"><a href="#系统级别的限制" class="headerlink" title="系统级别的限制"></a>系统级别的限制</h3><p>这一级别的限制是对整个系统的所有用户的限制，可以执行<code>cat /proc/sys/fs/file-max</code>来查看。</p>
<h2 id="ulimit命令"><a href="#ulimit命令" class="headerlink" title="ulimit命令"></a>ulimit命令</h2><h3 id="ulimit功能介绍"><a href="#ulimit功能介绍" class="headerlink" title="ulimit功能介绍"></a>ulimit功能介绍</h3><p>考虑一下如下情况：</p>
<p>一台Linux主机上同时通过ssh登录了20个人，如果在系统资源无限制的情况下，这20个人同时打开了100个文档，并且每个文档的大小大概有20M，这时系统的内存资源就会力不从心了。</p>
<p>ulimit用于限制shell启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、shell进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU时间、单个用户的最大线程数、shell进程所能使用的最大虚拟内存。同时，它支持对资源的硬限制和软限制。</p>
<p>ulimit可以作用于用户登录的当前shell会话，是一种临时限制。在会话终止时便结束限制，在shell中执行该命令不会影响其他shell会话。</p>
<p>如果想要使限制永久生效，则需要设置<code>/etc/security/limits.conf</code>文件，这个文件稍后会讲到。</p>
<h3 id="ulimit的使用说明"><a href="#ulimit的使用说明" class="headerlink" title="ulimit的使用说明"></a>ulimit的使用说明</h3><p>执行<code>help ulimit</code>命令可以查看一下该命令的使用说明：</p>
<img src="/2016/11/20/Linux配置调优：最大打开文件描述符个数/2016-11-20%201.18.23.png" alt="2016-11-20 1.18.23.png" title="">
<h3 id="ulimit限制最大打开文件描述符个数"><a href="#ulimit限制最大打开文件描述符个数" class="headerlink" title="ulimit限制最大打开文件描述符个数"></a>ulimit限制最大打开文件描述符个数</h3><p>由上可知，如果要限制最大打开文件描述符的个数可以执行以下命令：</p>
<p><code>ulimit -n 1000</code></p>
<p>该命令表示将最大打开文件描述符的个数限制为1000（只在当前shell中有效）。</p>
<p>这里需要注意的地方是，linux资源限制的方式可分为<em>软限制</em>和<em>硬限制</em>。</p>
<p>从<code>ulimit</code>的使用说明来看，<code>ulimit</code>的参数已经包含了软限制和硬限制，<code>-H</code>代表硬限制，<code>-S</code>代表软限制。</p>
<p>例如，执行<code>ulimit -Hn 1000</code>表示将硬限制设置为1000，同样<code>ulimit -Sn 1000</code>表示将软限制设置为1000，如果不指定<code>-H</code>或是<code>-S</code>，则相当于把软限制和硬限制都设置为1000。</p>
<p>它们之间的关系是：</p>
<ul>
<li>软限制起实际限制作用，但不能超过硬限制（除非有root权限）。</li>
<li>普通用户可以在硬限制范围内，更改自己的软限制</li>
<li>普通用户都可以缩小硬限制,但不能扩大硬限制，而root缩小扩大都可以。</li>
</ul>
<p>下面通过几个例子来说明<code>ulimit</code>命令的使用。</p>
<h3 id="ulimit-n的使用"><a href="#ulimit-n的使用" class="headerlink" title="ulimit -n的使用"></a><code>ulimit -n</code>的使用</h3><p>如果你没有配置过，则默认的限制为1024</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -n</div><div class="line">1024</div></pre></td></tr></table></figure>
<p>将限制设置为2048</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -n 2048</div></pre></td></tr></table></figure>
<p>查看软限制和硬限制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -Sn</div><div class="line">2048</div><div class="line">[root@localhost ~]# ulimit -Hn</div><div class="line">2048</div></pre></td></tr></table></figure>
<p>对于root用户，可以将增加硬限制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -n 2049</div><div class="line">[root@localhost ~]#</div></pre></td></tr></table></figure>
<p>对于普通用户，通过<code>ulimit -n</code>来查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -n</div><div class="line">1024</div></pre></td></tr></table></figure>
<p>将限制改为1023，执行成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -n 1023</div><div class="line">[sangjian@localhost ~]$</div></pre></td></tr></table></figure>
<p>将限制改为1025，执行失败</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -n 1025</div><div class="line">-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作</div></pre></td></tr></table></figure>
<p>可见，普通用户只能缩小限制，而不能扩大限制。</p>
<p>刚才说到执行<code>ulimit -n</code>是同时对软限制和硬限制都生效的，现在将软限制改为1000，执行成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -Sn 1000</div><div class="line">[sangjian@localhost ~]$</div></pre></td></tr></table></figure>
<p>将软限制改为1024，执行失败，因为硬限制的值为1023</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ulimit -Sn 1024</div><div class="line">-bash: ulimit: open files: 无法修改 limit 值: 无效的参数</div></pre></td></tr></table></figure>
<h2 id="修改最大文件限制数量的方式"><a href="#修改最大文件限制数量的方式" class="headerlink" title="修改最大文件限制数量的方式"></a>修改最大文件限制数量的方式</h2><ul>
<li>通过<code>ulimit -n</code>修改</li>
<li>通过<code>/etc/security/limits.conf</code>文件来修改</li>
<li>通过<code>/proc/sys/fs/file-max</code>文件来修改</li>
</ul>
<h2 id="etc-security-limits-conf"><a href="#etc-security-limits-conf" class="headerlink" title="/etc/security/limits.conf"></a>/etc/security/limits.conf</h2><p>limits.conf文件实际是Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 pam_limits.so 的配置文件，突破系统的默认限制，对系统访问资源有一定保护作用。 limits.conf 和sysctl.conf区别在于limits.conf是针对用户，而sysctl.conf是针对整个系统参数配置。</p>
<p>limits.conf的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username|@groupname type resource limit</div></pre></td></tr></table></figure>
<p><em>username|@groupname</em>：设置需要被限制的用户名，组名前面加@和用户名区别。也可以用通配符*来做所有用户的限制。</p>
<p><em>type</em>：有 soft，hard 和 -，soft 指的是当前系统生效的设置值。hard 表明系统中所能设定的最大值。soft 的限制不能比har 限制高。用 - 就表明同时设置了 soft 和 hard 的值。</p>
<p><em>resource</em>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">　　core			- 限制内核文件的大小</div><div class="line">　　date 			- 最大数据大小</div><div class="line">　　fsize 		- 最大文件大小</div><div class="line">　　memlock 		- 最大锁定内存地址空间</div><div class="line">　　nofile 		- 打开文件的最大数目</div><div class="line">　　rss 			- 最大持久设置大小</div><div class="line">　　stack 		- 最大栈大小</div><div class="line">　　cpu 			- 以分钟为单位的最多 CPU 时间</div><div class="line">　　noproc 		- 进程的最大数目</div><div class="line">　　as 			- 地址空间限制</div><div class="line">　　maxlogins 	- 此用户允许登录的最大数目</div><div class="line">　　maxsyslogins	- 系统所有登录的最大数量</div></pre></td></tr></table></figure>
<p>例如，如果想把最大文件描述符数设置为4096，且对所有用户生效，则在该文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* soft nofile 4096</div><div class="line">* hard nofile 4096</div></pre></td></tr></table></figure>
<h2 id="proc-sys-fs-file-max"><a href="#proc-sys-fs-file-max" class="headerlink" title="/proc/sys/fs/file-max"></a>/proc/sys/fs/file-max</h2><p>该文件是系统级别的限制，可以查看该文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /proc/sys/fs/file-max</div><div class="line">185983</div></pre></td></tr></table></figure>
<p>可以看到，系统级别的最大文件描述符数是185983，该限制是对整个系统的所有用户生效。但是不是就不可以设置更大的限制数量呢？答案是否定的。对于root来说，可以设置大于这个数量的限制，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ulimit -n 185984</div><div class="line">[root@localhost ~]#</div></pre></td></tr></table></figure>
<p>发现执行成功了，说明root是可以修改为更大的限制数量的。</p>
<p>其实，/proc/sys/fs/file-max是系统给出的建议值，系统会计算资源给出一个和合理值，一般跟内存有关系，内存越大，改值越大，但是仅仅是一个建议值，limits.conf的设定完全可以超过/proc/sys/fs/file-max。通过limits.conf文件来配置也是可以的。</p>
<h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><h3 id="ulimit-n设置的是当前用户单个进程能够打开的文件描述符个数还是所有进程的文件描述符个数？"><a href="#ulimit-n设置的是当前用户单个进程能够打开的文件描述符个数还是所有进程的文件描述符个数？" class="headerlink" title="ulimit -n设置的是当前用户单个进程能够打开的文件描述符个数还是所有进程的文件描述符个数？"></a><code>ulimit -n</code>设置的是当前用户单个进程能够打开的文件描述符个数还是所有进程的文件描述符个数？</h3><p>对于第一点，网上这两种说法都有，具体我也做了一些试验，例如，当用<code>vim</code>查看一个文件时，通过另一个shell登录后，查看vim进程的pid：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ps -ef | grep vim</div><div class="line">sangjian  6099  6036  0 23:39 pts/0    00:00:00 vim test.sh</div><div class="line">sangjian  6101  5986  0 23:39 pts/3    00:00:00 grep --color=auto vim</div></pre></td></tr></table></figure>
<p>可知，pid是6099，查看<code>/proc/6099/fd</code>中的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[sangjian@localhost ~]$ ll /proc/6099/fd</div><div class="line">总用量 0</div><div class="line">lrwx------. 1 sangjian sangjian 64 11月 19 23:41 0 -&gt; /dev/pts/0</div><div class="line">lrwx------. 1 sangjian sangjian 64 11月 19 23:41 1 -&gt; /dev/pts/0</div><div class="line">lrwx------. 1 sangjian sangjian 64 11月 19 23:39 2 -&gt; /dev/pts/0</div><div class="line">lrwx------. 1 sangjian sangjian 64 11月 19 23:41 4 -&gt; /home/sangjian/.test.sh.swp</div></pre></td></tr></table></figure>
<p>每个进程的信息都会在/proc目录中保存，fd目录为打开的文件描述符，可以看到当前打开了4个文件描述符。</p>
<p>修改<code>/etc/security/limits.conf</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sangjian soft nofile 20</div><div class="line">sangjian hard nofile 20</div></pre></td></tr></table></figure>
<p>将<code>sangjian</code>这个用户的最大打开文件描述符个数设置为20，因为设置太小的话shell登录都不成功。然后新开了6个shell以<code>sangjian</code>这个用户来登录，并且每个都用<code>vim</code>打开一个文件，结果是都可以打开，这也就是说使用<code>ulimit -n</code>限制的是每个进程最大打开文件描述符的数量。</p>
<h3 id="lsof-p-pid查看的结果是否都是该进程打开的文件描述符？"><a href="#lsof-p-pid查看的结果是否都是该进程打开的文件描述符？" class="headerlink" title="lsof -p pid查看的结果是否都是该进程打开的文件描述符？"></a><code>lsof -p pid</code>查看的结果是否都是该进程打开的文件描述符？</h3><p>不都是。</p>
<p><code>lsof</code>命令列出的是一个进程及其子进程与哪些文件有关联。</p>
<p><em>请注意</em>：关联文件和打开文件描述符是不同的，关联文件的数量可能远远大于打开的文件描述符的数量。</p>
<p>比如刚刚查看的vim命令执行后，在<code>/proc</code>目录下查看了打开的文件描述符是4个，那么我们再通过<code>lsof</code>来看一下：</p>
<img src="/2016/11/20/Linux配置调优：最大打开文件描述符个数/2016-11-20%2012.50.44.png" alt="2016-11-20 12.50.44.png" title="">
<p>可以看到，这个数量已经远远大于4了，这是为什么呢？</p>
<p>google找了一些资料，大概原因是<code>lsof</code>会列出系统中所占用的资源,但是这些资源不一定会占用打开的文件描述符(比如共享内存,信号量,消息队列,内存映射等，虽然占用了这些资源但不占用打开文件号)，因此有可能出现<code>cat /proc/sys/fs/file-max</code>的值小于<code>lsof | wc -l</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx配置：虚拟主机（1）]]></title>
      <url>http://www.ideabuffer.cn/2016/11/12/Nginx%E9%85%8D%E7%BD%AE%EF%BC%9A%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="什么是虚拟主机"><a href="#什么是虚拟主机" class="headerlink" title="什么是虚拟主机"></a>什么是虚拟主机</h2><p>虚拟主机使用的是特殊的软硬件技术，它把一台运行在因特网上的服务器主机分成一台台“虚拟”的主机，每<br>台虚拟主机都可以是一个独立的网站，可以具有独立的域名，具有完整的Intemet服务器功能（WWW、FTP、Email等），同一台主机上的虚拟主机之间是完全独立的。从网站访问者来看，每一台虚拟主机和一台独立的主机完全一样。</p>
<p>利用虚拟主机，不用为每个要运行的网站提供一台单独的Nginx服务器或单独运行一组Nginx进程。虚拟主机提供了在同一台服务器、同一组Nginx进程上运行多个网站的功能。</p>
<p>在Nginx下，一个server标签就是一个虚拟主机，有一下3种：</p>
<ul>
<li>基于域名的虚拟主机，通过域名来区分虚拟主机</li>
<li>基于端口的虚拟主机，通过端口来区分虚拟主机</li>
<li>基于IP的虚拟主机，通过IP地址来区分虚拟主机</li>
</ul>
<a id="more"></a>
<h2 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h2><p>该虚拟主机主要应用在外部网站，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">   listen 80;</div><div class="line">   server_name www.abc.com;</div><div class="line">   index index.html;</div><div class="line">   ...</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">   listen 80;</div><div class="line">   server_name blog.abc.com;</div><div class="line">   index index.html;</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h2><p>该虚拟主机主要应用在公司的内部网站或者网站的后台，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 8080;</div><div class="line">    server_name www.abc.com;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 8011;</div><div class="line">    server_name blog.abc.com;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于IP的虚拟主机"><a href="#基于IP的虚拟主机" class="headerlink" title="基于IP的虚拟主机"></a>基于IP的虚拟主机</h2><p>配置该虚拟主机主要是用来通过IP进行访问，一般配置多个IP。配置基于IP的虚拟主机，就是为Nginx服务器提供的每台虚拟主机配置一个不同的IP，所以需要将网卡设置为同时能够监听多个IP地址。</p>
<p>Linux支持IP别名的添加，可以使用<code>ifconfig</code>命令来为同一块网卡添加多个IP别名。</p>
<p>例如，我当前的网络配置如下：</p>
<img src="/2016/11/12/Nginx配置：虚拟主机（1）/2016-11-12%204.14.33.png" alt="2016-11-12 4.14.33.png" title="">
<p>可见，我当前的网卡为enp0s3，ip为192.168.1.125.</p>
<p>接下来需要为enp0s3添加两个IP别名：192.168.1.30和192.168.1.31，作为Nginx基于IP的虚拟主机的IP地址，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ifconfig enp0s3:0 192.168.1.30 netmask 255.255.255.0 up</div><div class="line">sudo ifconfig enp0s3:1 192.168.1.31 netmask 255.255.255.0 up</div></pre></td></tr></table></figure>
<p>命令中up表示立即启用该别名。</p>
<p>这时再次查看一下网络配置：</p>
<img src="/2016/11/12/Nginx配置：虚拟主机（1）/2016-11-12%204.22.15.png" alt="2016-11-12 4.22.15.png" title="">
<p>可以看到，enp0s3增加了两个别名，enp0s3:0和enp0s3:1，IP分别为192.168.1.30,192.168.1.31。</p>
<p><em>注意：</em></p>
<ul>
<li><p>如果你使用Centos7最小化安装会提示找不到<code>ifconfig</code>命令，这是需要安装net-tools:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum -y install net-tools</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>按照如上方法为enp0s3设置的别名在重启后将会失效，需要重新设置。如果需要永久生效的话可以执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo <span class="built_in">echo</span> <span class="string">"ifconfig enp0s3:0 192.168.1.30 netmask 255.255.255.0 up"</span> &gt;&gt; /etc/rc.local</div><div class="line">sudo <span class="built_in">echo</span> <span class="string">"ifconfig enp0s3:1 192.168.1.31 netmask 255.255.255.0 up"</span> &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure>
</li>
</ul>
<p>设置好别名之后就可以使用IP地址来配置Nginx的虚拟主机了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name 192.168.1.30;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name 192.168.1.31;</div><div class="line">    ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过以上配置后，来自192.168.1.30的请求将由第一个虚拟主机接收和处理，来自192.168.1.31的请求将由第二个虚拟主机接收和处理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决mysql5.6占用内存过大]]></title>
      <url>http://www.ideabuffer.cn/2016/10/27/%E8%A7%A3%E5%86%B3mysql5-6%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E8%BF%87%E5%A4%A7/</url>
      <content type="html"><![CDATA[<p>虚拟机的内存设置成了1G，跑了两个tomcat和rabbitmq以及redis,mysql启动失败。再次启动有时会成功，但过一会看进程又没有了。</p>
<p>使用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure></p>
<p>后提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR! MySQL server PID file could not be found!</div><div class="line">Starting MySQL..................................... ERROR! The server quit without updating PID file (/opt/mysql/data/localhost.localdomain.pid).</div></pre></td></tr></table></figure></p>
<p>查看mysql配置文件<code>/etc/my.cnf</code>，查看错误日志文件，是内存太小了的原因。</p>
<a id="more"></a>
<p>调整my.cnf 参数,重新配置即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">performance_schema_max_table_instances=200</div><div class="line">table_definition_cache=200</div><div class="line">table_open_cache=128</div></pre></td></tr></table></figure>
<p>下面附一个相关的my.cnf配置文件的说明<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">port = 3306</div><div class="line">socket = /tmp/mysql.sock</div><div class="line"> </div><div class="line">[mysqld]</div><div class="line">port = 3306</div><div class="line">socket = /tmp/mysql.sock</div><div class="line"> </div><div class="line">basedir = /usr/local/mysql</div><div class="line">datadir = /data/mysql</div><div class="line">pid-file = /data/mysql/mysql.pid</div><div class="line">user = mysql</div><div class="line">bind-address = 0.0.0.0</div><div class="line">server-id = 1 #表示是本机的序号为1,一般来讲就是master的意思</div><div class="line"> </div><div class="line">skip-name-resolve</div><div class="line"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，</div><div class="line"># 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求</div><div class="line"> </div><div class="line">#skip-networking</div><div class="line"> </div><div class="line">back_log = 600</div><div class="line"># MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，</div><div class="line"># 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。</div><div class="line"># 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，</div><div class="line"># 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。</div><div class="line"># 另外，这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小。</div><div class="line"># 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。</div><div class="line"> </div><div class="line">max_connections = 1000</div><div class="line"># MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过'conn%'通配符查看当前状态的连接数量，以定夺该值的大小。</div><div class="line"> </div><div class="line">max_connect_errors = 6000</div><div class="line"># 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。</div><div class="line"> </div><div class="line">open_files_limit = 65535</div><div class="line"># MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，</div><div class="line"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</div><div class="line"> </div><div class="line">table_open_cache = 128</div><div class="line"># MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64</div><div class="line"># 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；</div><div class="line"># 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</div><div class="line"> </div><div class="line">max_allowed_packet = 4M</div><div class="line"># 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。</div><div class="line"># 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。</div><div class="line"> </div><div class="line">binlog_cache_size = 1M</div><div class="line"># 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K</div><div class="line"> </div><div class="line">max_heap_table_size = 8M</div><div class="line"># 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变</div><div class="line"> </div><div class="line">tmp_table_size = 16M</div><div class="line"># MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。</div><div class="line"># 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。</div><div class="line"># 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果</div><div class="line"> </div><div class="line">read_buffer_size = 2M</div><div class="line"># MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。</div><div class="line"># 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能</div><div class="line"> </div><div class="line">read_rnd_buffer_size = 8M</div><div class="line"># MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，</div><div class="line"># MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大</div><div class="line"> </div><div class="line">sort_buffer_size = 8M</div><div class="line"># MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。</div><div class="line"># 如果不能，可以尝试增加sort_buffer_size变量的大小</div><div class="line"> </div><div class="line">join_buffer_size = 8M</div><div class="line"># 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享</div><div class="line"> </div><div class="line">thread_cache_size = 8</div><div class="line"># 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，</div><div class="line"># 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，</div><div class="line"># 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)</div><div class="line"># 根据物理内存设置规则如下：</div><div class="line"># 1G  —&gt; 8</div><div class="line"># 2G  —&gt; 16</div><div class="line"># 3G  —&gt; 32</div><div class="line"># 大于3G  —&gt; 64</div><div class="line"> </div><div class="line">query_cache_size = 8M</div><div class="line">#MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，</div><div class="line"># 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。</div><div class="line"># 通过检查状态值'Qcache_%'，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，</div><div class="line"># 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，</div><div class="line"># 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲</div><div class="line"> </div><div class="line">query_cache_limit = 2M</div><div class="line">#指定单个查询能够使用的缓冲区大小，默认1M</div><div class="line"> </div><div class="line">key_buffer_size = 4M</div><div class="line">#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，</div><div class="line"># 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，</div><div class="line"># 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，</div><div class="line"># 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE 'key_read%'获得)。注意：该参数值设置的过大反而会是服务器整体效率降低</div><div class="line"> </div><div class="line">ft_min_word_len = 4</div><div class="line"># 分词词汇最小长度，默认4</div><div class="line"> </div><div class="line">transaction_isolation = REPEATABLE-READ</div><div class="line"># MySQL支持4种事务隔离级别，他们分别是：</div><div class="line"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.</div><div class="line"># 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED</div><div class="line"> </div><div class="line">log_bin = mysql-bin</div><div class="line">binlog_format = mixed</div><div class="line">expire_logs_days = 30 #超过30天的binlog删除</div><div class="line"> </div><div class="line">log_error = /data/mysql/mysql-error.log #错误日志路径</div><div class="line">slow_query_log = 1</div><div class="line">long_query_time = 1 #慢查询时间 超过1秒则为慢查询</div><div class="line">slow_query_log_file = /data/mysql/mysql-slow.log</div><div class="line"> </div><div class="line">performance_schema = 0</div><div class="line">explicit_defaults_for_timestamp</div><div class="line"> </div><div class="line">#lower_case_table_names = 1 #不区分大小写</div><div class="line"> </div><div class="line">skip-external-locking #MySQL选项以避免外部锁定。该选项默认开启</div><div class="line"> </div><div class="line">default-storage-engine = InnoDB #默认存储引擎</div><div class="line"> </div><div class="line">innodb_file_per_table = 1</div><div class="line"># InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间</div><div class="line"># 独立表空间优点：</div><div class="line"># 1．每个表都有自已独立的表空间。</div><div class="line"># 2．每个表的数据和索引都会存在自已的表空间中。</div><div class="line"># 3．可以实现单表在不同的数据库中移动。</div><div class="line"># 4．空间可以回收（除drop table操作处，表空不能自已回收）</div><div class="line"># 缺点：</div><div class="line"># 单表增加过大，如超过100G</div><div class="line"># 结论：</div><div class="line"># 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files</div><div class="line"> </div><div class="line">innodb_open_files = 500</div><div class="line"># 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</div><div class="line"> </div><div class="line">innodb_buffer_pool_size = 64M</div><div class="line"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.</div><div class="line"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.</div><div class="line"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</div><div class="line"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</div><div class="line"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</div><div class="line"># 所以不要设置的太高.</div><div class="line"> </div><div class="line">innodb_write_io_threads = 4</div><div class="line">innodb_read_io_threads = 4</div><div class="line"># innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4</div><div class="line"># 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</div><div class="line"> </div><div class="line">innodb_thread_concurrency = 0</div><div class="line"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量</div><div class="line"> </div><div class="line">innodb_purge_threads = 1</div><div class="line"># InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。</div><div class="line"># 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单</div><div class="line"># 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1</div><div class="line"> </div><div class="line">innodb_flush_log_at_trx_commit = 2</div><div class="line"># 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。</div><div class="line"># 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1</div><div class="line"># 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。</div><div class="line"># 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。</div><div class="line"># 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘</div><div class="line"># 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。</div><div class="line"># 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。</div><div class="line"># 总结</div><div class="line"># 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能</div><div class="line"> </div><div class="line">innodb_log_buffer_size = 2M</div><div class="line"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</div><div class="line"> </div><div class="line">innodb_log_file_size = 32M</div><div class="line"># 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</div><div class="line"> </div><div class="line">innodb_log_files_in_group = 3</div><div class="line"># 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</div><div class="line"> </div><div class="line">innodb_max_dirty_pages_pct = 90</div><div class="line"># innodb主线程刷新缓存池中的数据，使脏数据比例小于90%</div><div class="line"> </div><div class="line">innodb_lock_wait_timeout = 120 </div><div class="line"># InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒</div><div class="line"> </div><div class="line">bulk_insert_buffer_size = 8M</div><div class="line"># 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。</div><div class="line"> </div><div class="line">myisam_sort_buffer_size = 8M</div><div class="line"># MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区</div><div class="line"> </div><div class="line">myisam_max_sort_file_size = 10G</div><div class="line"># 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出</div><div class="line"> </div><div class="line">myisam_repair_threads = 1</div><div class="line"># 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内)  </div><div class="line"> </div><div class="line">interactive_timeout = 28800</div><div class="line"># 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）</div><div class="line"> </div><div class="line">wait_timeout = 28800</div><div class="line"># 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，</div><div class="line"># 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）</div><div class="line"># MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，</div><div class="line"># 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，</div><div class="line"># 最终肯定会达到MySQL Server的连接上限数，这会报'too many connections'的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。</div><div class="line"># 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，</div><div class="line"># 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。</div><div class="line"> </div><div class="line">[mysqldump]</div><div class="line">quick</div><div class="line">max_allowed_packet = 16M #服务器发送和接受的最大包长度</div><div class="line"> </div><div class="line">[myisamchk]</div><div class="line">key_buffer_size = 8M</div><div class="line">sort_buffer_size = 8M</div><div class="line">read_buffer = 4M</div><div class="line">write_buffer = 4M</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat 8 介绍]]></title>
      <url>http://www.ideabuffer.cn/2016/09/01/Tomcat-8-%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="Apache-Tomcat-版本介绍"><a href="#Apache-Tomcat-版本介绍" class="headerlink" title="Apache Tomcat 版本介绍"></a>Apache Tomcat 版本介绍</h2><p>Tomcat是一个开源的软件，其实现了Java Servlet, JavaServer Pages, Java Expression Language 以及 Java WebSocket 技术。Java Servlet, JavaServer Pages, Java Expression Language 以及 Java WebSocket 规范是在 <a href="http://www.jcp.org" target="_blank" rel="external">Java Community Process</a> 下开发出来的。</p>
<p>不同版本的Apache Tomcat实现了不同版本的Servlet和JSP规范。它们之间的对应关系如下：</p>
<img src="/2016/09/01/Tomcat-8-介绍/QQ20160901-0-2x.png" alt="QQ20160901-0-2x.png" title="">
<p>当选举一个发布版本时，如果审阅者认为次发布版本已经达到稳定水平，则会选取此版本为稳定版。新的主要版本最初的发布通常从Alpha版本开始,然后经历beta版，最后到稳定版，这通常要经历几个月的时间。不过，稳定版的条件是Java规范的实现都已经完成。也就是说，在所有其他方面被认为是稳定的，但如果规范的实现不是最终的，可能仍然被标记为Beta版。</p>
<p><strong>Alpha</strong>  由于规范的要求和/或一些显著的bug的原因，可能含有大量的未经测试或者缺少的功能，并且预计不会在任何时间内稳定地运行。</p>
<p><strong>Beta</strong> 可能含有一些未经测试的功能和/或一些相对较小的错误。Beta版预计不会稳定地运行。</p>
<p><strong>Stable</strong> 可能包含少量相对较小的错误。稳定版本可以用于进行生产环境使用，预计可以长时间稳定地运行。</p>
<a id="more"></a>
<p>参考：<a href="http://tomcat.apache.org/whichversion.html" target="_blank" rel="external">Apache Tomcat Versions</a></p>
<h2 id="Tomcat-8-0-x-版本"><a href="#Tomcat-8-0-x-版本" class="headerlink" title="Tomcat 8.0.x 版本"></a>Tomcat 8.0.x 版本</h2><p>Tomcat 8.0.x最新的版本是Tomcat 8.0.36。该系列同样实现了 Servlet 3.1, JSP 2.3, EL 3.0 and Web Socket 1.0 规范。该系列版本的新特性有：</p>
<ul>
<li><p>对资源进行了重构，合并了Aliases，VirtualLoader，VirtualDirContext，JAR资源和外部仓库，现在都以单个的、一致的方法进行配置。</p>
</li>
<li><p>新增了当Tomcat未运行时对war包修改的检测。Tomcat会在解压后的目录中创建一个META-INF/war-tracker文件，设置该文件的最后修改时间为war包的最后修改时间。如果Tomcat通过这种机制检测到修改过的war包则会重新部署该web应用（也就是说之前的解压目录会被删除，修改过的war包会重新解压到当前目录）。</p>
</li>
<li><p>新增了支持并行加载的web应用程序的类加载器<code>ParallelWebappClassLoader</code>的实现。</p>
</li>
<li><p><del>实验支持[SPDY] [1]</del>。</p>
</li>
<li><p>连接器默认使用无阻塞I/O。现在HTTP和AJP的连接器默认的都是无阻塞的I/O。</p>
</li>
<li><p>修改了连接器的默认URIEncoding，将之前的ISO-8859-1修改为UTF-8。</p>
</li>
</ul>
<blockquote>
<p><em>SPDY协议是Google提出的基于传输控制协议(TCP)的应用层协议，通过压缩、多路复用和优先级来缩短加载时间。该协议是一种更加快速的内容传输协议。该功能在 Tomcat 8.0.22 版本被删除</em></p>
</blockquote>
<p>参考：<a href="http://tomcat.apache.org/tomcat-8.0-doc/changelog.html" target="_blank" rel="external">Tomcat 8.0.x Changelog</a></p>
<h2 id="Tomcat-8-5-x-版本"><a href="#Tomcat-8-5-x-版本" class="headerlink" title="Tomcat 8.5.x 版本"></a>Tomcat 8.5.x 版本</h2><p>Tomcat 8.5.4于2016年7月12日发布，这个版本的分支来自Tomcat9.0.0.M4。主要的目的是恢复Java 7的兼容性，并支持Servlet3.1，JSP2.3，EL3.0，WebSocket1.1以及1.1 JASPIC规范。</p>
<blockquote>
<p><em>The Tomcat 8.5.x branch was created from the Tomcat 9.0.0.M4 tag. Changes were applied to restore Java 7 compatibility and to align the specification APIs with Servlet 3.1, JSP 2.3, EL 3.0, WebSocket 1.1 and JASPIC 1.1.</em></p>
</blockquote>
<p>该系列版本的主要新特性有：</p>
<ul>
<li><p>新增了 <code>org.apache.catalina.servlet4preview</code> 包，作用是可以尽早地获取Servlet 4.0 的新特性（需要注意的是，这个包Tomcat 9.x将不会出现）。</p>
</li>
<li><p>新增了对 JASPIC (JSR-196) 的支持。</p>
</li>
<li><p>新增了对 HTTP/2 支持。</p>
</li>
<li><p>新增了动态添加 TLS 虚拟主机的功能。</p>
</li>
</ul>
<p>参考：<a href="http://tomcat.apache.org/tomcat-8.5-doc/changelog.html" target="_blank" rel="external">Tomcat 8.5.x Changelog</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux/Centos7设置nginx开机自启动]]></title>
      <url>http://www.ideabuffer.cn/2016/08/26/Linux-Centos7%E8%AE%BE%E7%BD%AEnginx%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h2 id="新增shell脚本-vi-etc-rc-d-init-d-nginx"><a href="#新增shell脚本-vi-etc-rc-d-init-d-nginx" class="headerlink" title="新增shell脚本 vi /etc/rc.d/init.d/nginx"></a>新增shell脚本 vi /etc/rc.d/init.d/nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="comment"># chkconfig: 35 85 15  </span></div><div class="line"><span class="comment"># description: Nginx is an HTTP(S) server, HTTP(S) reverse</span></div><div class="line"><span class="built_in">set</span> <span class="_">-e</span></div><div class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</div><div class="line">DESC=<span class="string">"nginx daemon"</span>  </div><div class="line">NAME=nginx  </div><div class="line">DAEMON=/usr/<span class="built_in">local</span>/nginx/sbin/<span class="variable">$NAME</span>  </div><div class="line">SCRIPTNAME=/etc/init.d/<span class="variable">$NAME</span>  </div><div class="line"><span class="built_in">test</span> -x <span class="variable">$DAEMON</span> || <span class="built_in">exit</span> 0  </div><div class="line"><span class="function"><span class="title">d_start</span></span>()&#123;  </div><div class="line">   <span class="variable">$DAEMON</span> || <span class="built_in">echo</span> -n <span class="string">" already running"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">d_stop</span></span>() &#123;  </div><div class="line">   <span class="variable">$DAEMON</span> <span class="_">-s</span> quit || <span class="built_in">echo</span> -n <span class="string">" not running"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">d_reload</span></span>() &#123;  </div><div class="line">   <span class="variable">$DAEMON</span> <span class="_">-s</span> reload || <span class="built_in">echo</span> -n <span class="string">" counld not reload"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>  </div><div class="line">  start)  </div><div class="line">     <span class="built_in">echo</span> -n <span class="string">"Starting <span class="variable">$DESC</span>:<span class="variable">$NAME</span>"</span></div><div class="line">     d_start</div><div class="line">     <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">  ;;</div><div class="line">  stop)  </div><div class="line">     <span class="built_in">echo</span> -n <span class="string">"Stopping <span class="variable">$DESC</span>:<span class="variable">$NAME</span>"</span></div><div class="line">     d_stop</div><div class="line">     <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">  ;;</div><div class="line">  reload)  </div><div class="line">     <span class="built_in">echo</span> -n <span class="string">"Reloading <span class="variable">$DESC</span> configuration..."</span></div><div class="line">     d_reload</div><div class="line">     <span class="built_in">echo</span> <span class="string">"reloaded."</span></div><div class="line">  ;;</div><div class="line">  restart)  </div><div class="line">     <span class="built_in">echo</span> -n <span class="string">"Restarting <span class="variable">$DESC</span>: <span class="variable">$NAME</span>"</span></div><div class="line">     d_stop</div><div class="line">     sleep 2</div><div class="line">     d_start</div><div class="line">     <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">  ;;</div><div class="line">  *)</div><div class="line">     <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$SCRIPTNAME</span> &#123;start|stop|restart|reload&#125;"</span> &gt;&amp;2</div><div class="line">     <span class="built_in">exit</span> 3</div><div class="line">  ;;</div><div class="line"><span class="keyword">esac</span>  </div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="设置可执行权限"><a href="#设置可执行权限" class="headerlink" title="设置可执行权限"></a>设置可执行权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /etc/rc.d/init.d/nginx</div></pre></td></tr></table></figure>
<h2 id="添加系统服务"><a href="#添加系统服务" class="headerlink" title="添加系统服务"></a>添加系统服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --add nginx</div></pre></td></tr></table></figure>
<h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --level 35 nginx on</div></pre></td></tr></table></figure>
<hr>
<p>原文链接: <a href="http://my.oschina.net/tomener/blog/664469" target="_blank" rel="external">http://my.oschina.net/tomener/blog/664469</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS7服务器初步配置]]></title>
      <url>http://www.ideabuffer.cn/2016/08/01/CentOS7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>在开发或者部署网站的时候，需要自己配置Linux服务器，本文以Centos7为例，记录了配置Linux服务器的初步流程</p>
<h2 id="第一步：root用户登录"><a href="#第一步：root用户登录" class="headerlink" title="第一步：root用户登录"></a>第一步：root用户登录</h2><p>使用root用户登录远程主机（假定IP地址为192.168.1.125）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.125</div></pre></td></tr></table></figure>
<p>这时，会出现警告，提示这是一个新的地址，存在安全风险。接收则输入yes</p>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---10-30-13.png" alt="-----2016-08-22---10-30-13.png" title="">
<a id="more"></a>
<p>登录远程主机之后修改root密码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd</div></pre></td></tr></table></figure>
<h2 id="第二步：新建用户"><a href="#第二步：新建用户" class="headerlink" title="第二步：新建用户"></a>第二步：新建用户</h2><p>添加一个用户组admin</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groupadd admin</div></pre></td></tr></table></figure>
<p>然后，添加一个新的用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd <span class="_">-d</span> /home/sangjian <span class="_">-s</span> /bin/bash -m sangjian</div></pre></td></tr></table></figure>
<p>上面命令中，参数d表示指定用户的主目录，参数s指定用户的shell，参数m表示如果该目录不存在，则创建该目录。</p>
<p>设置新用户的密码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd sangjian</div></pre></td></tr></table></figure>
<p>将sangjian添加到用户组admin中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod <span class="_">-a</span> -G admin sangjian</div></pre></td></tr></table></figure>
<p>为sangjian用户设定sudo权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">visudo</div></pre></td></tr></table></figure>
<p>visudo命令会打开文件/etc/sudoers，找到如下一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root    ALL=(ALL) ALL</div></pre></td></tr></table></figure>
<p>添加一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sangjian    ALL=(ALL) NOPASSWD: ALL</div></pre></td></tr></table></figure>
<p>上面的NOPASSWD表示，切换sudo的时候，不需要输入密码，我喜欢这样比较省事。如果出于安全考虑，也可以强制要求输入密码。<br>另开一个终端，以sangjian用户登录，检查是否设置成功</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh sangjian@192.168.1.125</div></pre></td></tr></table></figure>
<h2 id="第三步：SSH设置"><a href="#第三步：SSH设置" class="headerlink" title="第三步：SSH设置"></a>第三步：SSH设置</h2><p>查看本机是否有SSH公钥（一般是~/.ssh/id_rsa.pub），如果没有则可以使用ssh-keygen命令生成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure></p>
<p>想省事的话可以一直按回车即可</p>
<p>将刚生成的id_rsa.pub文件的内容追加到服务器的authorized_keys文件中<br>可以使用scp命令将生成的id_rsa.pub文件上传到服务器中，再将文件的内容追加到authorized_keys文件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ~/.ssh/id_rsa.pub sangjian@192.168.1.125:/home/sangjian/mac_id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>上面的命令是将本地的公钥上传到服务器中的/home/sangjian目录下的mac_id_rsa.pub文件中</p>
<p>再执行追加命令（如果~/.ssh目录不存在，则新建）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat mac_id_rsa.pub &gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>修改SSH配置文件/etc/ssh/sshd_config<br>在配置文件中找到 <code>#Port 22</code>，修改默认的端口，范围可以从1025到65536<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Port 6983</div></pre></td></tr></table></figure></p>
<p>修改如下设置并确保去除了#号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Protocol 2</div><div class="line"><span class="comment">#禁止root用户登录</span></div><div class="line">PermitRootLogin no</div><div class="line"></div><div class="line"><span class="comment">#禁止使用密码登录</span></div><div class="line">PasswordAuthentication no</div><div class="line">PermitEmptyPasswords no</div><div class="line">PasswordAuthentication yes</div></pre></td></tr></table></figure></p>
<p>最后，在配置文件的末尾添加一行用来指定可以登录的用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AllowUsers sangjian</div></pre></td></tr></table></figure></p>
<p>保存退出后，修改authorized_keys和.ssh的文件权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chmod 700 ~/.ssh/</div><div class="line">sudo chmod 600 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>确保.ssh的权限为700，authorized_keys的权限为600，否则登录的时候会出现如下错误</p>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---10-54-52.png" alt="-----2016-08-22---10-54-52.png" title="">
<p>查看日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tail -n 20 /var/<span class="built_in">log</span>/secure</div></pre></td></tr></table></figure></p>
<p>可以看到登录时的日志有如下一句</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localhost sshd[2359]: Authentication refused: bad ownership or modes <span class="keyword">for</span> file /home/sangjian/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---10-58-33.png" alt="-----2016-08-22---10-58-33.png" title="">
<p>重启SSHD<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service sshd restart</div></pre></td></tr></table></figure></p>
<p>检查是否可以免密码登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh sangjian@192.168.1.125 -p 6983</div></pre></td></tr></table></figure></p>
<p>发现不可以，提示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh: connect to host 192.168.1.125 port 6983: Connection refused</div></pre></td></tr></table></figure></p>
<h2 id="第四步：登录失败问题解决"><a href="#第四步：登录失败问题解决" class="headerlink" title="第四步：登录失败问题解决"></a>第四步：登录失败问题解决</h2><p>出现这一情况主要是防火墙端口开放的问题<br>查看日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tail -n 20 /var/<span class="built_in">log</span>/secure</div></pre></td></tr></table></figure></p>
<p>发现没有失败的日志输出<br>查看防火墙是否开启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status firewalld</div></pre></td></tr></table></figure></p>
<p>如果开启了，则原因就是刚刚设置的ssh端口6983并没有添加到防火墙中<br>添加端口到防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo firewall-cmd --zone=public --permanent --add-port=6983/tcp</div></pre></td></tr></table></figure></p>
<p>重启防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart firewalld</div></pre></td></tr></table></figure></p>
<p>查看端口是否添加成功</p>
<p>执行<code>sudo firewall-cmd --list-all</code>，如果出现以下输出，则证明添加成功</p>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---11-18-34.png" alt="-----2016-08-22---11-18-34.png" title="">
<h2 id="第五步-登录服务器"><a href="#第五步-登录服务器" class="headerlink" title="第五步 登录服务器"></a>第五步 登录服务器</h2><p>SSH的配置已经完成了，下面测试以下是否可以登录</p>
<p>输入<code>ssh sangjian@192.168.1.125 -p 6983</code>，提示</p>
<img src="/2016/08/01/CentOS7服务器初步配置/-----2016-08-22---11-20-02.png" alt="-----2016-08-22---11-20-02.png" title="">
<p>表示已经登录成功了，至此基于Centos7的服务器初步配置已经完成了。</p>
<p>本文主要介绍了SSH配置，剩下的可以根据需要配置一些安全相关的设置，比如防火墙的设置，端口的限制等等。</p>
]]></content>
    </entry>
    
  
  
</search>
